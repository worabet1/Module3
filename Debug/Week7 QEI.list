
Week7 QEI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e10  08005e10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000078  08005e8c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005e8c  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f65d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002178  00000000  00000000  0002f701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00031880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  000326a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c2c  00000000  00000000  000333f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f232  00000000  00000000  0004b024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a09e  00000000  00000000  0005a256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f42f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe8  00000000  00000000  000f4348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d48 	.word	0x08005d48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005d48 	.word	0x08005d48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_frsub>:
 8000290:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__addsf3>
 8000296:	bf00      	nop

08000298 <__aeabi_fsub>:
 8000298:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800029c <__addsf3>:
 800029c:	0042      	lsls	r2, r0, #1
 800029e:	bf1f      	itttt	ne
 80002a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002a4:	ea92 0f03 	teqne	r2, r3
 80002a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002b0:	d06a      	beq.n	8000388 <__addsf3+0xec>
 80002b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ba:	bfc1      	itttt	gt
 80002bc:	18d2      	addgt	r2, r2, r3
 80002be:	4041      	eorgt	r1, r0
 80002c0:	4048      	eorgt	r0, r1
 80002c2:	4041      	eorgt	r1, r0
 80002c4:	bfb8      	it	lt
 80002c6:	425b      	neglt	r3, r3
 80002c8:	2b19      	cmp	r3, #25
 80002ca:	bf88      	it	hi
 80002cc:	4770      	bxhi	lr
 80002ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4240      	negne	r0, r0
 80002de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002ea:	bf18      	it	ne
 80002ec:	4249      	negne	r1, r1
 80002ee:	ea92 0f03 	teq	r2, r3
 80002f2:	d03f      	beq.n	8000374 <__addsf3+0xd8>
 80002f4:	f1a2 0201 	sub.w	r2, r2, #1
 80002f8:	fa41 fc03 	asr.w	ip, r1, r3
 80002fc:	eb10 000c 	adds.w	r0, r0, ip
 8000300:	f1c3 0320 	rsb	r3, r3, #32
 8000304:	fa01 f103 	lsl.w	r1, r1, r3
 8000308:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__addsf3+0x78>
 800030e:	4249      	negs	r1, r1
 8000310:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000314:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000318:	d313      	bcc.n	8000342 <__addsf3+0xa6>
 800031a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800031e:	d306      	bcc.n	800032e <__addsf3+0x92>
 8000320:	0840      	lsrs	r0, r0, #1
 8000322:	ea4f 0131 	mov.w	r1, r1, rrx
 8000326:	f102 0201 	add.w	r2, r2, #1
 800032a:	2afe      	cmp	r2, #254	; 0xfe
 800032c:	d251      	bcs.n	80003d2 <__addsf3+0x136>
 800032e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000332:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000336:	bf08      	it	eq
 8000338:	f020 0001 	biceq.w	r0, r0, #1
 800033c:	ea40 0003 	orr.w	r0, r0, r3
 8000340:	4770      	bx	lr
 8000342:	0049      	lsls	r1, r1, #1
 8000344:	eb40 0000 	adc.w	r0, r0, r0
 8000348:	3a01      	subs	r2, #1
 800034a:	bf28      	it	cs
 800034c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000350:	d2ed      	bcs.n	800032e <__addsf3+0x92>
 8000352:	fab0 fc80 	clz	ip, r0
 8000356:	f1ac 0c08 	sub.w	ip, ip, #8
 800035a:	ebb2 020c 	subs.w	r2, r2, ip
 800035e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000362:	bfaa      	itet	ge
 8000364:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000368:	4252      	neglt	r2, r2
 800036a:	4318      	orrge	r0, r3
 800036c:	bfbc      	itt	lt
 800036e:	40d0      	lsrlt	r0, r2
 8000370:	4318      	orrlt	r0, r3
 8000372:	4770      	bx	lr
 8000374:	f092 0f00 	teq	r2, #0
 8000378:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800037c:	bf06      	itte	eq
 800037e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000382:	3201      	addeq	r2, #1
 8000384:	3b01      	subne	r3, #1
 8000386:	e7b5      	b.n	80002f4 <__addsf3+0x58>
 8000388:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800038c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000390:	bf18      	it	ne
 8000392:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000396:	d021      	beq.n	80003dc <__addsf3+0x140>
 8000398:	ea92 0f03 	teq	r2, r3
 800039c:	d004      	beq.n	80003a8 <__addsf3+0x10c>
 800039e:	f092 0f00 	teq	r2, #0
 80003a2:	bf08      	it	eq
 80003a4:	4608      	moveq	r0, r1
 80003a6:	4770      	bx	lr
 80003a8:	ea90 0f01 	teq	r0, r1
 80003ac:	bf1c      	itt	ne
 80003ae:	2000      	movne	r0, #0
 80003b0:	4770      	bxne	lr
 80003b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003b6:	d104      	bne.n	80003c2 <__addsf3+0x126>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	bf28      	it	cs
 80003bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003c0:	4770      	bx	lr
 80003c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003c6:	bf3c      	itt	cc
 80003c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003cc:	4770      	bxcc	lr
 80003ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003da:	4770      	bx	lr
 80003dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003e0:	bf16      	itet	ne
 80003e2:	4608      	movne	r0, r1
 80003e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003e8:	4601      	movne	r1, r0
 80003ea:	0242      	lsls	r2, r0, #9
 80003ec:	bf06      	itte	eq
 80003ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003f2:	ea90 0f01 	teqeq	r0, r1
 80003f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003fa:	4770      	bx	lr

080003fc <__aeabi_ui2f>:
 80003fc:	f04f 0300 	mov.w	r3, #0
 8000400:	e004      	b.n	800040c <__aeabi_i2f+0x8>
 8000402:	bf00      	nop

08000404 <__aeabi_i2f>:
 8000404:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	ea5f 0c00 	movs.w	ip, r0
 8000410:	bf08      	it	eq
 8000412:	4770      	bxeq	lr
 8000414:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000418:	4601      	mov	r1, r0
 800041a:	f04f 0000 	mov.w	r0, #0
 800041e:	e01c      	b.n	800045a <__aeabi_l2f+0x2a>

08000420 <__aeabi_ul2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f04f 0300 	mov.w	r3, #0
 800042c:	e00a      	b.n	8000444 <__aeabi_l2f+0x14>
 800042e:	bf00      	nop

08000430 <__aeabi_l2f>:
 8000430:	ea50 0201 	orrs.w	r2, r0, r1
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800043c:	d502      	bpl.n	8000444 <__aeabi_l2f+0x14>
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	ea5f 0c01 	movs.w	ip, r1
 8000448:	bf02      	ittt	eq
 800044a:	4684      	moveq	ip, r0
 800044c:	4601      	moveq	r1, r0
 800044e:	2000      	moveq	r0, #0
 8000450:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000454:	bf08      	it	eq
 8000456:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800045a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800045e:	fabc f28c 	clz	r2, ip
 8000462:	3a08      	subs	r2, #8
 8000464:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000468:	db10      	blt.n	800048c <__aeabi_l2f+0x5c>
 800046a:	fa01 fc02 	lsl.w	ip, r1, r2
 800046e:	4463      	add	r3, ip
 8000470:	fa00 fc02 	lsl.w	ip, r0, r2
 8000474:	f1c2 0220 	rsb	r2, r2, #32
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	fa20 f202 	lsr.w	r2, r0, r2
 8000480:	eb43 0002 	adc.w	r0, r3, r2
 8000484:	bf08      	it	eq
 8000486:	f020 0001 	biceq.w	r0, r0, #1
 800048a:	4770      	bx	lr
 800048c:	f102 0220 	add.w	r2, r2, #32
 8000490:	fa01 fc02 	lsl.w	ip, r1, r2
 8000494:	f1c2 0220 	rsb	r2, r2, #32
 8000498:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800049c:	fa21 f202 	lsr.w	r2, r1, r2
 80004a0:	eb43 0002 	adc.w	r0, r3, r2
 80004a4:	bf08      	it	eq
 80004a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004aa:	4770      	bx	lr

080004ac <__aeabi_uldivmod>:
 80004ac:	b953      	cbnz	r3, 80004c4 <__aeabi_uldivmod+0x18>
 80004ae:	b94a      	cbnz	r2, 80004c4 <__aeabi_uldivmod+0x18>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	bf08      	it	eq
 80004b4:	2800      	cmpeq	r0, #0
 80004b6:	bf1c      	itt	ne
 80004b8:	f04f 31ff 	movne.w	r1, #4294967295
 80004bc:	f04f 30ff 	movne.w	r0, #4294967295
 80004c0:	f000 b96e 	b.w	80007a0 <__aeabi_idiv0>
 80004c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80004c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004cc:	f000 f806 	bl	80004dc <__udivmoddi4>
 80004d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004d8:	b004      	add	sp, #16
 80004da:	4770      	bx	lr

080004dc <__udivmoddi4>:
 80004dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004e0:	9d08      	ldr	r5, [sp, #32]
 80004e2:	4604      	mov	r4, r0
 80004e4:	468c      	mov	ip, r1
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f040 8083 	bne.w	80005f2 <__udivmoddi4+0x116>
 80004ec:	428a      	cmp	r2, r1
 80004ee:	4617      	mov	r7, r2
 80004f0:	d947      	bls.n	8000582 <__udivmoddi4+0xa6>
 80004f2:	fab2 f282 	clz	r2, r2
 80004f6:	b142      	cbz	r2, 800050a <__udivmoddi4+0x2e>
 80004f8:	f1c2 0020 	rsb	r0, r2, #32
 80004fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000500:	4091      	lsls	r1, r2
 8000502:	4097      	lsls	r7, r2
 8000504:	ea40 0c01 	orr.w	ip, r0, r1
 8000508:	4094      	lsls	r4, r2
 800050a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800050e:	0c23      	lsrs	r3, r4, #16
 8000510:	fbbc f6f8 	udiv	r6, ip, r8
 8000514:	fa1f fe87 	uxth.w	lr, r7
 8000518:	fb08 c116 	mls	r1, r8, r6, ip
 800051c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000520:	fb06 f10e 	mul.w	r1, r6, lr
 8000524:	4299      	cmp	r1, r3
 8000526:	d909      	bls.n	800053c <__udivmoddi4+0x60>
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	f106 30ff 	add.w	r0, r6, #4294967295
 800052e:	f080 8119 	bcs.w	8000764 <__udivmoddi4+0x288>
 8000532:	4299      	cmp	r1, r3
 8000534:	f240 8116 	bls.w	8000764 <__udivmoddi4+0x288>
 8000538:	3e02      	subs	r6, #2
 800053a:	443b      	add	r3, r7
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3310 	mls	r3, r8, r0, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000550:	45a6      	cmp	lr, r4
 8000552:	d909      	bls.n	8000568 <__udivmoddi4+0x8c>
 8000554:	193c      	adds	r4, r7, r4
 8000556:	f100 33ff 	add.w	r3, r0, #4294967295
 800055a:	f080 8105 	bcs.w	8000768 <__udivmoddi4+0x28c>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f240 8102 	bls.w	8000768 <__udivmoddi4+0x28c>
 8000564:	3802      	subs	r0, #2
 8000566:	443c      	add	r4, r7
 8000568:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800056c:	eba4 040e 	sub.w	r4, r4, lr
 8000570:	2600      	movs	r6, #0
 8000572:	b11d      	cbz	r5, 800057c <__udivmoddi4+0xa0>
 8000574:	40d4      	lsrs	r4, r2
 8000576:	2300      	movs	r3, #0
 8000578:	e9c5 4300 	strd	r4, r3, [r5]
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	b902      	cbnz	r2, 8000586 <__udivmoddi4+0xaa>
 8000584:	deff      	udf	#255	; 0xff
 8000586:	fab2 f282 	clz	r2, r2
 800058a:	2a00      	cmp	r2, #0
 800058c:	d150      	bne.n	8000630 <__udivmoddi4+0x154>
 800058e:	1bcb      	subs	r3, r1, r7
 8000590:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000594:	fa1f f887 	uxth.w	r8, r7
 8000598:	2601      	movs	r6, #1
 800059a:	fbb3 fcfe 	udiv	ip, r3, lr
 800059e:	0c21      	lsrs	r1, r4, #16
 80005a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80005a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a8:	fb08 f30c 	mul.w	r3, r8, ip
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d907      	bls.n	80005c0 <__udivmoddi4+0xe4>
 80005b0:	1879      	adds	r1, r7, r1
 80005b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005b6:	d202      	bcs.n	80005be <__udivmoddi4+0xe2>
 80005b8:	428b      	cmp	r3, r1
 80005ba:	f200 80e9 	bhi.w	8000790 <__udivmoddi4+0x2b4>
 80005be:	4684      	mov	ip, r0
 80005c0:	1ac9      	subs	r1, r1, r3
 80005c2:	b2a3      	uxth	r3, r4
 80005c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80005c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80005cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80005d0:	fb08 f800 	mul.w	r8, r8, r0
 80005d4:	45a0      	cmp	r8, r4
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x10c>
 80005d8:	193c      	adds	r4, r7, r4
 80005da:	f100 33ff 	add.w	r3, r0, #4294967295
 80005de:	d202      	bcs.n	80005e6 <__udivmoddi4+0x10a>
 80005e0:	45a0      	cmp	r8, r4
 80005e2:	f200 80d9 	bhi.w	8000798 <__udivmoddi4+0x2bc>
 80005e6:	4618      	mov	r0, r3
 80005e8:	eba4 0408 	sub.w	r4, r4, r8
 80005ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005f0:	e7bf      	b.n	8000572 <__udivmoddi4+0x96>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d909      	bls.n	800060a <__udivmoddi4+0x12e>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	f000 80b1 	beq.w	800075e <__udivmoddi4+0x282>
 80005fc:	2600      	movs	r6, #0
 80005fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000602:	4630      	mov	r0, r6
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	fab3 f683 	clz	r6, r3
 800060e:	2e00      	cmp	r6, #0
 8000610:	d14a      	bne.n	80006a8 <__udivmoddi4+0x1cc>
 8000612:	428b      	cmp	r3, r1
 8000614:	d302      	bcc.n	800061c <__udivmoddi4+0x140>
 8000616:	4282      	cmp	r2, r0
 8000618:	f200 80b8 	bhi.w	800078c <__udivmoddi4+0x2b0>
 800061c:	1a84      	subs	r4, r0, r2
 800061e:	eb61 0103 	sbc.w	r1, r1, r3
 8000622:	2001      	movs	r0, #1
 8000624:	468c      	mov	ip, r1
 8000626:	2d00      	cmp	r5, #0
 8000628:	d0a8      	beq.n	800057c <__udivmoddi4+0xa0>
 800062a:	e9c5 4c00 	strd	r4, ip, [r5]
 800062e:	e7a5      	b.n	800057c <__udivmoddi4+0xa0>
 8000630:	f1c2 0320 	rsb	r3, r2, #32
 8000634:	fa20 f603 	lsr.w	r6, r0, r3
 8000638:	4097      	lsls	r7, r2
 800063a:	fa01 f002 	lsl.w	r0, r1, r2
 800063e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000642:	40d9      	lsrs	r1, r3
 8000644:	4330      	orrs	r0, r6
 8000646:	0c03      	lsrs	r3, r0, #16
 8000648:	fbb1 f6fe 	udiv	r6, r1, lr
 800064c:	fa1f f887 	uxth.w	r8, r7
 8000650:	fb0e 1116 	mls	r1, lr, r6, r1
 8000654:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000658:	fb06 f108 	mul.w	r1, r6, r8
 800065c:	4299      	cmp	r1, r3
 800065e:	fa04 f402 	lsl.w	r4, r4, r2
 8000662:	d909      	bls.n	8000678 <__udivmoddi4+0x19c>
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	f106 3cff 	add.w	ip, r6, #4294967295
 800066a:	f080 808d 	bcs.w	8000788 <__udivmoddi4+0x2ac>
 800066e:	4299      	cmp	r1, r3
 8000670:	f240 808a 	bls.w	8000788 <__udivmoddi4+0x2ac>
 8000674:	3e02      	subs	r6, #2
 8000676:	443b      	add	r3, r7
 8000678:	1a5b      	subs	r3, r3, r1
 800067a:	b281      	uxth	r1, r0
 800067c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000680:	fb0e 3310 	mls	r3, lr, r0, r3
 8000684:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000688:	fb00 f308 	mul.w	r3, r0, r8
 800068c:	428b      	cmp	r3, r1
 800068e:	d907      	bls.n	80006a0 <__udivmoddi4+0x1c4>
 8000690:	1879      	adds	r1, r7, r1
 8000692:	f100 3cff 	add.w	ip, r0, #4294967295
 8000696:	d273      	bcs.n	8000780 <__udivmoddi4+0x2a4>
 8000698:	428b      	cmp	r3, r1
 800069a:	d971      	bls.n	8000780 <__udivmoddi4+0x2a4>
 800069c:	3802      	subs	r0, #2
 800069e:	4439      	add	r1, r7
 80006a0:	1acb      	subs	r3, r1, r3
 80006a2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80006a6:	e778      	b.n	800059a <__udivmoddi4+0xbe>
 80006a8:	f1c6 0c20 	rsb	ip, r6, #32
 80006ac:	fa03 f406 	lsl.w	r4, r3, r6
 80006b0:	fa22 f30c 	lsr.w	r3, r2, ip
 80006b4:	431c      	orrs	r4, r3
 80006b6:	fa20 f70c 	lsr.w	r7, r0, ip
 80006ba:	fa01 f306 	lsl.w	r3, r1, r6
 80006be:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80006c2:	fa21 f10c 	lsr.w	r1, r1, ip
 80006c6:	431f      	orrs	r7, r3
 80006c8:	0c3b      	lsrs	r3, r7, #16
 80006ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80006ce:	fa1f f884 	uxth.w	r8, r4
 80006d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80006d6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80006da:	fb09 fa08 	mul.w	sl, r9, r8
 80006de:	458a      	cmp	sl, r1
 80006e0:	fa02 f206 	lsl.w	r2, r2, r6
 80006e4:	fa00 f306 	lsl.w	r3, r0, r6
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x220>
 80006ea:	1861      	adds	r1, r4, r1
 80006ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80006f0:	d248      	bcs.n	8000784 <__udivmoddi4+0x2a8>
 80006f2:	458a      	cmp	sl, r1
 80006f4:	d946      	bls.n	8000784 <__udivmoddi4+0x2a8>
 80006f6:	f1a9 0902 	sub.w	r9, r9, #2
 80006fa:	4421      	add	r1, r4
 80006fc:	eba1 010a 	sub.w	r1, r1, sl
 8000700:	b2bf      	uxth	r7, r7
 8000702:	fbb1 f0fe 	udiv	r0, r1, lr
 8000706:	fb0e 1110 	mls	r1, lr, r0, r1
 800070a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800070e:	fb00 f808 	mul.w	r8, r0, r8
 8000712:	45b8      	cmp	r8, r7
 8000714:	d907      	bls.n	8000726 <__udivmoddi4+0x24a>
 8000716:	19e7      	adds	r7, r4, r7
 8000718:	f100 31ff 	add.w	r1, r0, #4294967295
 800071c:	d22e      	bcs.n	800077c <__udivmoddi4+0x2a0>
 800071e:	45b8      	cmp	r8, r7
 8000720:	d92c      	bls.n	800077c <__udivmoddi4+0x2a0>
 8000722:	3802      	subs	r0, #2
 8000724:	4427      	add	r7, r4
 8000726:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800072a:	eba7 0708 	sub.w	r7, r7, r8
 800072e:	fba0 8902 	umull	r8, r9, r0, r2
 8000732:	454f      	cmp	r7, r9
 8000734:	46c6      	mov	lr, r8
 8000736:	4649      	mov	r1, r9
 8000738:	d31a      	bcc.n	8000770 <__udivmoddi4+0x294>
 800073a:	d017      	beq.n	800076c <__udivmoddi4+0x290>
 800073c:	b15d      	cbz	r5, 8000756 <__udivmoddi4+0x27a>
 800073e:	ebb3 020e 	subs.w	r2, r3, lr
 8000742:	eb67 0701 	sbc.w	r7, r7, r1
 8000746:	fa07 fc0c 	lsl.w	ip, r7, ip
 800074a:	40f2      	lsrs	r2, r6
 800074c:	ea4c 0202 	orr.w	r2, ip, r2
 8000750:	40f7      	lsrs	r7, r6
 8000752:	e9c5 2700 	strd	r2, r7, [r5]
 8000756:	2600      	movs	r6, #0
 8000758:	4631      	mov	r1, r6
 800075a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075e:	462e      	mov	r6, r5
 8000760:	4628      	mov	r0, r5
 8000762:	e70b      	b.n	800057c <__udivmoddi4+0xa0>
 8000764:	4606      	mov	r6, r0
 8000766:	e6e9      	b.n	800053c <__udivmoddi4+0x60>
 8000768:	4618      	mov	r0, r3
 800076a:	e6fd      	b.n	8000568 <__udivmoddi4+0x8c>
 800076c:	4543      	cmp	r3, r8
 800076e:	d2e5      	bcs.n	800073c <__udivmoddi4+0x260>
 8000770:	ebb8 0e02 	subs.w	lr, r8, r2
 8000774:	eb69 0104 	sbc.w	r1, r9, r4
 8000778:	3801      	subs	r0, #1
 800077a:	e7df      	b.n	800073c <__udivmoddi4+0x260>
 800077c:	4608      	mov	r0, r1
 800077e:	e7d2      	b.n	8000726 <__udivmoddi4+0x24a>
 8000780:	4660      	mov	r0, ip
 8000782:	e78d      	b.n	80006a0 <__udivmoddi4+0x1c4>
 8000784:	4681      	mov	r9, r0
 8000786:	e7b9      	b.n	80006fc <__udivmoddi4+0x220>
 8000788:	4666      	mov	r6, ip
 800078a:	e775      	b.n	8000678 <__udivmoddi4+0x19c>
 800078c:	4630      	mov	r0, r6
 800078e:	e74a      	b.n	8000626 <__udivmoddi4+0x14a>
 8000790:	f1ac 0c02 	sub.w	ip, ip, #2
 8000794:	4439      	add	r1, r7
 8000796:	e713      	b.n	80005c0 <__udivmoddi4+0xe4>
 8000798:	3802      	subs	r0, #2
 800079a:	443c      	add	r4, r7
 800079c:	e724      	b.n	80005e8 <__udivmoddi4+0x10c>
 800079e:	bf00      	nop

080007a0 <__aeabi_idiv0>:
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80007a8:	ed2d 8b02 	vpush	{d8}
 80007ac:	b08a      	sub	sp, #40	; 0x28
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f000 ffcc 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f92c 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 fb48 	bl	8000e4c <MX_GPIO_Init>
  MX_DMA_Init();
 80007bc:	f000 fb26 	bl	8000e0c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007c0:	f000 fafa 	bl	8000db8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007c4:	f000 f9de 	bl	8000b84 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007c8:	f000 fa34 	bl	8000c34 <MX_TIM2_Init>
  MX_ADC1_Init();
 80007cc:	f000 f988 	bl	8000ae0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80007d0:	f000 fa7c 	bl	8000ccc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80007d4:	487e      	ldr	r0, [pc, #504]	; (80009d0 <main+0x22c>)
 80007d6:	f002 ff4f 	bl	8003678 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80007da:	213c      	movs	r1, #60	; 0x3c
 80007dc:	487d      	ldr	r0, [pc, #500]	; (80009d4 <main+0x230>)
 80007de:	f003 f95d 	bl	8003a9c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim3);
 80007e2:	487d      	ldr	r0, [pc, #500]	; (80009d8 <main+0x234>)
 80007e4:	f002 feee 	bl	80035c4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80007e8:	2100      	movs	r1, #0
 80007ea:	487b      	ldr	r0, [pc, #492]	; (80009d8 <main+0x234>)
 80007ec:	f003 f800 	bl	80037f0 <HAL_TIM_PWM_Start>
	{
	char temp[] = "Hello world\r\n please type something\r\n";
 80007f0:	4b7a      	ldr	r3, [pc, #488]	; (80009dc <main+0x238>)
 80007f2:	463c      	mov	r4, r7
 80007f4:	461d      	mov	r5, r3
 80007f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000802:	6020      	str	r0, [r4, #0]
 8000804:	3404      	adds	r4, #4
 8000806:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)temp,strlen(temp) ,10);
 8000808:	463b      	mov	r3, r7
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fce8 	bl	80001e0 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	4639      	mov	r1, r7
 8000816:	230a      	movs	r3, #10
 8000818:	4871      	ldr	r0, [pc, #452]	; (80009e0 <main+0x23c>)
 800081a:	f004 f81a 	bl	8004852 <HAL_UART_Transmit>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		/*Method 2 Interrupt Mode*/
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 4);
 800081e:	2204      	movs	r2, #4
 8000820:	4970      	ldr	r1, [pc, #448]	; (80009e4 <main+0x240>)
 8000822:	486f      	ldr	r0, [pc, #444]	; (80009e0 <main+0x23c>)
 8000824:	f004 f8a7 	bl	8004976 <HAL_UART_Receive_IT>

		/*Method 2 W/ 1 Char Received*/
		int16_t inputchar = UARTRecieveIT();
 8000828:	f000 fb80 	bl	8000f2c <UARTRecieveIT>
 800082c:	4603      	mov	r3, r0
 800082e:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(inputchar!=-1)
 8000830:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000838:	d011      	beq.n	800085e <main+0xba>
		{

			sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
 800083a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800083e:	461a      	mov	r2, r3
 8000840:	4969      	ldr	r1, [pc, #420]	; (80009e8 <main+0x244>)
 8000842:	486a      	ldr	r0, [pc, #424]	; (80009ec <main+0x248>)
 8000844:	f004 fe52 	bl	80054ec <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000848:	4868      	ldr	r0, [pc, #416]	; (80009ec <main+0x248>)
 800084a:	f7ff fcc9 	bl	80001e0 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	4965      	ldr	r1, [pc, #404]	; (80009ec <main+0x248>)
 8000858:	4861      	ldr	r0, [pc, #388]	; (80009e0 <main+0x23c>)
 800085a:	f003 fffa 	bl	8004852 <HAL_UART_Transmit>
		}



		if(require>0){
 800085e:	4b64      	ldr	r3, [pc, #400]	; (80009f0 <main+0x24c>)
 8000860:	edd3 7a00 	vldr	s15, [r3]
 8000864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086c:	dd0a      	ble.n	8000884 <main+0xe0>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	2101      	movs	r1, #1
 8000872:	4860      	ldr	r0, [pc, #384]	; (80009f4 <main+0x250>)
 8000874:	f002 f9c8 	bl	8002c08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2102      	movs	r1, #2
 800087c:	485d      	ldr	r0, [pc, #372]	; (80009f4 <main+0x250>)
 800087e:	f002 f9c3 	bl	8002c08 <HAL_GPIO_WritePin>
 8000882:	e011      	b.n	80008a8 <main+0x104>
		}
		else if(require<0){
 8000884:	4b5a      	ldr	r3, [pc, #360]	; (80009f0 <main+0x24c>)
 8000886:	edd3 7a00 	vldr	s15, [r3]
 800088a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800088e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000892:	d509      	bpl.n	80008a8 <main+0x104>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	4856      	ldr	r0, [pc, #344]	; (80009f4 <main+0x250>)
 800089a:	f002 f9b5 	bl	8002c08 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	2102      	movs	r1, #2
 80008a2:	4854      	ldr	r0, [pc, #336]	; (80009f4 <main+0x250>)
 80008a4:	f002 f9b0 	bl	8002c08 <HAL_GPIO_WritePin>
		}
//		//Add LPF?
		if (micros() - Timestamp_Encoder >= 10000)
 80008a8:	f000 fc92 	bl	80011d0 <micros>
 80008ac:	4b52      	ldr	r3, [pc, #328]	; (80009f8 <main+0x254>)
 80008ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008b2:	ebb0 0802 	subs.w	r8, r0, r2
 80008b6:	eb61 0903 	sbc.w	r9, r1, r3
 80008ba:	f242 720f 	movw	r2, #9999	; 0x270f
 80008be:	f04f 0300 	mov.w	r3, #0
 80008c2:	454b      	cmp	r3, r9
 80008c4:	bf08      	it	eq
 80008c6:	4542      	cmpeq	r2, r8
 80008c8:	d2a9      	bcs.n	800081e <main+0x7a>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 80008ca:	4b4c      	ldr	r3, [pc, #304]	; (80009fc <main+0x258>)
 80008cc:	881a      	ldrh	r2, [r3, #0]
 80008ce:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <main+0x234>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
			Timestamp_Encoder = micros();
 80008d4:	f000 fc7c 	bl	80011d0 <micros>
 80008d8:	4602      	mov	r2, r0
 80008da:	460b      	mov	r3, r1
 80008dc:	4946      	ldr	r1, [pc, #280]	; (80009f8 <main+0x254>)
 80008de:	e9c1 2300 	strd	r2, r3, [r1]
			EncoderVel = (EncoderVel * 2 + EncoderVelocity_Update()) / 3;
 80008e2:	4b47      	ldr	r3, [pc, #284]	; (8000a00 <main+0x25c>)
 80008e4:	edd3 7a00 	vldr	s15, [r3]
 80008e8:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80008ec:	f000 fbee 	bl	80010cc <EncoderVelocity_Update>
 80008f0:	eef0 7a40 	vmov.f32	s15, s0
 80008f4:	ee38 7a27 	vadd.f32	s14, s16, s15
 80008f8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80008fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000900:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <main+0x25c>)
 8000902:	edc3 7a00 	vstr	s15, [r3]
			vrpm = EncoderVel / 980 *60;
 8000906:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <main+0x25c>)
 8000908:	ed93 7a00 	vldr	s14, [r3]
 800090c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000a04 <main+0x260>
 8000910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000914:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000a08 <main+0x264>
 8000918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800091c:	4b3b      	ldr	r3, [pc, #236]	; (8000a0c <main+0x268>)
 800091e:	edc3 7a00 	vstr	s15, [r3]
			if(require>=0){
 8000922:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <main+0x24c>)
 8000924:	edd3 7a00 	vldr	s15, [r3]
 8000928:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800092c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000930:	db22      	blt.n	8000978 <main+0x1d4>
				if(vrpm < require){
 8000932:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <main+0x268>)
 8000934:	ed93 7a00 	vldr	s14, [r3]
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <main+0x24c>)
 800093a:	edd3 7a00 	vldr	s15, [r3]
 800093e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000946:	d506      	bpl.n	8000956 <main+0x1b2>
					pwm += 10;
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <main+0x258>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	330a      	adds	r3, #10
 800094e:	b29a      	uxth	r2, r3
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <main+0x258>)
 8000952:	801a      	strh	r2, [r3, #0]
 8000954:	e010      	b.n	8000978 <main+0x1d4>
				}
				else if (vrpm>require){
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <main+0x268>)
 8000958:	ed93 7a00 	vldr	s14, [r3]
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <main+0x24c>)
 800095e:	edd3 7a00 	vldr	s15, [r3]
 8000962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	dd05      	ble.n	8000978 <main+0x1d4>
					pwm-=10;
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <main+0x258>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	3b0a      	subs	r3, #10
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <main+0x258>)
 8000976:	801a      	strh	r2, [r3, #0]
				}
			}
			if(require<0){
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <main+0x24c>)
 800097a:	edd3 7a00 	vldr	s15, [r3]
 800097e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	d522      	bpl.n	80009ce <main+0x22a>
				if(vrpm > require){
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <main+0x268>)
 800098a:	ed93 7a00 	vldr	s14, [r3]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <main+0x24c>)
 8000990:	edd3 7a00 	vldr	s15, [r3]
 8000994:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099c:	dd06      	ble.n	80009ac <main+0x208>
					pwm += 10;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <main+0x258>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	330a      	adds	r3, #10
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <main+0x258>)
 80009a8:	801a      	strh	r2, [r3, #0]
 80009aa:	e738      	b.n	800081e <main+0x7a>
				}
				else if (vrpm<require){
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <main+0x268>)
 80009ae:	ed93 7a00 	vldr	s14, [r3]
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <main+0x24c>)
 80009b4:	edd3 7a00 	vldr	s15, [r3]
 80009b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c0:	d505      	bpl.n	80009ce <main+0x22a>
					pwm-=10;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <main+0x258>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	3b0a      	subs	r3, #10
 80009c8:	b29a      	uxth	r2, r3
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <main+0x258>)
 80009cc:	801a      	strh	r2, [r3, #0]
	{
 80009ce:	e726      	b.n	800081e <main+0x7a>
 80009d0:	20000260 	.word	0x20000260
 80009d4:	20000218 	.word	0x20000218
 80009d8:	20000120 	.word	0x20000120
 80009dc:	08005d74 	.word	0x08005d74
 80009e0:	200002a8 	.word	0x200002a8
 80009e4:	200000d8 	.word	0x200000d8
 80009e8:	08005d60 	.word	0x08005d60
 80009ec:	200000b8 	.word	0x200000b8
 80009f0:	20000000 	.word	0x20000000
 80009f4:	40020000 	.word	0x40020000
 80009f8:	200000a8 	.word	0x200000a8
 80009fc:	200000b4 	.word	0x200000b4
 8000a00:	200000a0 	.word	0x200000a0
 8000a04:	44750000 	.word	0x44750000
 8000a08:	42700000 	.word	0x42700000
 8000a0c:	200000b0 	.word	0x200000b0

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b094      	sub	sp, #80	; 0x50
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0320 	add.w	r3, r7, #32
 8000a1a:	2230      	movs	r2, #48	; 0x30
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f004 fd5c 	bl	80054dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <SystemClock_Config+0xc8>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a26      	ldr	r2, [pc, #152]	; (8000ad8 <SystemClock_Config+0xc8>)
 8000a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <SystemClock_Config+0xc8>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <SystemClock_Config+0xcc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a20      	ldr	r2, [pc, #128]	; (8000adc <SystemClock_Config+0xcc>)
 8000a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <SystemClock_Config+0xcc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a74:	2310      	movs	r3, #16
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a80:	2308      	movs	r3, #8
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a84:	2364      	movs	r3, #100	; 0x64
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 f8d1 	bl	8002c3c <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000aa0:	f000 fbb0 	bl	8001204 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000aba:	f107 030c 	add.w	r3, r7, #12
 8000abe:	2103      	movs	r1, #3
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f002 fb33 	bl	800312c <HAL_RCC_ClockConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000acc:	f000 fb9a 	bl	8001204 <Error_Handler>
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3750      	adds	r7, #80	; 0x50
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40007000 	.word	0x40007000

08000ae0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000af2:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000af4:	4a22      	ldr	r2, [pc, #136]	; (8000b80 <MX_ADC1_Init+0xa0>)
 8000af6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000afa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000afe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b46:	f000 fe73 	bl	8001830 <HAL_ADC_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000b50:	f000 fb58 	bl	8001204 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b54:	2304      	movs	r3, #4
 8000b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_ADC1_Init+0x9c>)
 8000b66:	f001 f805 	bl	8001b74 <HAL_ADC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000b70:	f000 fb48 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000168 	.word	0x20000168
 8000b80:	40012000 	.word	0x40012000

08000b84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2224      	movs	r2, #36	; 0x24
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 fca2 	bl	80054dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000ba2:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <MX_TIM1_Init+0xac>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 980;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bb4:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8000bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be4:	2301      	movs	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bf8:	f002 feaa 	bl	8003950 <HAL_TIM_Encoder_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c02:	f000 faff 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000c14:	f003 fd4e 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c1e:	f000 faf1 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3730      	adds	r7, #48	; 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000218 	.word	0x20000218
 8000c30:	40010000 	.word	0x40010000

08000c34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c5a:	2263      	movs	r2, #99	; 0x63
 8000c5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c66:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c7a:	f002 fc53 	bl	8003524 <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c84:	f000 fabe 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	4619      	mov	r1, r3
 8000c94:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000c96:	f003 f955 	bl	8003f44 <HAL_TIM_ConfigClockSource>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ca0:	f000 fab0 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_TIM2_Init+0x94>)
 8000cb2:	f003 fcff 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cbc:	f000 faa2 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000260 	.word	0x20000260

08000ccc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	f107 0320 	add.w	r3, r7, #32
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cfc:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000cfe:	4a2d      	ldr	r2, [pc, #180]	; (8000db4 <MX_TIM3_Init+0xe8>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d02:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000d0e:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d10:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d22:	4823      	ldr	r0, [pc, #140]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d24:	f002 fbfe 	bl	8003524 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d2e:	f000 fa69 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	481c      	ldr	r0, [pc, #112]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d40:	f003 f900 	bl	8003f44 <HAL_TIM_ConfigClockSource>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d4a:	f000 fa5b 	bl	8001204 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d4e:	4818      	ldr	r0, [pc, #96]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d50:	f002 fcf4 	bl	800373c <HAL_TIM_PWM_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d5a:	f000 fa53 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4810      	ldr	r0, [pc, #64]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d6e:	f003 fca1 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d78:	f000 fa44 	bl	8001204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7c:	2360      	movs	r3, #96	; 0x60
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4619      	mov	r1, r3
 8000d92:	4807      	ldr	r0, [pc, #28]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000d94:	f003 f818 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d9e:	f000 fa31 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000da2:	4803      	ldr	r0, [pc, #12]	; (8000db0 <MX_TIM3_Init+0xe4>)
 8000da4:	f000 fb70 	bl	8001488 <HAL_TIM_MspPostInit>

}
 8000da8:	bf00      	nop
 8000daa:	3738      	adds	r7, #56	; 0x38
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000120 	.word	0x20000120
 8000db4:	40000400 	.word	0x40000400

08000db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <MX_USART2_UART_Init+0x50>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f003 fce2 	bl	80047b8 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfa:	f000 fa03 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200002a8 	.word	0x200002a8
 8000e08:	40004400 	.word	0x40004400

08000e0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_DMA_Init+0x3c>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <MX_DMA_Init+0x3c>)
 8000e1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_DMA_Init+0x3c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2038      	movs	r0, #56	; 0x38
 8000e34:	f001 f9b1 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e38:	2038      	movs	r0, #56	; 0x38
 8000e3a:	f001 f9ca 	bl	80021d2 <HAL_NVIC_EnableIRQ>

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023800 	.word	0x40023800

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b2d      	ldr	r3, [pc, #180]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a2c      	ldr	r2, [pc, #176]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <MX_GPIO_Init+0xd0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2123      	movs	r1, #35	; 0x23
 8000ed6:	4812      	ldr	r0, [pc, #72]	; (8000f20 <MX_GPIO_Init+0xd4>)
 8000ed8:	f001 fe96 	bl	8002c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_GPIO_Init+0xd8>)
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <MX_GPIO_Init+0xdc>)
 8000ef2:	f001 fd05 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 8000ef6:	2323      	movs	r3, #35	; 0x23
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_GPIO_Init+0xd4>)
 8000f0e:	f001 fcf7 	bl	8002900 <HAL_GPIO_Init>

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	10210000 	.word	0x10210000
 8000f28:	40020800 	.word	0x40020800

08000f2c <UARTRecieveIT>:

/* USER CODE BEGIN 4 */

int16_t UARTRecieveIT()
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8000f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f36:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <UARTRecieveIT+0x54>)
 8000f3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <UARTRecieveIT+0x54>)
 8000f40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <UARTRecieveIT+0x58>)
 8000f48:	6812      	ldr	r2, [r2, #0]
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d010      	beq.n	8000f70 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <UARTRecieveIT+0x58>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <UARTRecieveIT+0x5c>)
 8000f54:	5cd3      	ldrb	r3, [r2, r3]
 8000f56:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <UARTRecieveIT+0x58>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <UARTRecieveIT+0x54>)
 8000f60:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000f62:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f66:	fb02 f201 	mul.w	r2, r2, r1
 8000f6a:	1a9b      	subs	r3, r3, r2
 8000f6c:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <UARTRecieveIT+0x58>)
 8000f6e:	6013      	str	r3, [r2, #0]
	}
	return data;
 8000f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	200002a8 	.word	0x200002a8
 8000f84:	200000f8 	.word	0x200000f8
 8000f88:	200000d8 	.word	0x200000d8

08000f8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%d%d%d%d]\r\n", RxDataBuffer[0],RxDataBuffer[1],RxDataBuffer[2],RxDataBuffer[3]);
 8000f94:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8000f9c:	785b      	ldrb	r3, [r3, #1]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8000fa2:	789b      	ldrb	r3, [r3, #2]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8000fa8:	78db      	ldrb	r3, [r3, #3]
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	9200      	str	r2, [sp, #0]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	493e      	ldr	r1, [pc, #248]	; (80010ac <HAL_UART_RxCpltCallback+0x120>)
 8000fb4:	483e      	ldr	r0, [pc, #248]	; (80010b0 <HAL_UART_RxCpltCallback+0x124>)
 8000fb6:	f004 fa99 	bl	80054ec <siprintf>
	a0 = RxDataBuffer[0];
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <HAL_UART_RxCpltCallback+0x128>)
 8000fc2:	601a      	str	r2, [r3, #0]
	a1 = RxDataBuffer[1];
 8000fc4:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8000fc6:	785b      	ldrb	r3, [r3, #1]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <HAL_UART_RxCpltCallback+0x12c>)
 8000fcc:	601a      	str	r2, [r3, #0]
	a2 = RxDataBuffer[2];
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b39      	ldr	r3, [pc, #228]	; (80010bc <HAL_UART_RxCpltCallback+0x130>)
 8000fd6:	601a      	str	r2, [r3, #0]
	a3 = RxDataBuffer[3];
 8000fd8:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8000fda:	78db      	ldrb	r3, [r3, #3]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b38      	ldr	r3, [pc, #224]	; (80010c0 <HAL_UART_RxCpltCallback+0x134>)
 8000fe0:	601a      	str	r2, [r3, #0]
	if(a0 == 115 && a1 == 116 && a2 == 111 && a3 == 112){
 8000fe2:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <HAL_UART_RxCpltCallback+0x128>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b73      	cmp	r3, #115	; 0x73
 8000fe8:	d110      	bne.n	800100c <HAL_UART_RxCpltCallback+0x80>
 8000fea:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <HAL_UART_RxCpltCallback+0x12c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b74      	cmp	r3, #116	; 0x74
 8000ff0:	d10c      	bne.n	800100c <HAL_UART_RxCpltCallback+0x80>
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <HAL_UART_RxCpltCallback+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b6f      	cmp	r3, #111	; 0x6f
 8000ff8:	d108      	bne.n	800100c <HAL_UART_RxCpltCallback+0x80>
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_UART_RxCpltCallback+0x134>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b70      	cmp	r3, #112	; 0x70
 8001000:	d104      	bne.n	800100c <HAL_UART_RxCpltCallback+0x80>
		require = 0;
 8001002:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <HAL_UART_RxCpltCallback+0x138>)
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e03d      	b.n	8001088 <HAL_UART_RxCpltCallback+0xfc>
	}
	else if(a0 == 43){
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <HAL_UART_RxCpltCallback+0x128>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b2b      	cmp	r3, #43	; 0x2b
 8001012:	d11a      	bne.n	800104a <HAL_UART_RxCpltCallback+0xbe>
		require = ((RxDataBuffer[1]-48)*100) + ((RxDataBuffer[2]-48)*10) + ((RxDataBuffer[3]-48)*1);
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	3b30      	subs	r3, #48	; 0x30
 800101a:	2264      	movs	r2, #100	; 0x64
 800101c:	fb02 f103 	mul.w	r1, r2, r3
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8001022:	789b      	ldrb	r3, [r3, #2]
 8001024:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	18ca      	adds	r2, r1, r3
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8001034:	78db      	ldrb	r3, [r3, #3]
 8001036:	3b30      	subs	r3, #48	; 0x30
 8001038:	4413      	add	r3, r2
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <HAL_UART_RxCpltCallback+0x138>)
 8001044:	edc3 7a00 	vstr	s15, [r3]
 8001048:	e01e      	b.n	8001088 <HAL_UART_RxCpltCallback+0xfc>
	}
	else if(a0 == 45){
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <HAL_UART_RxCpltCallback+0x128>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b2d      	cmp	r3, #45	; 0x2d
 8001050:	d11a      	bne.n	8001088 <HAL_UART_RxCpltCallback+0xfc>
			require = -1*(((RxDataBuffer[1]-48)*100) + ((RxDataBuffer[2]-48)*10) + ((RxDataBuffer[3]-48)*1));
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	3b30      	subs	r3, #48	; 0x30
 8001058:	2264      	movs	r2, #100	; 0x64
 800105a:	fb02 f103 	mul.w	r1, r2, r3
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001066:	4613      	mov	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	4413      	add	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	18ca      	adds	r2, r1, r3
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_UART_RxCpltCallback+0x11c>)
 8001072:	78db      	ldrb	r3, [r3, #3]
 8001074:	3b30      	subs	r3, #48	; 0x30
 8001076:	4413      	add	r3, r2
 8001078:	425b      	negs	r3, r3
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_UART_RxCpltCallback+0x138>)
 8001084:	edc3 7a00 	vstr	s15, [r3]
		}
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <HAL_UART_RxCpltCallback+0x124>)
 800108a:	f7ff f8a9 	bl	80001e0 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	4906      	ldr	r1, [pc, #24]	; (80010b0 <HAL_UART_RxCpltCallback+0x124>)
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <HAL_UART_RxCpltCallback+0x13c>)
 800109a:	f003 fbda 	bl	8004852 <HAL_UART_Transmit>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200000d8 	.word	0x200000d8
 80010ac:	08005d9c 	.word	0x08005d9c
 80010b0:	200000b8 	.word	0x200000b8
 80010b4:	200002f8 	.word	0x200002f8
 80010b8:	20000118 	.word	0x20000118
 80010bc:	20000214 	.word	0x20000214
 80010c0:	2000011c 	.word	0x2000011c
 80010c4:	20000000 	.word	0x20000000
 80010c8:	200002a8 	.word	0x200002a8

080010cc <EncoderVelocity_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 490
#define  MAX_ENCODER_PERIOD 980

float EncoderVelocity_Update()
{
 80010cc:	b5b0      	push	{r4, r5, r7, lr}
 80010ce:	ed2d 8b02 	vpush	{d8}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <EncoderVelocity_Update+0xb4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	60fb      	str	r3, [r7, #12]
	uint64_t EncoderNowTimestamp = micros();
 80010de:	f000 f877 	bl	80011d0 <micros>
 80010e2:	e9c7 0100 	strd	r0, r1, [r7]


	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80010e6:	4b27      	ldr	r3, [pc, #156]	; (8001184 <EncoderVelocity_Update+0xb8>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010f0:	1a84      	subs	r4, r0, r2
 80010f2:	eb61 0503 	sbc.w	r5, r1, r3
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <EncoderVelocity_Update+0xbc>)
 80010f8:	e9c3 4500 	strd	r4, r5, [r3]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80010fc:	4b23      	ldr	r3, [pc, #140]	; (800118c <EncoderVelocity_Update+0xc0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	461a      	mov	r2, r3
 8001106:	4b22      	ldr	r3, [pc, #136]	; (8001190 <EncoderVelocity_Update+0xc4>)
 8001108:	601a      	str	r2, [r3, #0]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <EncoderVelocity_Update+0xc4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 8001112:	db06      	blt.n	8001122 <EncoderVelocity_Update+0x56>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <EncoderVelocity_Update+0xc4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f5a3 7375 	sub.w	r3, r3, #980	; 0x3d4
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <EncoderVelocity_Update+0xc4>)
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	e00a      	b.n	8001138 <EncoderVelocity_Update+0x6c>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <EncoderVelocity_Update+0xc4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f513 7ff5 	cmn.w	r3, #490	; 0x1ea
 800112a:	dc05      	bgt.n	8001138 <EncoderVelocity_Update+0x6c>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <EncoderVelocity_Update+0xc4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8001134:	4a16      	ldr	r2, [pc, #88]	; (8001190 <EncoderVelocity_Update+0xc4>)
 8001136:	6013      	str	r3, [r2, #0]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <EncoderVelocity_Update+0xc0>)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 800113e:	4911      	ldr	r1, [pc, #68]	; (8001184 <EncoderVelocity_Update+0xb8>)
 8001140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001144:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <EncoderVelocity_Update+0xc4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <EncoderVelocity_Update+0xc8>)
 800114e:	fb02 f303 	mul.w	r3, r2, r3
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <EncoderVelocity_Update+0xbc>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff f95c 	bl	8000420 <__aeabi_ul2f>
 8001168:	ee07 0a10 	vmov	s14, r0
 800116c:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 8001170:	eeb0 0a67 	vmov.f32	s0, s15
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	ecbd 8b02 	vpop	{d8}
 800117c:	bdb0      	pop	{r4, r5, r7, pc}
 800117e:	bf00      	nop
 8001180:	20000218 	.word	0x20000218
 8001184:	20000100 	.word	0x20000100
 8001188:	200002f0 	.word	0x200002f0
 800118c:	20000108 	.word	0x20000108
 8001190:	200001b0 	.word	0x200001b0
 8001194:	000f4240 	.word	0x000f4240

08001198 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001198:	b4b0      	push	{r4, r5, r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d109      	bne.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f112 34ff 	adds.w	r4, r2, #4294967295
 80011b2:	f143 0500 	adc.w	r5, r3, #0
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80011b8:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bcb0      	pop	{r4, r5, r7}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000260 	.word	0x20000260
 80011cc:	20000098 	.word	0x20000098

080011d0 <micros>:
uint64_t micros()
{
 80011d0:	b4b0      	push	{r4, r5, r7}
 80011d2:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <micros+0x2c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	4618      	mov	r0, r3
 80011dc:	f04f 0100 	mov.w	r1, #0
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <micros+0x30>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	1884      	adds	r4, r0, r2
 80011e8:	eb41 0503 	adc.w	r5, r1, r3
 80011ec:	4622      	mov	r2, r4
 80011ee:	462b      	mov	r3, r5
}
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bcb0      	pop	{r4, r5, r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000260 	.word	0x20000260
 8001200:	20000098 	.word	0x20000098

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a0f      	ldr	r2, [pc, #60]	; (800125c <HAL_MspInit+0x4c>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_MspInit+0x4c>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800124e:	2007      	movs	r0, #7
 8001250:	f000 ff98 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a33      	ldr	r2, [pc, #204]	; (800134c <HAL_ADC_MspInit+0xec>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d15f      	bne.n	8001342 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b32      	ldr	r3, [pc, #200]	; (8001350 <HAL_ADC_MspInit+0xf0>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	4a31      	ldr	r2, [pc, #196]	; (8001350 <HAL_ADC_MspInit+0xf0>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	4b2f      	ldr	r3, [pc, #188]	; (8001350 <HAL_ADC_MspInit+0xf0>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_ADC_MspInit+0xf0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a2a      	ldr	r2, [pc, #168]	; (8001350 <HAL_ADC_MspInit+0xf0>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <HAL_ADC_MspInit+0xf0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012ba:	2310      	movs	r3, #16
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012be:	2303      	movs	r3, #3
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4821      	ldr	r0, [pc, #132]	; (8001354 <HAL_ADC_MspInit+0xf4>)
 80012ce:	f001 fb17 	bl	8002900 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 80012d4:	4a21      	ldr	r2, [pc, #132]	; (800135c <HAL_ADC_MspInit+0xfc>)
 80012d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 80012ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 80012f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 80012fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001300:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 8001304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001308:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001316:	4810      	ldr	r0, [pc, #64]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 8001318:	f000 ff76 	bl	8002208 <HAL_DMA_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001322:	f7ff ff6f 	bl	8001204 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 800132a:	639a      	str	r2, [r3, #56]	; 0x38
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_ADC_MspInit+0xf8>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	2012      	movs	r0, #18
 8001338:	f000 ff2f 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800133c:	2012      	movs	r0, #18
 800133e:	f000 ff48 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40012000 	.word	0x40012000
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000
 8001358:	200001b4 	.word	0x200001b4
 800135c:	40026410 	.word	0x40026410

08001360 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <HAL_TIM_Encoder_MspInit+0x94>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d134      	bne.n	80013ec <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x98>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x98>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x98>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_TIM_Encoder_MspInit+0x98>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4809      	ldr	r0, [pc, #36]	; (80013fc <HAL_TIM_Encoder_MspInit+0x9c>)
 80013d8:	f001 fa92 	bl	8002900 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	201a      	movs	r0, #26
 80013e2:	f000 feda 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80013e6:	201a      	movs	r0, #26
 80013e8:	f000 fef3 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40010000 	.word	0x40010000
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020000 	.word	0x40020000

08001400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001410:	d116      	bne.n	8001440 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_TIM_Base_MspInit+0x80>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_TIM_Base_MspInit+0x80>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_TIM_Base_MspInit+0x80>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	201c      	movs	r0, #28
 8001434:	f000 feb1 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001438:	201c      	movs	r0, #28
 800143a:	f000 feca 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800143e:	e01a      	b.n	8001476 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_TIM_Base_MspInit+0x84>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d115      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_TIM_Base_MspInit+0x80>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <HAL_TIM_Base_MspInit+0x80>)
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_TIM_Base_MspInit+0x80>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	201d      	movs	r0, #29
 800146c:	f000 fe95 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001470:	201d      	movs	r0, #29
 8001472:	f000 feae 	bl	80021d2 <HAL_NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40000400 	.word	0x40000400

08001488 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_TIM_MspPostInit+0x68>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d11d      	bne.n	80014e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_TIM_MspPostInit+0x6c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <HAL_TIM_MspPostInit+0x6c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_TIM_MspPostInit+0x6c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c6:	2340      	movs	r3, #64	; 0x40
 80014c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_TIM_MspPostInit+0x70>)
 80014e2:	f001 fa0d 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40000400 	.word	0x40000400
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1d      	ldr	r2, [pc, #116]	; (8001590 <HAL_UART_MspInit+0x94>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d133      	bne.n	8001586 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_UART_MspInit+0x98>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <HAL_UART_MspInit+0x98>)
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_UART_MspInit+0x98>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_UART_MspInit+0x98>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_UART_MspInit+0x98>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_UART_MspInit+0x98>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001556:	230c      	movs	r3, #12
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001566:	2307      	movs	r3, #7
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <HAL_UART_MspInit+0x9c>)
 8001572:	f001 f9c5 	bl	8002900 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	2026      	movs	r0, #38	; 0x26
 800157c:	f000 fe0d 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001580:	2026      	movs	r0, #38	; 0x26
 8001582:	f000 fe26 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3728      	adds	r7, #40	; 0x28
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40004400 	.word	0x40004400
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <NMI_Handler+0x4>

080015a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler+0x4>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <UsageFault_Handler+0x4>

080015ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e8:	f000 f902 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <ADC_IRQHandler+0x10>)
 80015f6:	f000 f95e 	bl	80018b6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000168 	.word	0x20000168

08001604 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800160a:	f002 fad5 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000218 	.word	0x20000218

08001618 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <TIM2_IRQHandler+0x10>)
 800161e:	f002 facb 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000260 	.word	0x20000260

0800162c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <TIM3_IRQHandler+0x10>)
 8001632:	f002 fac1 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000120 	.word	0x20000120

08001640 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <USART2_IRQHandler+0x10>)
 8001646:	f003 f9c7 	bl	80049d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200002a8 	.word	0x200002a8

08001654 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <DMA2_Stream0_IRQHandler+0x10>)
 800165a:	f000 ff15 	bl	8002488 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200001b4 	.word	0x200001b4

08001668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001670:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <_sbrk+0x5c>)
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <_sbrk+0x60>)
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <_sbrk+0x64>)
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <_sbrk+0x68>)
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	429a      	cmp	r2, r3
 8001696:	d207      	bcs.n	80016a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001698:	f003 fef6 	bl	8005488 <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	e009      	b.n	80016bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <_sbrk+0x64>)
 80016b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ba:	68fb      	ldr	r3, [r7, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20020000 	.word	0x20020000
 80016c8:	00000400 	.word	0x00000400
 80016cc:	2000010c 	.word	0x2000010c
 80016d0:	20000310 	.word	0x20000310

080016d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fe:	490e      	ldr	r1, [pc, #56]	; (8001738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001714:	4c0b      	ldr	r4, [pc, #44]	; (8001744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001722:	f7ff ffd7 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001726:	f003 feb5 	bl	8005494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172a:	f7ff f83b 	bl	80007a4 <main>
  bx  lr    
 800172e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001730:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800173c:	08005e18 	.word	0x08005e18
  ldr r2, =_sbss
 8001740:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001744:	20000310 	.word	0x20000310

08001748 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <DMA1_Stream0_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <HAL_Init+0x40>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_Init+0x40>)
 8001762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001766:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_Init+0x40>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_Init+0x40>)
 800176e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f000 fd05 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177a:	2000      	movs	r0, #0
 800177c:	f000 f808 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001780:	f7ff fd46 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023c00 	.word	0x40023c00

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fd1d 	bl	80021ee <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 fce5 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000004 	.word	0x20000004
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	20000008 	.word	0x20000008

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	2000000c 	.word	0x2000000c
 8001814:	200002fc 	.word	0x200002fc

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	200002fc 	.word	0x200002fc

08001830 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e033      	b.n	80018ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fd06 	bl	8001260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001876:	f023 0302 	bic.w	r3, r3, #2
 800187a:	f043 0202 	orr.w	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 faa8 	bl	8001dd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
 800189e:	e001      	b.n	80018a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0320 	and.w	r3, r3, #32
 80018e6:	2b20      	cmp	r3, #32
 80018e8:	bf0c      	ite	eq
 80018ea:	2301      	moveq	r3, #1
 80018ec:	2300      	movne	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d049      	beq.n	800198c <HAL_ADC_IRQHandler+0xd6>
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d046      	beq.n	800198c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	d105      	bne.n	8001916 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d12b      	bne.n	800197c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001928:	2b00      	cmp	r3, #0
 800192a:	d127      	bne.n	800197c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001944:	2b00      	cmp	r3, #0
 8001946:	d119      	bne.n	800197c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0220 	bic.w	r2, r2, #32
 8001956:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 f8db 	bl	8001b38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f06f 0212 	mvn.w	r2, #18
 800198a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ac:	2b80      	cmp	r3, #128	; 0x80
 80019ae:	bf0c      	ite	eq
 80019b0:	2301      	moveq	r3, #1
 80019b2:	2300      	movne	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d057      	beq.n	8001a6e <HAL_ADC_IRQHandler+0x1b8>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d054      	beq.n	8001a6e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d139      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d12b      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d124      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11d      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d119      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a38:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fab6 	bl	8001fd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f06f 020c 	mvn.w	r2, #12
 8001a6c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a8e:	2b40      	cmp	r3, #64	; 0x40
 8001a90:	bf0c      	ite	eq
 8001a92:	2301      	moveq	r3, #1
 8001a94:	2300      	movne	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d017      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0x21a>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d014      	beq.n	8001ad0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10d      	bne.n	8001ad0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f843 	bl	8001b4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f06f 0201 	mvn.w	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001af4:	bf0c      	ite	eq
 8001af6:	2301      	moveq	r3, #1
 8001af8:	2300      	movne	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d015      	beq.n	8001b30 <HAL_ADC_IRQHandler+0x27a>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d012      	beq.n	8001b30 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f043 0202 	orr.w	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f06f 0220 	mvn.w	r2, #32
 8001b1e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f81d 	bl	8001b60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f06f 0220 	mvn.w	r2, #32
 8001b2e:	601a      	str	r2, [r3, #0]
  }
}
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x1c>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e113      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x244>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b09      	cmp	r3, #9
 8001b9e:	d925      	bls.n	8001bec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68d9      	ldr	r1, [r3, #12]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b1e      	subs	r3, #30
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68d9      	ldr	r1, [r3, #12]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4603      	mov	r3, r0
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4403      	add	r3, r0
 8001bde:	3b1e      	subs	r3, #30
 8001be0:	409a      	lsls	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	e022      	b.n	8001c32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6919      	ldr	r1, [r3, #16]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	2207      	movs	r2, #7
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6919      	ldr	r1, [r3, #16]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	4603      	mov	r3, r0
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4403      	add	r3, r0
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d824      	bhi.n	8001c84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	3b05      	subs	r3, #5
 8001c4c:	221f      	movs	r2, #31
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	400a      	ands	r2, r1
 8001c5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	3b05      	subs	r3, #5
 8001c76:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	635a      	str	r2, [r3, #52]	; 0x34
 8001c82:	e04c      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d824      	bhi.n	8001cd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3b23      	subs	r3, #35	; 0x23
 8001c9e:	221f      	movs	r2, #31
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43da      	mvns	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	400a      	ands	r2, r1
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3b23      	subs	r3, #35	; 0x23
 8001cc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd4:	e023      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3b41      	subs	r3, #65	; 0x41
 8001ce8:	221f      	movs	r2, #31
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	4618      	mov	r0, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b41      	subs	r3, #65	; 0x41
 8001d12:	fa00 f203 	lsl.w	r2, r0, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <HAL_ADC_ConfigChannel+0x250>)
 8001d20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a28      	ldr	r2, [pc, #160]	; (8001dc8 <HAL_ADC_ConfigChannel+0x254>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d10f      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1d8>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b12      	cmp	r3, #18
 8001d32:	d10b      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_ADC_ConfigChannel+0x254>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12b      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x23a>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_ADC_ConfigChannel+0x258>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d003      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0x1f4>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b11      	cmp	r3, #17
 8001d66:	d122      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <HAL_ADC_ConfigChannel+0x258>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d111      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_ADC_ConfigChannel+0x25c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a11      	ldr	r2, [pc, #68]	; (8001dd4 <HAL_ADC_ConfigChannel+0x260>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	0c9a      	lsrs	r2, r3, #18
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001da0:	e002      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f9      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40012300 	.word	0x40012300
 8001dc8:	40012000 	.word	0x40012000
 8001dcc:	10000012 	.word	0x10000012
 8001dd0:	20000004 	.word	0x20000004
 8001dd4:	431bde83 	.word	0x431bde83

08001dd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de0:	4b79      	ldr	r3, [pc, #484]	; (8001fc8 <ADC_Init+0x1f0>)
 8001de2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	021a      	lsls	r2, r3, #8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6899      	ldr	r1, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	4a58      	ldr	r2, [pc, #352]	; (8001fcc <ADC_Init+0x1f4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d022      	beq.n	8001eb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6899      	ldr	r1, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6899      	ldr	r1, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	e00f      	b.n	8001ed6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ec4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ed4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0202 	bic.w	r2, r2, #2
 8001ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6899      	ldr	r1, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7e1b      	ldrb	r3, [r3, #24]
 8001ef0:	005a      	lsls	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	035a      	lsls	r2, r3, #13
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	e007      	b.n	8001f4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	051a      	lsls	r2, r3, #20
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6899      	ldr	r1, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f8e:	025a      	lsls	r2, r3, #9
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	029a      	lsls	r2, r3, #10
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	40012300 	.word	0x40012300
 8001fcc:	0f000001 	.word	0x0f000001

08001fd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	; (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff3e 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff31 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff fb00 	bl	8001818 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e099      	b.n	8002358 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002244:	e00f      	b.n	8002266 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002246:	f7ff fae7 	bl	8001818 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b05      	cmp	r3, #5
 8002252:	d908      	bls.n	8002266 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2203      	movs	r2, #3
 800225e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e078      	b.n	8002358 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e8      	bne.n	8002246 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	4b38      	ldr	r3, [pc, #224]	; (8002360 <HAL_DMA_Init+0x158>)
 8002280:	4013      	ands	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002292:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d107      	bne.n	80022d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	4313      	orrs	r3, r2
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f023 0307 	bic.w	r3, r3, #7
 80022e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d117      	bne.n	800232a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00e      	beq.n	800232a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fa7b 	bl	8002808 <DMA_CheckFifoParam>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002326:	2301      	movs	r3, #1
 8002328:	e016      	b.n	8002358 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fa32 	bl	800279c <DMA_CalcBaseAndBitshift>
 8002338:	4603      	mov	r3, r0
 800233a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	223f      	movs	r2, #63	; 0x3f
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	f010803f 	.word	0xf010803f

08002364 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002372:	f7ff fa51 	bl	8001818 <HAL_GetTick>
 8002376:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d008      	beq.n	8002396 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e052      	b.n	800243c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0216 	bic.w	r2, r2, #22
 80023a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <HAL_DMA_Abort+0x62>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0208 	bic.w	r2, r2, #8
 80023d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e6:	e013      	b.n	8002410 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e8:	f7ff fa16 	bl	8001818 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d90c      	bls.n	8002410 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2203      	movs	r2, #3
 8002408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e015      	b.n	800243c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e4      	bne.n	80023e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	223f      	movs	r2, #63	; 0x3f
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d004      	beq.n	8002462 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00c      	b.n	800247c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2205      	movs	r2, #5
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002494:	4b92      	ldr	r3, [pc, #584]	; (80026e0 <HAL_DMA_IRQHandler+0x258>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a92      	ldr	r2, [pc, #584]	; (80026e4 <HAL_DMA_IRQHandler+0x25c>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0a9b      	lsrs	r3, r3, #10
 80024a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	2208      	movs	r2, #8
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01a      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e0:	2208      	movs	r2, #8
 80024e2:	409a      	lsls	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	2201      	movs	r2, #1
 80024fa:	409a      	lsls	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d012      	beq.n	800252a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002516:	2201      	movs	r2, #1
 8002518:	409a      	lsls	r2, r3
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f043 0202 	orr.w	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252e:	2204      	movs	r2, #4
 8002530:	409a      	lsls	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d012      	beq.n	8002560 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2204      	movs	r2, #4
 800254e:	409a      	lsls	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f043 0204 	orr.w	r2, r3, #4
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	2210      	movs	r2, #16
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d043      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d03c      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	2210      	movs	r2, #16
 8002584:	409a      	lsls	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d018      	beq.n	80025ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d108      	bne.n	80025b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d024      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	4798      	blx	r3
 80025b6:	e01f      	b.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01b      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	4798      	blx	r3
 80025c8:	e016      	b.n	80025f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0208 	bic.w	r2, r2, #8
 80025e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2220      	movs	r2, #32
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 808e 	beq.w	8002726 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8086 	beq.w	8002726 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	2220      	movs	r2, #32
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b05      	cmp	r3, #5
 8002630:	d136      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0216 	bic.w	r2, r2, #22
 8002640:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002650:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <HAL_DMA_IRQHandler+0x1da>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0208 	bic.w	r2, r2, #8
 8002670:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	223f      	movs	r2, #63	; 0x3f
 8002678:	409a      	lsls	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002692:	2b00      	cmp	r3, #0
 8002694:	d07d      	beq.n	8002792 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
        }
        return;
 800269e:	e078      	b.n	8002792 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01c      	beq.n	80026e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d108      	bne.n	80026ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d030      	beq.n	8002726 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
 80026cc:	e02b      	b.n	8002726 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d027      	beq.n	8002726 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	4798      	blx	r3
 80026de:	e022      	b.n	8002726 <HAL_DMA_IRQHandler+0x29e>
 80026e0:	20000004 	.word	0x20000004
 80026e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0210 	bic.w	r2, r2, #16
 8002704:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	2b00      	cmp	r3, #0
 800272c:	d032      	beq.n	8002794 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d022      	beq.n	8002780 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2205      	movs	r2, #5
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	3301      	adds	r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	429a      	cmp	r2, r3
 800275c:	d307      	bcc.n	800276e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f2      	bne.n	8002752 <HAL_DMA_IRQHandler+0x2ca>
 800276c:	e000      	b.n	8002770 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800276e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
 8002790:	e000      	b.n	8002794 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002792:	bf00      	nop
    }
  }
}
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop

0800279c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	3b10      	subs	r3, #16
 80027ac:	4a14      	ldr	r2, [pc, #80]	; (8002800 <DMA_CalcBaseAndBitshift+0x64>)
 80027ae:	fba2 2303 	umull	r2, r3, r2, r3
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027b6:	4a13      	ldr	r2, [pc, #76]	; (8002804 <DMA_CalcBaseAndBitshift+0x68>)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d909      	bls.n	80027de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027d2:	f023 0303 	bic.w	r3, r3, #3
 80027d6:	1d1a      	adds	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	659a      	str	r2, [r3, #88]	; 0x58
 80027dc:	e007      	b.n	80027ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027e6:	f023 0303 	bic.w	r3, r3, #3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	aaaaaaab 	.word	0xaaaaaaab
 8002804:	08005dcc 	.word	0x08005dcc

08002808 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002818:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d11f      	bne.n	8002862 <DMA_CheckFifoParam+0x5a>
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d856      	bhi.n	80028d6 <DMA_CheckFifoParam+0xce>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <DMA_CheckFifoParam+0x28>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002841 	.word	0x08002841
 8002834:	08002853 	.word	0x08002853
 8002838:	08002841 	.word	0x08002841
 800283c:	080028d7 	.word	0x080028d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d046      	beq.n	80028da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002850:	e043      	b.n	80028da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800285a:	d140      	bne.n	80028de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e03d      	b.n	80028de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	d121      	bne.n	80028b0 <DMA_CheckFifoParam+0xa8>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d837      	bhi.n	80028e2 <DMA_CheckFifoParam+0xda>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <DMA_CheckFifoParam+0x70>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002889 	.word	0x08002889
 800287c:	0800288f 	.word	0x0800288f
 8002880:	08002889 	.word	0x08002889
 8002884:	080028a1 	.word	0x080028a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e030      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d025      	beq.n	80028e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289e:	e022      	b.n	80028e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a8:	d11f      	bne.n	80028ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028ae:	e01c      	b.n	80028ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d903      	bls.n	80028be <DMA_CheckFifoParam+0xb6>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d003      	beq.n	80028c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028bc:	e018      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
      break;
 80028c2:	e015      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      break;
 80028d4:	e00b      	b.n	80028ee <DMA_CheckFifoParam+0xe6>
      break;
 80028d6:	bf00      	nop
 80028d8:	e00a      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e008      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e006      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028e2:	bf00      	nop
 80028e4:	e004      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <DMA_CheckFifoParam+0xe8>
      break;
 80028ee:	bf00      	nop
    }
  } 
  
  return status; 
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e159      	b.n	8002bd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 8148 	bne.w	8002bca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d005      	beq.n	8002952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294e:	2b02      	cmp	r3, #2
 8002950:	d130      	bne.n	80029b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002988:	2201      	movs	r2, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 0201 	and.w	r2, r3, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d017      	beq.n	80029f0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a2 	beq.w	8002bca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a56      	ldr	r2, [pc, #344]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b54      	ldr	r3, [pc, #336]	; (8002be8 <HAL_GPIO_Init+0x2e8>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a52      	ldr	r2, [pc, #328]	; (8002bec <HAL_GPIO_Init+0x2ec>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a49      	ldr	r2, [pc, #292]	; (8002bf0 <HAL_GPIO_Init+0x2f0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d019      	beq.n	8002b02 <HAL_GPIO_Init+0x202>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a48      	ldr	r2, [pc, #288]	; (8002bf4 <HAL_GPIO_Init+0x2f4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <HAL_GPIO_Init+0x1fe>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a47      	ldr	r2, [pc, #284]	; (8002bf8 <HAL_GPIO_Init+0x2f8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00d      	beq.n	8002afa <HAL_GPIO_Init+0x1fa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a46      	ldr	r2, [pc, #280]	; (8002bfc <HAL_GPIO_Init+0x2fc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <HAL_GPIO_Init+0x1f6>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a45      	ldr	r2, [pc, #276]	; (8002c00 <HAL_GPIO_Init+0x300>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d101      	bne.n	8002af2 <HAL_GPIO_Init+0x1f2>
 8002aee:	2304      	movs	r3, #4
 8002af0:	e008      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002af2:	2307      	movs	r3, #7
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002af6:	2303      	movs	r3, #3
 8002af8:	e004      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_GPIO_Init+0x204>
 8002b02:	2300      	movs	r3, #0
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f002 0203 	and.w	r2, r2, #3
 8002b0a:	0092      	lsls	r2, r2, #2
 8002b0c:	4093      	lsls	r3, r2
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b14:	4935      	ldr	r1, [pc, #212]	; (8002bec <HAL_GPIO_Init+0x2ec>)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b46:	4a2f      	ldr	r2, [pc, #188]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b70:	4a24      	ldr	r2, [pc, #144]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b76:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <HAL_GPIO_Init+0x304>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	f67f aea2 	bls.w	800291c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40020800 	.word	0x40020800
 8002bfc:	40020c00 	.word	0x40020c00
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40013c00 	.word	0x40013c00

08002c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
 8002c14:	4613      	mov	r3, r2
 8002c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c18:	787b      	ldrb	r3, [r7, #1]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c24:	e003      	b.n	8002c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c26:	887b      	ldrh	r3, [r7, #2]
 8002c28:	041a      	lsls	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	619a      	str	r2, [r3, #24]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e264      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d075      	beq.n	8002d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5a:	4ba3      	ldr	r3, [pc, #652]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d00c      	beq.n	8002c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c66:	4ba0      	ldr	r3, [pc, #640]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d112      	bne.n	8002c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c72:	4b9d      	ldr	r3, [pc, #628]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c80:	4b99      	ldr	r3, [pc, #612]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d05b      	beq.n	8002d44 <HAL_RCC_OscConfig+0x108>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d157      	bne.n	8002d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e23f      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca0:	d106      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x74>
 8002ca2:	4b91      	ldr	r3, [pc, #580]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a90      	ldr	r2, [pc, #576]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e01d      	b.n	8002cec <HAL_RCC_OscConfig+0xb0>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x98>
 8002cba:	4b8b      	ldr	r3, [pc, #556]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a8a      	ldr	r2, [pc, #552]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a87      	ldr	r2, [pc, #540]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0xb0>
 8002cd4:	4b84      	ldr	r3, [pc, #528]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a83      	ldr	r2, [pc, #524]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	4b81      	ldr	r3, [pc, #516]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a80      	ldr	r2, [pc, #512]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d013      	beq.n	8002d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fd90 	bl	8001818 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fd8c 	bl	8001818 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e204      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	4b76      	ldr	r3, [pc, #472]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0xc0>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fd7c 	bl	8001818 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe fd78 	bl	8001818 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1f0      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	4b6c      	ldr	r3, [pc, #432]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0xe8>
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d063      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d52:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5e:	4b62      	ldr	r3, [pc, #392]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d11c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d116      	bne.n	8002da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RCC_OscConfig+0x152>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e1c4      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8e:	4b56      	ldr	r3, [pc, #344]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4952      	ldr	r1, [pc, #328]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	e03a      	b.n	8002e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d020      	beq.n	8002dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dac:	4b4f      	ldr	r3, [pc, #316]	; (8002eec <HAL_RCC_OscConfig+0x2b0>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fe fd31 	bl	8001818 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fd2d 	bl	8001818 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e1a5      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	4b46      	ldr	r3, [pc, #280]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b43      	ldr	r3, [pc, #268]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4940      	ldr	r1, [pc, #256]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
 8002dec:	e015      	b.n	8002e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dee:	4b3f      	ldr	r3, [pc, #252]	; (8002eec <HAL_RCC_OscConfig+0x2b0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fe fd10 	bl	8001818 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fd0c 	bl	8001818 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e184      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e0e:	4b36      	ldr	r3, [pc, #216]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d030      	beq.n	8002e88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2e:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <HAL_RCC_OscConfig+0x2b4>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fe fcf0 	bl	8001818 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7fe fcec 	bl	8001818 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e164      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x200>
 8002e5a:	e015      	b.n	8002e88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5c:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <HAL_RCC_OscConfig+0x2b4>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fe fcd9 	bl	8001818 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6a:	f7fe fcd5 	bl	8001818 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e14d      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a0 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10f      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	4a0e      	ldr	r2, [pc, #56]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	60bb      	str	r3, [r7, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_OscConfig+0x2b8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d121      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCC_OscConfig+0x2b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_RCC_OscConfig+0x2b8>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7fe fc9b 	bl	8001818 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	e011      	b.n	8002f0a <HAL_RCC_OscConfig+0x2ce>
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470000 	.word	0x42470000
 8002ef0:	42470e80 	.word	0x42470e80
 8002ef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef8:	f7fe fc8e 	bl	8001818 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e106      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0a:	4b85      	ldr	r3, [pc, #532]	; (8003120 <HAL_RCC_OscConfig+0x4e4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f0      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_OscConfig+0x2f0>
 8002f1e:	4b81      	ldr	r3, [pc, #516]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a80      	ldr	r2, [pc, #512]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	e01c      	b.n	8002f66 <HAL_RCC_OscConfig+0x32a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d10c      	bne.n	8002f4e <HAL_RCC_OscConfig+0x312>
 8002f34:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a7a      	ldr	r2, [pc, #488]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f40:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4c:	e00b      	b.n	8002f66 <HAL_RCC_OscConfig+0x32a>
 8002f4e:	4b75      	ldr	r3, [pc, #468]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a74      	ldr	r2, [pc, #464]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5a:	4b72      	ldr	r3, [pc, #456]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a71      	ldr	r2, [pc, #452]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f60:	f023 0304 	bic.w	r3, r3, #4
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fc53 	bl	8001818 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7fe fc4f 	bl	8001818 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e0c5      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8c:	4b65      	ldr	r3, [pc, #404]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ee      	beq.n	8002f76 <HAL_RCC_OscConfig+0x33a>
 8002f98:	e014      	b.n	8002fc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fc3d 	bl	8001818 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fe fc39 	bl	8001818 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0af      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb8:	4b5a      	ldr	r3, [pc, #360]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ee      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fca:	4b56      	ldr	r3, [pc, #344]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	4a55      	ldr	r2, [pc, #340]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f000 809b 	beq.w	8003116 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe0:	4b50      	ldr	r3, [pc, #320]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 030c 	and.w	r3, r3, #12
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d05c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d141      	bne.n	8003078 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	; (8003128 <HAL_RCC_OscConfig+0x4ec>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fc0d 	bl	8001818 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe fc09 	bl	8001818 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e081      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003014:	4b43      	ldr	r3, [pc, #268]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	019b      	lsls	r3, r3, #6
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	3b01      	subs	r3, #1
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	061b      	lsls	r3, r3, #24
 8003044:	4937      	ldr	r1, [pc, #220]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800304a:	4b37      	ldr	r3, [pc, #220]	; (8003128 <HAL_RCC_OscConfig+0x4ec>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fbe2 	bl	8001818 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe fbde 	bl	8001818 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e056      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800306a:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x41c>
 8003076:	e04e      	b.n	8003116 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_RCC_OscConfig+0x4ec>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fbcb 	bl	8001818 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe fbc7 	bl	8001818 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e03f      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003098:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_OscConfig+0x44a>
 80030a4:	e037      	b.n	8003116 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e032      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_RCC_OscConfig+0x4e8>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d028      	beq.n	8003112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d121      	bne.n	8003112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d11a      	bne.n	8003112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030e2:	4013      	ands	r3, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d111      	bne.n	8003112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	3b01      	subs	r3, #1
 80030fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d107      	bne.n	8003112 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40007000 	.word	0x40007000
 8003124:	40023800 	.word	0x40023800
 8003128:	42470060 	.word	0x42470060

0800312c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0cc      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b68      	ldr	r3, [pc, #416]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d90c      	bls.n	8003168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b63      	ldr	r3, [pc, #396]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b8      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003180:	4b59      	ldr	r3, [pc, #356]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800318a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003198:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	494d      	ldr	r1, [pc, #308]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d044      	beq.n	800324c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d119      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ea:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e06f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e067      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f023 0203 	bic.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4934      	ldr	r1, [pc, #208]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800321c:	f7fe fafc 	bl	8001818 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	e00a      	b.n	800323a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003224:	f7fe faf8 	bl	8001818 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e04f      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 020c 	and.w	r2, r3, #12
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	429a      	cmp	r2, r3
 800324a:	d1eb      	bne.n	8003224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d20c      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4916      	ldr	r1, [pc, #88]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	490e      	ldr	r1, [pc, #56]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 f821 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	490a      	ldr	r1, [pc, #40]	; (80032ec <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	5ccb      	ldrb	r3, [r1, r3]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ce:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1c8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fa5c 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023c00 	.word	0x40023c00
 80032e8:	40023800 	.word	0x40023800
 80032ec:	08005db4 	.word	0x08005db4
 80032f0:	20000004 	.word	0x20000004
 80032f4:	20000008 	.word	0x20000008

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	2300      	movs	r3, #0
 800330a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003310:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d00d      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x40>
 800331c:	2b08      	cmp	r3, #8
 800331e:	f200 80bd 	bhi.w	800349c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x34>
 8003326:	2b04      	cmp	r3, #4
 8003328:	d003      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x3a>
 800332a:	e0b7      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800332c:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800332e:	60bb      	str	r3, [r7, #8]
       break;
 8003330:	e0b7      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003332:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003334:	60bb      	str	r3, [r7, #8]
      break;
 8003336:	e0b4      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003338:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003340:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003342:	4b5b      	ldr	r3, [pc, #364]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d04d      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334e:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	461a      	mov	r2, r3
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	ea02 0800 	and.w	r8, r2, r0
 8003366:	ea03 0901 	and.w	r9, r3, r1
 800336a:	4640      	mov	r0, r8
 800336c:	4649      	mov	r1, r9
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	f04f 0300 	mov.w	r3, #0
 8003376:	014b      	lsls	r3, r1, #5
 8003378:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800337c:	0142      	lsls	r2, r0, #5
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	ebb0 0008 	subs.w	r0, r0, r8
 8003386:	eb61 0109 	sbc.w	r1, r1, r9
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	018b      	lsls	r3, r1, #6
 8003394:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003398:	0182      	lsls	r2, r0, #6
 800339a:	1a12      	subs	r2, r2, r0
 800339c:	eb63 0301 	sbc.w	r3, r3, r1
 80033a0:	f04f 0000 	mov.w	r0, #0
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	00d9      	lsls	r1, r3, #3
 80033aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033ae:	00d0      	lsls	r0, r2, #3
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	eb12 0208 	adds.w	r2, r2, r8
 80033b8:	eb43 0309 	adc.w	r3, r3, r9
 80033bc:	f04f 0000 	mov.w	r0, #0
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	0259      	lsls	r1, r3, #9
 80033c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033ca:	0250      	lsls	r0, r2, #9
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	f7fd f866 	bl	80004ac <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	e04a      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ea:	4b31      	ldr	r3, [pc, #196]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	099b      	lsrs	r3, r3, #6
 80033f0:	461a      	mov	r2, r3
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	ea02 0400 	and.w	r4, r2, r0
 8003402:	ea03 0501 	and.w	r5, r3, r1
 8003406:	4620      	mov	r0, r4
 8003408:	4629      	mov	r1, r5
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	014b      	lsls	r3, r1, #5
 8003414:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003418:	0142      	lsls	r2, r0, #5
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	1b00      	subs	r0, r0, r4
 8003420:	eb61 0105 	sbc.w	r1, r1, r5
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	018b      	lsls	r3, r1, #6
 800342e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003432:	0182      	lsls	r2, r0, #6
 8003434:	1a12      	subs	r2, r2, r0
 8003436:	eb63 0301 	sbc.w	r3, r3, r1
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	00d9      	lsls	r1, r3, #3
 8003444:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003448:	00d0      	lsls	r0, r2, #3
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	1912      	adds	r2, r2, r4
 8003450:	eb45 0303 	adc.w	r3, r5, r3
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	0299      	lsls	r1, r3, #10
 800345e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003462:	0290      	lsls	r0, r2, #10
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	461a      	mov	r2, r3
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f7fd f81a 	bl	80004ac <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	3301      	adds	r3, #1
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	60bb      	str	r3, [r7, #8]
      break;
 800349a:	e002      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800349e:	60bb      	str	r3, [r7, #8]
      break;
 80034a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a2:	68bb      	ldr	r3, [r7, #8]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000004 	.word	0x20000004

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a9b      	lsrs	r3, r3, #10
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4903      	ldr	r1, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	08005dc4 	.word	0x08005dc4

080034fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003500:	f7ff ffdc 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0b5b      	lsrs	r3, r3, #13
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4903      	ldr	r1, [pc, #12]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003518:	4618      	mov	r0, r3
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40023800 	.word	0x40023800
 8003520:	08005dc4 	.word	0x08005dc4

08003524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e041      	b.n	80035ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd ff58 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4610      	mov	r0, r2
 8003564:	f000 fdda 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d001      	beq.n	80035dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e03c      	b.n	8003656 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_TIM_Base_Start+0xa0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d018      	beq.n	8003620 <HAL_TIM_Base_Start+0x5c>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f6:	d013      	beq.n	8003620 <HAL_TIM_Base_Start+0x5c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <HAL_TIM_Base_Start+0xa4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00e      	beq.n	8003620 <HAL_TIM_Base_Start+0x5c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a19      	ldr	r2, [pc, #100]	; (800366c <HAL_TIM_Base_Start+0xa8>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d009      	beq.n	8003620 <HAL_TIM_Base_Start+0x5c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a17      	ldr	r2, [pc, #92]	; (8003670 <HAL_TIM_Base_Start+0xac>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <HAL_TIM_Base_Start+0x5c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a16      	ldr	r2, [pc, #88]	; (8003674 <HAL_TIM_Base_Start+0xb0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d111      	bne.n	8003644 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b06      	cmp	r3, #6
 8003630:	d010      	beq.n	8003654 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003642:	e007      	b.n	8003654 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40010000 	.word	0x40010000
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800
 8003670:	40000c00 	.word	0x40000c00
 8003674:	40014000 	.word	0x40014000

08003678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d001      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e044      	b.n	800371a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_TIM_Base_Start_IT+0xb0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d018      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x6c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d013      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x6c>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1a      	ldr	r2, [pc, #104]	; (800372c <HAL_TIM_Base_Start_IT+0xb4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00e      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x6c>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_TIM_Base_Start_IT+0xb8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x6c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a17      	ldr	r2, [pc, #92]	; (8003734 <HAL_TIM_Base_Start_IT+0xbc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0x6c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a16      	ldr	r2, [pc, #88]	; (8003738 <HAL_TIM_Base_Start_IT+0xc0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d111      	bne.n	8003708 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d010      	beq.n	8003718 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003706:	e007      	b.n	8003718 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800
 8003734:	40000c00 	.word	0x40000c00
 8003738:	40014000 	.word	0x40014000

0800373c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e041      	b.n	80037d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f839 	bl	80037da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f000 fcce 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_TIM_PWM_Start+0x24>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	e022      	b.n	800385a <HAL_TIM_PWM_Start+0x6a>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b04      	cmp	r3, #4
 8003818:	d109      	bne.n	800382e <HAL_TIM_PWM_Start+0x3e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b01      	cmp	r3, #1
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e015      	b.n	800385a <HAL_TIM_PWM_Start+0x6a>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d109      	bne.n	8003848 <HAL_TIM_PWM_Start+0x58>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e008      	b.n	800385a <HAL_TIM_PWM_Start+0x6a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e068      	b.n	8003934 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d104      	bne.n	8003872 <HAL_TIM_PWM_Start+0x82>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003870:	e013      	b.n	800389a <HAL_TIM_PWM_Start+0xaa>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d104      	bne.n	8003882 <HAL_TIM_PWM_Start+0x92>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003880:	e00b      	b.n	800389a <HAL_TIM_PWM_Start+0xaa>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d104      	bne.n	8003892 <HAL_TIM_PWM_Start+0xa2>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003890:	e003      	b.n	800389a <HAL_TIM_PWM_Start+0xaa>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2202      	movs	r2, #2
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2201      	movs	r2, #1
 80038a0:	6839      	ldr	r1, [r7, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fee0 	bl	8004668 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a23      	ldr	r2, [pc, #140]	; (800393c <HAL_TIM_PWM_Start+0x14c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d107      	bne.n	80038c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_TIM_PWM_Start+0x14c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d018      	beq.n	80038fe <HAL_TIM_PWM_Start+0x10e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d4:	d013      	beq.n	80038fe <HAL_TIM_PWM_Start+0x10e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a19      	ldr	r2, [pc, #100]	; (8003940 <HAL_TIM_PWM_Start+0x150>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <HAL_TIM_PWM_Start+0x10e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a17      	ldr	r2, [pc, #92]	; (8003944 <HAL_TIM_PWM_Start+0x154>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_TIM_PWM_Start+0x10e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a16      	ldr	r2, [pc, #88]	; (8003948 <HAL_TIM_PWM_Start+0x158>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_TIM_PWM_Start+0x10e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <HAL_TIM_PWM_Start+0x15c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d111      	bne.n	8003922 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b06      	cmp	r3, #6
 800390e:	d010      	beq.n	8003932 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003920:	e007      	b.n	8003932 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40010000 	.word	0x40010000
 8003940:	40000400 	.word	0x40000400
 8003944:	40000800 	.word	0x40000800
 8003948:	40000c00 	.word	0x40000c00
 800394c:	40014000 	.word	0x40014000

08003950 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e097      	b.n	8003a94 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd fcf1 	bl	8001360 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003994:	f023 0307 	bic.w	r3, r3, #7
 8003998:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f000 fbb9 	bl	800411c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	4313      	orrs	r3, r2
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039f0:	f023 030c 	bic.w	r3, r3, #12
 80039f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	011a      	lsls	r2, r3, #4
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	031b      	lsls	r3, r3, #12
 8003a20:	4313      	orrs	r3, r2
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003a36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	4313      	orrs	r3, r2
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ab4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003abc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ac4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d110      	bne.n	8003aee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d102      	bne.n	8003ad8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ad2:	7b7b      	ldrb	r3, [r7, #13]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d001      	beq.n	8003adc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e069      	b.n	8003bb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aec:	e031      	b.n	8003b52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d110      	bne.n	8003b16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d102      	bne.n	8003b00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003afa:	7b3b      	ldrb	r3, [r7, #12]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d001      	beq.n	8003b04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e055      	b.n	8003bb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b14:	e01d      	b.n	8003b52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d108      	bne.n	8003b2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b1c:	7bbb      	ldrb	r3, [r7, #14]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b22:	7b7b      	ldrb	r3, [r7, #13]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b28:	7b3b      	ldrb	r3, [r7, #12]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e03e      	b.n	8003bb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2202      	movs	r2, #2
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_TIM_Encoder_Start+0xc4>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d008      	beq.n	8003b70 <HAL_TIM_Encoder_Start+0xd4>
 8003b5e:	e00f      	b.n	8003b80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2201      	movs	r2, #1
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fd7d 	bl	8004668 <TIM_CCxChannelCmd>
      break;
 8003b6e:	e016      	b.n	8003b9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	2104      	movs	r1, #4
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fd75 	bl	8004668 <TIM_CCxChannelCmd>
      break;
 8003b7e:	e00e      	b.n	8003b9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2201      	movs	r2, #1
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fd6d 	bl	8004668 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	2104      	movs	r1, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fd66 	bl	8004668 <TIM_CCxChannelCmd>
      break;
 8003b9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0202 	mvn.w	r2, #2
 8003be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa70 	bl	80040e0 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa62 	bl	80040cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa73 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0204 	mvn.w	r2, #4
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa46 	bl	80040e0 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa38 	bl	80040cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa49 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0208 	mvn.w	r2, #8
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2204      	movs	r2, #4
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fa1c 	bl	80040e0 <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fa0e 	bl	80040cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fa1f 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0210 	mvn.w	r2, #16
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9f2 	bl	80040e0 <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9e4 	bl	80040cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f9f5 	bl	80040f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10e      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0201 	mvn.w	r2, #1
 8003d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd fa2e 	bl	8001198 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b80      	cmp	r3, #128	; 0x80
 8003d48:	d10e      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b80      	cmp	r3, #128	; 0x80
 8003d56:	d107      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fd1e 	bl	80047a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d10e      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d107      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9ba 	bl	8004108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d10e      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d107      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0220 	mvn.w	r2, #32
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fce8 	bl	8004790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e0ac      	b.n	8003f3c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0c      	cmp	r3, #12
 8003dee:	f200 809f 	bhi.w	8003f30 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003f31 	.word	0x08003f31
 8003e00:	08003f31 	.word	0x08003f31
 8003e04:	08003f31 	.word	0x08003f31
 8003e08:	08003e6d 	.word	0x08003e6d
 8003e0c:	08003f31 	.word	0x08003f31
 8003e10:	08003f31 	.word	0x08003f31
 8003e14:	08003f31 	.word	0x08003f31
 8003e18:	08003eaf 	.word	0x08003eaf
 8003e1c:	08003f31 	.word	0x08003f31
 8003e20:	08003f31 	.word	0x08003f31
 8003e24:	08003f31 	.word	0x08003f31
 8003e28:	08003eef 	.word	0x08003eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 f9f2 	bl	800421c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0208 	orr.w	r2, r2, #8
 8003e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0204 	bic.w	r2, r2, #4
 8003e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6999      	ldr	r1, [r3, #24]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	619a      	str	r2, [r3, #24]
      break;
 8003e6a:	e062      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fa38 	bl	80042e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6999      	ldr	r1, [r3, #24]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	021a      	lsls	r2, r3, #8
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	619a      	str	r2, [r3, #24]
      break;
 8003eac:	e041      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fa83 	bl	80043c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0208 	orr.w	r2, r2, #8
 8003ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0204 	bic.w	r2, r2, #4
 8003ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	61da      	str	r2, [r3, #28]
      break;
 8003eec:	e021      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 facd 	bl	8004494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	021a      	lsls	r2, r3, #8
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	61da      	str	r2, [r3, #28]
      break;
 8003f2e:	e000      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIM_ConfigClockSource+0x18>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e0b3      	b.n	80040c4 <HAL_TIM_ConfigClockSource+0x180>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f82:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f94:	d03e      	beq.n	8004014 <HAL_TIM_ConfigClockSource+0xd0>
 8003f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9a:	f200 8087 	bhi.w	80040ac <HAL_TIM_ConfigClockSource+0x168>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	f000 8085 	beq.w	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003faa:	d87f      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x168>
 8003fac:	2b70      	cmp	r3, #112	; 0x70
 8003fae:	d01a      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0xa2>
 8003fb0:	2b70      	cmp	r3, #112	; 0x70
 8003fb2:	d87b      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x168>
 8003fb4:	2b60      	cmp	r3, #96	; 0x60
 8003fb6:	d050      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x116>
 8003fb8:	2b60      	cmp	r3, #96	; 0x60
 8003fba:	d877      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x168>
 8003fbc:	2b50      	cmp	r3, #80	; 0x50
 8003fbe:	d03c      	beq.n	800403a <HAL_TIM_ConfigClockSource+0xf6>
 8003fc0:	2b50      	cmp	r3, #80	; 0x50
 8003fc2:	d873      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x168>
 8003fc4:	2b40      	cmp	r3, #64	; 0x40
 8003fc6:	d058      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x136>
 8003fc8:	2b40      	cmp	r3, #64	; 0x40
 8003fca:	d86f      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x168>
 8003fcc:	2b30      	cmp	r3, #48	; 0x30
 8003fce:	d064      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x156>
 8003fd0:	2b30      	cmp	r3, #48	; 0x30
 8003fd2:	d86b      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x168>
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d060      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x156>
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d867      	bhi.n	80040ac <HAL_TIM_ConfigClockSource+0x168>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d05c      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x156>
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d05a      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fe4:	e062      	b.n	80040ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	6899      	ldr	r1, [r3, #8]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f000 fb17 	bl	8004628 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004008:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	609a      	str	r2, [r3, #8]
      break;
 8004012:	e04e      	b.n	80040b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	6899      	ldr	r1, [r3, #8]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f000 fb00 	bl	8004628 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004036:	609a      	str	r2, [r3, #8]
      break;
 8004038:	e03b      	b.n	80040b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	f000 fa74 	bl	8004534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2150      	movs	r1, #80	; 0x50
 8004052:	4618      	mov	r0, r3
 8004054:	f000 facd 	bl	80045f2 <TIM_ITRx_SetConfig>
      break;
 8004058:	e02b      	b.n	80040b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	461a      	mov	r2, r3
 8004068:	f000 fa93 	bl	8004592 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2160      	movs	r1, #96	; 0x60
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fabd 	bl	80045f2 <TIM_ITRx_SetConfig>
      break;
 8004078:	e01b      	b.n	80040b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	461a      	mov	r2, r3
 8004088:	f000 fa54 	bl	8004534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2140      	movs	r1, #64	; 0x40
 8004092:	4618      	mov	r0, r3
 8004094:	f000 faad 	bl	80045f2 <TIM_ITRx_SetConfig>
      break;
 8004098:	e00b      	b.n	80040b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f000 faa4 	bl	80045f2 <TIM_ITRx_SetConfig>
        break;
 80040aa:	e002      	b.n	80040b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040ac:	bf00      	nop
 80040ae:	e000      	b.n	80040b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a34      	ldr	r2, [pc, #208]	; (8004200 <TIM_Base_SetConfig+0xe4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00f      	beq.n	8004154 <TIM_Base_SetConfig+0x38>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d00b      	beq.n	8004154 <TIM_Base_SetConfig+0x38>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a31      	ldr	r2, [pc, #196]	; (8004204 <TIM_Base_SetConfig+0xe8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d007      	beq.n	8004154 <TIM_Base_SetConfig+0x38>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a30      	ldr	r2, [pc, #192]	; (8004208 <TIM_Base_SetConfig+0xec>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <TIM_Base_SetConfig+0x38>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a2f      	ldr	r2, [pc, #188]	; (800420c <TIM_Base_SetConfig+0xf0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d108      	bne.n	8004166 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a25      	ldr	r2, [pc, #148]	; (8004200 <TIM_Base_SetConfig+0xe4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01b      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004174:	d017      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <TIM_Base_SetConfig+0xe8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a21      	ldr	r2, [pc, #132]	; (8004208 <TIM_Base_SetConfig+0xec>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00f      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a20      	ldr	r2, [pc, #128]	; (800420c <TIM_Base_SetConfig+0xf0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00b      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <TIM_Base_SetConfig+0xf4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <TIM_Base_SetConfig+0xf8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <TIM_Base_SetConfig+0xfc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d108      	bne.n	80041b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a08      	ldr	r2, [pc, #32]	; (8004200 <TIM_Base_SetConfig+0xe4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d103      	bne.n	80041ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	615a      	str	r2, [r3, #20]
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40010000 	.word	0x40010000
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40014000 	.word	0x40014000
 8004214:	40014400 	.word	0x40014400
 8004218:	40014800 	.word	0x40014800

0800421c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 0302 	bic.w	r3, r3, #2
 8004264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <TIM_OC1_SetConfig+0xc8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10c      	bne.n	8004292 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0308 	bic.w	r3, r3, #8
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <TIM_OC1_SetConfig+0xc8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d111      	bne.n	80042be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	621a      	str	r2, [r3, #32]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40010000 	.word	0x40010000

080042e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 0210 	bic.w	r2, r3, #16
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0320 	bic.w	r3, r3, #32
 8004332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <TIM_OC2_SetConfig+0xd4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10d      	bne.n	8004364 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004362:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a15      	ldr	r2, [pc, #84]	; (80043bc <TIM_OC2_SetConfig+0xd4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d113      	bne.n	8004394 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800437a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40010000 	.word	0x40010000

080043c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <TIM_OC3_SetConfig+0xd0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10d      	bne.n	800443a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <TIM_OC3_SetConfig+0xd0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d113      	bne.n	800446a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	621a      	str	r2, [r3, #32]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40010000 	.word	0x40010000

08004494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	031b      	lsls	r3, r3, #12
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a10      	ldr	r2, [pc, #64]	; (8004530 <TIM_OC4_SetConfig+0x9c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d109      	bne.n	8004508 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000

08004534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f023 0201 	bic.w	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800455e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f023 030a 	bic.w	r3, r3, #10
 8004570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004592:	b480      	push	{r7}
 8004594:	b087      	sub	sp, #28
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0210 	bic.w	r2, r3, #16
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	031b      	lsls	r3, r3, #12
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	621a      	str	r2, [r3, #32]
}
 80045e6:	bf00      	nop
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	f043 0307 	orr.w	r3, r3, #7
 8004614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	609a      	str	r2, [r3, #8]
}
 800461c:	bf00      	nop
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	021a      	lsls	r2, r3, #8
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	431a      	orrs	r2, r3
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4313      	orrs	r3, r2
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	609a      	str	r2, [r3, #8]
}
 800465c:	bf00      	nop
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	2201      	movs	r2, #1
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a1a      	ldr	r2, [r3, #32]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	43db      	mvns	r3, r3
 800468a:	401a      	ands	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1a      	ldr	r2, [r3, #32]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 031f 	and.w	r3, r3, #31
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	fa01 f303 	lsl.w	r3, r1, r3
 80046a0:	431a      	orrs	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e050      	b.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1c      	ldr	r2, [pc, #112]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d018      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d013      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00e      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a16      	ldr	r2, [pc, #88]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d009      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a15      	ldr	r2, [pc, #84]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d004      	beq.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a13      	ldr	r2, [pc, #76]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d10c      	bne.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	4313      	orrs	r3, r2
 8004752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40010000 	.word	0x40010000
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40014000 	.word	0x40014000

08004790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e03f      	b.n	800484a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d106      	bne.n	80047e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc fe8c 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2224      	movs	r2, #36	; 0x24
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fc7b 	bl	80050f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	691a      	ldr	r2, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b08a      	sub	sp, #40	; 0x28
 8004856:	af02      	add	r7, sp, #8
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4613      	mov	r3, r2
 8004860:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b20      	cmp	r3, #32
 8004870:	d17c      	bne.n	800496c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_UART_Transmit+0x2c>
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e075      	b.n	800496e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_UART_Transmit+0x3e>
 800488c:	2302      	movs	r3, #2
 800488e:	e06e      	b.n	800496e <HAL_UART_Transmit+0x11c>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2221      	movs	r2, #33	; 0x21
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a6:	f7fc ffb7 	bl	8001818 <HAL_GetTick>
 80048aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c0:	d108      	bne.n	80048d4 <HAL_UART_Transmit+0x82>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d104      	bne.n	80048d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e003      	b.n	80048dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048e4:	e02a      	b.n	800493c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2200      	movs	r2, #0
 80048ee:	2180      	movs	r1, #128	; 0x80
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fa3d 	bl	8004d70 <UART_WaitOnFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e036      	b.n	800496e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10b      	bne.n	800491e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004914:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	3302      	adds	r3, #2
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	e007      	b.n	800492e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	3301      	adds	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1cf      	bne.n	80048e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	2140      	movs	r1, #64	; 0x40
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fa0d 	bl	8004d70 <UART_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e006      	b.n	800496e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	e000      	b.n	800496e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800496c:	2302      	movs	r3, #2
  }
}
 800496e:	4618      	mov	r0, r3
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	4613      	mov	r3, r2
 8004982:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b20      	cmp	r3, #32
 800498e:	d11d      	bne.n	80049cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_UART_Receive_IT+0x26>
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e016      	b.n	80049ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_UART_Receive_IT+0x38>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e00f      	b.n	80049ce <HAL_UART_Receive_IT+0x58>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	461a      	mov	r2, r3
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fa1e 	bl	8004e04 <UART_Start_Receive_IT>
 80049c8:	4603      	mov	r3, r0
 80049ca:	e000      	b.n	80049ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10d      	bne.n	8004a2a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_UART_IRQHandler+0x52>
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fad1 	bl	8004fca <UART_Receive_IT>
      return;
 8004a28:	e17c      	b.n	8004d24 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80b1 	beq.w	8004b94 <HAL_UART_IRQHandler+0x1bc>
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d105      	bne.n	8004a48 <HAL_UART_IRQHandler+0x70>
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80a6 	beq.w	8004b94 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_UART_IRQHandler+0x90>
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f043 0201 	orr.w	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <HAL_UART_IRQHandler+0xb0>
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f043 0202 	orr.w	r2, r3, #2
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_UART_IRQHandler+0xd0>
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	f043 0204 	orr.w	r2, r3, #4
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00f      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xfa>
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <HAL_UART_IRQHandler+0xee>
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f043 0208 	orr.w	r2, r3, #8
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 811f 	beq.w	8004d1a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_UART_IRQHandler+0x11e>
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	f003 0320 	and.w	r3, r3, #32
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fa6a 	bl	8004fca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <HAL_UART_IRQHandler+0x146>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d031      	beq.n	8004b82 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f9aa 	bl	8004e78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2e:	2b40      	cmp	r3, #64	; 0x40
 8004b30:	d123      	bne.n	8004b7a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b40:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d013      	beq.n	8004b72 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	4a77      	ldr	r2, [pc, #476]	; (8004d2c <HAL_UART_IRQHandler+0x354>)
 8004b50:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fc74 	bl	8002444 <HAL_DMA_Abort_IT>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00e      	b.n	8004b90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8e6 	bl	8004d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e00a      	b.n	8004b90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8e2 	bl	8004d44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	e006      	b.n	8004b90 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f8de 	bl	8004d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b8e:	e0c4      	b.n	8004d1a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	bf00      	nop
    return;
 8004b92:	e0c2      	b.n	8004d1a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f040 80a2 	bne.w	8004ce2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 809c 	beq.w	8004ce2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8096 	beq.w	8004ce2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d14f      	bne.n	8004c7a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004be4:	8a3b      	ldrh	r3, [r7, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8099 	beq.w	8004d1e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bf0:	8a3a      	ldrh	r2, [r7, #16]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	f080 8093 	bcs.w	8004d1e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8a3a      	ldrh	r2, [r7, #16]
 8004bfc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c08:	d02b      	beq.n	8004c62 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c18:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c38:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0210 	bic.w	r2, r2, #16
 8004c56:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fd fb81 	bl	8002364 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f870 	bl	8004d58 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004c78:	e051      	b.n	8004d1e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d047      	beq.n	8004d22 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004c92:	8a7b      	ldrh	r3, [r7, #18]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d044      	beq.n	8004d22 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ca6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695a      	ldr	r2, [r3, #20]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0210 	bic.w	r2, r2, #16
 8004cd4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cd6:	8a7b      	ldrh	r3, [r7, #18]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f83c 	bl	8004d58 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004ce0:	e01f      	b.n	8004d22 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_UART_IRQHandler+0x326>
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f8ff 	bl	8004efa <UART_Transmit_IT>
    return;
 8004cfc:	e012      	b.n	8004d24 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00d      	beq.n	8004d24 <HAL_UART_IRQHandler+0x34c>
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f941 	bl	8004f9a <UART_EndTransmit_IT>
    return;
 8004d18:	e004      	b.n	8004d24 <HAL_UART_IRQHandler+0x34c>
    return;
 8004d1a:	bf00      	nop
 8004d1c:	e002      	b.n	8004d24 <HAL_UART_IRQHandler+0x34c>
      return;
 8004d1e:	bf00      	nop
 8004d20:	e000      	b.n	8004d24 <HAL_UART_IRQHandler+0x34c>
      return;
 8004d22:	bf00      	nop
  }
}
 8004d24:	3728      	adds	r7, #40	; 0x28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	08004ed3 	.word	0x08004ed3

08004d30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d80:	e02c      	b.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d028      	beq.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d90:	f7fc fd42 	bl	8001818 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d21d      	bcs.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695a      	ldr	r2, [r3, #20]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e00f      	b.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4013      	ands	r3, r2
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	bf0c      	ite	eq
 8004dec:	2301      	moveq	r3, #1
 8004dee:	2300      	movne	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	79fb      	ldrb	r3, [r7, #7]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d0c3      	beq.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	88fa      	ldrh	r2, [r7, #6]
 8004e22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2222      	movs	r2, #34	; 0x22
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e48:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0220 	orr.w	r2, r2, #32
 8004e68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0210 	bic.w	r2, r2, #16
 8004eb6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff ff29 	bl	8004d44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b21      	cmp	r3, #33	; 0x21
 8004f0c:	d13e      	bne.n	8004f8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f16:	d114      	bne.n	8004f42 <UART_Transmit_IT+0x48>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d110      	bne.n	8004f42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	1c9a      	adds	r2, r3, #2
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	621a      	str	r2, [r3, #32]
 8004f40:	e008      	b.n	8004f54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6211      	str	r1, [r2, #32]
 8004f4c:	781a      	ldrb	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4619      	mov	r1, r3
 8004f62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10f      	bne.n	8004f88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff feb8 	bl	8004d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b22      	cmp	r3, #34	; 0x22
 8004fdc:	f040 8087 	bne.w	80050ee <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe8:	d117      	bne.n	800501a <UART_Receive_IT+0x50>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d113      	bne.n	800501a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005008:	b29a      	uxth	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	1c9a      	adds	r2, r3, #2
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	629a      	str	r2, [r3, #40]	; 0x28
 8005018:	e026      	b.n	8005068 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502c:	d007      	beq.n	800503e <UART_Receive_IT+0x74>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <UART_Receive_IT+0x82>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	b2da      	uxtb	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	e008      	b.n	800505e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005058:	b2da      	uxtb	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4619      	mov	r1, r3
 8005076:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005078:	2b00      	cmp	r3, #0
 800507a:	d136      	bne.n	80050ea <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0220 	bic.w	r2, r2, #32
 800508a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800509a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d10e      	bne.n	80050da <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0210 	bic.w	r2, r2, #16
 80050ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff fe40 	bl	8004d58 <HAL_UARTEx_RxEventCallback>
 80050d8:	e002      	b.n	80050e0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fb ff56 	bl	8000f8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e002      	b.n	80050f0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	b09f      	sub	sp, #124	; 0x7c
 80050fe:	af00      	add	r7, sp, #0
 8005100:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800510c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510e:	68d9      	ldr	r1, [r3, #12]
 8005110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	ea40 0301 	orr.w	r3, r0, r1
 8005118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800511a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	431a      	orrs	r2, r3
 8005124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	431a      	orrs	r2, r3
 800512a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	4313      	orrs	r3, r2
 8005130:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800513c:	f021 010c 	bic.w	r1, r1, #12
 8005140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005146:	430b      	orrs	r3, r1
 8005148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800514a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005156:	6999      	ldr	r1, [r3, #24]
 8005158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	ea40 0301 	orr.w	r3, r0, r1
 8005160:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	4bc5      	ldr	r3, [pc, #788]	; (800547c <UART_SetConfig+0x384>)
 8005168:	429a      	cmp	r2, r3
 800516a:	d004      	beq.n	8005176 <UART_SetConfig+0x7e>
 800516c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	4bc3      	ldr	r3, [pc, #780]	; (8005480 <UART_SetConfig+0x388>)
 8005172:	429a      	cmp	r2, r3
 8005174:	d103      	bne.n	800517e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005176:	f7fe f9c1 	bl	80034fc <HAL_RCC_GetPCLK2Freq>
 800517a:	6778      	str	r0, [r7, #116]	; 0x74
 800517c:	e002      	b.n	8005184 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800517e:	f7fe f9a9 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8005182:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518c:	f040 80b6 	bne.w	80052fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005192:	461c      	mov	r4, r3
 8005194:	f04f 0500 	mov.w	r5, #0
 8005198:	4622      	mov	r2, r4
 800519a:	462b      	mov	r3, r5
 800519c:	1891      	adds	r1, r2, r2
 800519e:	6439      	str	r1, [r7, #64]	; 0x40
 80051a0:	415b      	adcs	r3, r3
 80051a2:	647b      	str	r3, [r7, #68]	; 0x44
 80051a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051a8:	1912      	adds	r2, r2, r4
 80051aa:	eb45 0303 	adc.w	r3, r5, r3
 80051ae:	f04f 0000 	mov.w	r0, #0
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	00d9      	lsls	r1, r3, #3
 80051b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051bc:	00d0      	lsls	r0, r2, #3
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	1911      	adds	r1, r2, r4
 80051c4:	6639      	str	r1, [r7, #96]	; 0x60
 80051c6:	416b      	adcs	r3, r5
 80051c8:	667b      	str	r3, [r7, #100]	; 0x64
 80051ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	461a      	mov	r2, r3
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	1891      	adds	r1, r2, r2
 80051d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80051d8:	415b      	adcs	r3, r3
 80051da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80051e4:	f7fb f962 	bl	80004ac <__aeabi_uldivmod>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4ba5      	ldr	r3, [pc, #660]	; (8005484 <UART_SetConfig+0x38c>)
 80051ee:	fba3 2302 	umull	r2, r3, r3, r2
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	011e      	lsls	r6, r3, #4
 80051f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f8:	461c      	mov	r4, r3
 80051fa:	f04f 0500 	mov.w	r5, #0
 80051fe:	4622      	mov	r2, r4
 8005200:	462b      	mov	r3, r5
 8005202:	1891      	adds	r1, r2, r2
 8005204:	6339      	str	r1, [r7, #48]	; 0x30
 8005206:	415b      	adcs	r3, r3
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
 800520a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800520e:	1912      	adds	r2, r2, r4
 8005210:	eb45 0303 	adc.w	r3, r5, r3
 8005214:	f04f 0000 	mov.w	r0, #0
 8005218:	f04f 0100 	mov.w	r1, #0
 800521c:	00d9      	lsls	r1, r3, #3
 800521e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005222:	00d0      	lsls	r0, r2, #3
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	1911      	adds	r1, r2, r4
 800522a:	65b9      	str	r1, [r7, #88]	; 0x58
 800522c:	416b      	adcs	r3, r5
 800522e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	461a      	mov	r2, r3
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	1891      	adds	r1, r2, r2
 800523c:	62b9      	str	r1, [r7, #40]	; 0x28
 800523e:	415b      	adcs	r3, r3
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005246:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800524a:	f7fb f92f 	bl	80004ac <__aeabi_uldivmod>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4b8c      	ldr	r3, [pc, #560]	; (8005484 <UART_SetConfig+0x38c>)
 8005254:	fba3 1302 	umull	r1, r3, r3, r2
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	2164      	movs	r1, #100	; 0x64
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	3332      	adds	r3, #50	; 0x32
 8005266:	4a87      	ldr	r2, [pc, #540]	; (8005484 <UART_SetConfig+0x38c>)
 8005268:	fba2 2303 	umull	r2, r3, r2, r3
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005274:	441e      	add	r6, r3
 8005276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005278:	4618      	mov	r0, r3
 800527a:	f04f 0100 	mov.w	r1, #0
 800527e:	4602      	mov	r2, r0
 8005280:	460b      	mov	r3, r1
 8005282:	1894      	adds	r4, r2, r2
 8005284:	623c      	str	r4, [r7, #32]
 8005286:	415b      	adcs	r3, r3
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
 800528a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800528e:	1812      	adds	r2, r2, r0
 8005290:	eb41 0303 	adc.w	r3, r1, r3
 8005294:	f04f 0400 	mov.w	r4, #0
 8005298:	f04f 0500 	mov.w	r5, #0
 800529c:	00dd      	lsls	r5, r3, #3
 800529e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052a2:	00d4      	lsls	r4, r2, #3
 80052a4:	4622      	mov	r2, r4
 80052a6:	462b      	mov	r3, r5
 80052a8:	1814      	adds	r4, r2, r0
 80052aa:	653c      	str	r4, [r7, #80]	; 0x50
 80052ac:	414b      	adcs	r3, r1
 80052ae:	657b      	str	r3, [r7, #84]	; 0x54
 80052b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	461a      	mov	r2, r3
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	1891      	adds	r1, r2, r2
 80052bc:	61b9      	str	r1, [r7, #24]
 80052be:	415b      	adcs	r3, r3
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80052ca:	f7fb f8ef 	bl	80004ac <__aeabi_uldivmod>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4b6c      	ldr	r3, [pc, #432]	; (8005484 <UART_SetConfig+0x38c>)
 80052d4:	fba3 1302 	umull	r1, r3, r3, r2
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	2164      	movs	r1, #100	; 0x64
 80052dc:	fb01 f303 	mul.w	r3, r1, r3
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	3332      	adds	r3, #50	; 0x32
 80052e6:	4a67      	ldr	r2, [pc, #412]	; (8005484 <UART_SetConfig+0x38c>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	f003 0207 	and.w	r2, r3, #7
 80052f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4432      	add	r2, r6
 80052f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052fa:	e0b9      	b.n	8005470 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052fe:	461c      	mov	r4, r3
 8005300:	f04f 0500 	mov.w	r5, #0
 8005304:	4622      	mov	r2, r4
 8005306:	462b      	mov	r3, r5
 8005308:	1891      	adds	r1, r2, r2
 800530a:	6139      	str	r1, [r7, #16]
 800530c:	415b      	adcs	r3, r3
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005314:	1912      	adds	r2, r2, r4
 8005316:	eb45 0303 	adc.w	r3, r5, r3
 800531a:	f04f 0000 	mov.w	r0, #0
 800531e:	f04f 0100 	mov.w	r1, #0
 8005322:	00d9      	lsls	r1, r3, #3
 8005324:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005328:	00d0      	lsls	r0, r2, #3
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	eb12 0804 	adds.w	r8, r2, r4
 8005332:	eb43 0905 	adc.w	r9, r3, r5
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4618      	mov	r0, r3
 800533c:	f04f 0100 	mov.w	r1, #0
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	008b      	lsls	r3, r1, #2
 800534a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800534e:	0082      	lsls	r2, r0, #2
 8005350:	4640      	mov	r0, r8
 8005352:	4649      	mov	r1, r9
 8005354:	f7fb f8aa 	bl	80004ac <__aeabi_uldivmod>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4b49      	ldr	r3, [pc, #292]	; (8005484 <UART_SetConfig+0x38c>)
 800535e:	fba3 2302 	umull	r2, r3, r3, r2
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	011e      	lsls	r6, r3, #4
 8005366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005368:	4618      	mov	r0, r3
 800536a:	f04f 0100 	mov.w	r1, #0
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	1894      	adds	r4, r2, r2
 8005374:	60bc      	str	r4, [r7, #8]
 8005376:	415b      	adcs	r3, r3
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800537e:	1812      	adds	r2, r2, r0
 8005380:	eb41 0303 	adc.w	r3, r1, r3
 8005384:	f04f 0400 	mov.w	r4, #0
 8005388:	f04f 0500 	mov.w	r5, #0
 800538c:	00dd      	lsls	r5, r3, #3
 800538e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005392:	00d4      	lsls	r4, r2, #3
 8005394:	4622      	mov	r2, r4
 8005396:	462b      	mov	r3, r5
 8005398:	1814      	adds	r4, r2, r0
 800539a:	64bc      	str	r4, [r7, #72]	; 0x48
 800539c:	414b      	adcs	r3, r1
 800539e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	f04f 0300 	mov.w	r3, #0
 80053b2:	008b      	lsls	r3, r1, #2
 80053b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80053b8:	0082      	lsls	r2, r0, #2
 80053ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80053be:	f7fb f875 	bl	80004ac <__aeabi_uldivmod>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <UART_SetConfig+0x38c>)
 80053c8:	fba3 1302 	umull	r1, r3, r3, r2
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	2164      	movs	r1, #100	; 0x64
 80053d0:	fb01 f303 	mul.w	r3, r1, r3
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	3332      	adds	r3, #50	; 0x32
 80053da:	4a2a      	ldr	r2, [pc, #168]	; (8005484 <UART_SetConfig+0x38c>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e6:	441e      	add	r6, r3
 80053e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053ea:	4618      	mov	r0, r3
 80053ec:	f04f 0100 	mov.w	r1, #0
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	1894      	adds	r4, r2, r2
 80053f6:	603c      	str	r4, [r7, #0]
 80053f8:	415b      	adcs	r3, r3
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005400:	1812      	adds	r2, r2, r0
 8005402:	eb41 0303 	adc.w	r3, r1, r3
 8005406:	f04f 0400 	mov.w	r4, #0
 800540a:	f04f 0500 	mov.w	r5, #0
 800540e:	00dd      	lsls	r5, r3, #3
 8005410:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005414:	00d4      	lsls	r4, r2, #3
 8005416:	4622      	mov	r2, r4
 8005418:	462b      	mov	r3, r5
 800541a:	eb12 0a00 	adds.w	sl, r2, r0
 800541e:	eb43 0b01 	adc.w	fp, r3, r1
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4618      	mov	r0, r3
 8005428:	f04f 0100 	mov.w	r1, #0
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	008b      	lsls	r3, r1, #2
 8005436:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800543a:	0082      	lsls	r2, r0, #2
 800543c:	4650      	mov	r0, sl
 800543e:	4659      	mov	r1, fp
 8005440:	f7fb f834 	bl	80004ac <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <UART_SetConfig+0x38c>)
 800544a:	fba3 1302 	umull	r1, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	2164      	movs	r1, #100	; 0x64
 8005452:	fb01 f303 	mul.w	r3, r1, r3
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	3332      	adds	r3, #50	; 0x32
 800545c:	4a09      	ldr	r2, [pc, #36]	; (8005484 <UART_SetConfig+0x38c>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	f003 020f 	and.w	r2, r3, #15
 8005468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4432      	add	r2, r6
 800546e:	609a      	str	r2, [r3, #8]
}
 8005470:	bf00      	nop
 8005472:	377c      	adds	r7, #124	; 0x7c
 8005474:	46bd      	mov	sp, r7
 8005476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547a:	bf00      	nop
 800547c:	40011000 	.word	0x40011000
 8005480:	40011400 	.word	0x40011400
 8005484:	51eb851f 	.word	0x51eb851f

08005488 <__errno>:
 8005488:	4b01      	ldr	r3, [pc, #4]	; (8005490 <__errno+0x8>)
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20000010 	.word	0x20000010

08005494 <__libc_init_array>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	4d0d      	ldr	r5, [pc, #52]	; (80054cc <__libc_init_array+0x38>)
 8005498:	4c0d      	ldr	r4, [pc, #52]	; (80054d0 <__libc_init_array+0x3c>)
 800549a:	1b64      	subs	r4, r4, r5
 800549c:	10a4      	asrs	r4, r4, #2
 800549e:	2600      	movs	r6, #0
 80054a0:	42a6      	cmp	r6, r4
 80054a2:	d109      	bne.n	80054b8 <__libc_init_array+0x24>
 80054a4:	4d0b      	ldr	r5, [pc, #44]	; (80054d4 <__libc_init_array+0x40>)
 80054a6:	4c0c      	ldr	r4, [pc, #48]	; (80054d8 <__libc_init_array+0x44>)
 80054a8:	f000 fc4e 	bl	8005d48 <_init>
 80054ac:	1b64      	subs	r4, r4, r5
 80054ae:	10a4      	asrs	r4, r4, #2
 80054b0:	2600      	movs	r6, #0
 80054b2:	42a6      	cmp	r6, r4
 80054b4:	d105      	bne.n	80054c2 <__libc_init_array+0x2e>
 80054b6:	bd70      	pop	{r4, r5, r6, pc}
 80054b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054bc:	4798      	blx	r3
 80054be:	3601      	adds	r6, #1
 80054c0:	e7ee      	b.n	80054a0 <__libc_init_array+0xc>
 80054c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c6:	4798      	blx	r3
 80054c8:	3601      	adds	r6, #1
 80054ca:	e7f2      	b.n	80054b2 <__libc_init_array+0x1e>
 80054cc:	08005e10 	.word	0x08005e10
 80054d0:	08005e10 	.word	0x08005e10
 80054d4:	08005e10 	.word	0x08005e10
 80054d8:	08005e14 	.word	0x08005e14

080054dc <memset>:
 80054dc:	4402      	add	r2, r0
 80054de:	4603      	mov	r3, r0
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d100      	bne.n	80054e6 <memset+0xa>
 80054e4:	4770      	bx	lr
 80054e6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ea:	e7f9      	b.n	80054e0 <memset+0x4>

080054ec <siprintf>:
 80054ec:	b40e      	push	{r1, r2, r3}
 80054ee:	b500      	push	{lr}
 80054f0:	b09c      	sub	sp, #112	; 0x70
 80054f2:	ab1d      	add	r3, sp, #116	; 0x74
 80054f4:	9002      	str	r0, [sp, #8]
 80054f6:	9006      	str	r0, [sp, #24]
 80054f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054fc:	4809      	ldr	r0, [pc, #36]	; (8005524 <siprintf+0x38>)
 80054fe:	9107      	str	r1, [sp, #28]
 8005500:	9104      	str	r1, [sp, #16]
 8005502:	4909      	ldr	r1, [pc, #36]	; (8005528 <siprintf+0x3c>)
 8005504:	f853 2b04 	ldr.w	r2, [r3], #4
 8005508:	9105      	str	r1, [sp, #20]
 800550a:	6800      	ldr	r0, [r0, #0]
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	a902      	add	r1, sp, #8
 8005510:	f000 f868 	bl	80055e4 <_svfiprintf_r>
 8005514:	9b02      	ldr	r3, [sp, #8]
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	b01c      	add	sp, #112	; 0x70
 800551c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005520:	b003      	add	sp, #12
 8005522:	4770      	bx	lr
 8005524:	20000010 	.word	0x20000010
 8005528:	ffff0208 	.word	0xffff0208

0800552c <__ssputs_r>:
 800552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	688e      	ldr	r6, [r1, #8]
 8005532:	429e      	cmp	r6, r3
 8005534:	4682      	mov	sl, r0
 8005536:	460c      	mov	r4, r1
 8005538:	4690      	mov	r8, r2
 800553a:	461f      	mov	r7, r3
 800553c:	d838      	bhi.n	80055b0 <__ssputs_r+0x84>
 800553e:	898a      	ldrh	r2, [r1, #12]
 8005540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005544:	d032      	beq.n	80055ac <__ssputs_r+0x80>
 8005546:	6825      	ldr	r5, [r4, #0]
 8005548:	6909      	ldr	r1, [r1, #16]
 800554a:	eba5 0901 	sub.w	r9, r5, r1
 800554e:	6965      	ldr	r5, [r4, #20]
 8005550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005554:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005558:	3301      	adds	r3, #1
 800555a:	444b      	add	r3, r9
 800555c:	106d      	asrs	r5, r5, #1
 800555e:	429d      	cmp	r5, r3
 8005560:	bf38      	it	cc
 8005562:	461d      	movcc	r5, r3
 8005564:	0553      	lsls	r3, r2, #21
 8005566:	d531      	bpl.n	80055cc <__ssputs_r+0xa0>
 8005568:	4629      	mov	r1, r5
 800556a:	f000 fb47 	bl	8005bfc <_malloc_r>
 800556e:	4606      	mov	r6, r0
 8005570:	b950      	cbnz	r0, 8005588 <__ssputs_r+0x5c>
 8005572:	230c      	movs	r3, #12
 8005574:	f8ca 3000 	str.w	r3, [sl]
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557e:	81a3      	strh	r3, [r4, #12]
 8005580:	f04f 30ff 	mov.w	r0, #4294967295
 8005584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005588:	6921      	ldr	r1, [r4, #16]
 800558a:	464a      	mov	r2, r9
 800558c:	f000 fabe 	bl	8005b0c <memcpy>
 8005590:	89a3      	ldrh	r3, [r4, #12]
 8005592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	6126      	str	r6, [r4, #16]
 800559e:	6165      	str	r5, [r4, #20]
 80055a0:	444e      	add	r6, r9
 80055a2:	eba5 0509 	sub.w	r5, r5, r9
 80055a6:	6026      	str	r6, [r4, #0]
 80055a8:	60a5      	str	r5, [r4, #8]
 80055aa:	463e      	mov	r6, r7
 80055ac:	42be      	cmp	r6, r7
 80055ae:	d900      	bls.n	80055b2 <__ssputs_r+0x86>
 80055b0:	463e      	mov	r6, r7
 80055b2:	4632      	mov	r2, r6
 80055b4:	6820      	ldr	r0, [r4, #0]
 80055b6:	4641      	mov	r1, r8
 80055b8:	f000 fab6 	bl	8005b28 <memmove>
 80055bc:	68a3      	ldr	r3, [r4, #8]
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	1b9b      	subs	r3, r3, r6
 80055c2:	4432      	add	r2, r6
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	6022      	str	r2, [r4, #0]
 80055c8:	2000      	movs	r0, #0
 80055ca:	e7db      	b.n	8005584 <__ssputs_r+0x58>
 80055cc:	462a      	mov	r2, r5
 80055ce:	f000 fb6f 	bl	8005cb0 <_realloc_r>
 80055d2:	4606      	mov	r6, r0
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d1e1      	bne.n	800559c <__ssputs_r+0x70>
 80055d8:	6921      	ldr	r1, [r4, #16]
 80055da:	4650      	mov	r0, sl
 80055dc:	f000 fabe 	bl	8005b5c <_free_r>
 80055e0:	e7c7      	b.n	8005572 <__ssputs_r+0x46>
	...

080055e4 <_svfiprintf_r>:
 80055e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e8:	4698      	mov	r8, r3
 80055ea:	898b      	ldrh	r3, [r1, #12]
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	b09d      	sub	sp, #116	; 0x74
 80055f0:	4607      	mov	r7, r0
 80055f2:	460d      	mov	r5, r1
 80055f4:	4614      	mov	r4, r2
 80055f6:	d50e      	bpl.n	8005616 <_svfiprintf_r+0x32>
 80055f8:	690b      	ldr	r3, [r1, #16]
 80055fa:	b963      	cbnz	r3, 8005616 <_svfiprintf_r+0x32>
 80055fc:	2140      	movs	r1, #64	; 0x40
 80055fe:	f000 fafd 	bl	8005bfc <_malloc_r>
 8005602:	6028      	str	r0, [r5, #0]
 8005604:	6128      	str	r0, [r5, #16]
 8005606:	b920      	cbnz	r0, 8005612 <_svfiprintf_r+0x2e>
 8005608:	230c      	movs	r3, #12
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	f04f 30ff 	mov.w	r0, #4294967295
 8005610:	e0d1      	b.n	80057b6 <_svfiprintf_r+0x1d2>
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	616b      	str	r3, [r5, #20]
 8005616:	2300      	movs	r3, #0
 8005618:	9309      	str	r3, [sp, #36]	; 0x24
 800561a:	2320      	movs	r3, #32
 800561c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005620:	f8cd 800c 	str.w	r8, [sp, #12]
 8005624:	2330      	movs	r3, #48	; 0x30
 8005626:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057d0 <_svfiprintf_r+0x1ec>
 800562a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800562e:	f04f 0901 	mov.w	r9, #1
 8005632:	4623      	mov	r3, r4
 8005634:	469a      	mov	sl, r3
 8005636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800563a:	b10a      	cbz	r2, 8005640 <_svfiprintf_r+0x5c>
 800563c:	2a25      	cmp	r2, #37	; 0x25
 800563e:	d1f9      	bne.n	8005634 <_svfiprintf_r+0x50>
 8005640:	ebba 0b04 	subs.w	fp, sl, r4
 8005644:	d00b      	beq.n	800565e <_svfiprintf_r+0x7a>
 8005646:	465b      	mov	r3, fp
 8005648:	4622      	mov	r2, r4
 800564a:	4629      	mov	r1, r5
 800564c:	4638      	mov	r0, r7
 800564e:	f7ff ff6d 	bl	800552c <__ssputs_r>
 8005652:	3001      	adds	r0, #1
 8005654:	f000 80aa 	beq.w	80057ac <_svfiprintf_r+0x1c8>
 8005658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800565a:	445a      	add	r2, fp
 800565c:	9209      	str	r2, [sp, #36]	; 0x24
 800565e:	f89a 3000 	ldrb.w	r3, [sl]
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80a2 	beq.w	80057ac <_svfiprintf_r+0x1c8>
 8005668:	2300      	movs	r3, #0
 800566a:	f04f 32ff 	mov.w	r2, #4294967295
 800566e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005672:	f10a 0a01 	add.w	sl, sl, #1
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	9307      	str	r3, [sp, #28]
 800567a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800567e:	931a      	str	r3, [sp, #104]	; 0x68
 8005680:	4654      	mov	r4, sl
 8005682:	2205      	movs	r2, #5
 8005684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005688:	4851      	ldr	r0, [pc, #324]	; (80057d0 <_svfiprintf_r+0x1ec>)
 800568a:	f7fa fdb1 	bl	80001f0 <memchr>
 800568e:	9a04      	ldr	r2, [sp, #16]
 8005690:	b9d8      	cbnz	r0, 80056ca <_svfiprintf_r+0xe6>
 8005692:	06d0      	lsls	r0, r2, #27
 8005694:	bf44      	itt	mi
 8005696:	2320      	movmi	r3, #32
 8005698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800569c:	0711      	lsls	r1, r2, #28
 800569e:	bf44      	itt	mi
 80056a0:	232b      	movmi	r3, #43	; 0x2b
 80056a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056a6:	f89a 3000 	ldrb.w	r3, [sl]
 80056aa:	2b2a      	cmp	r3, #42	; 0x2a
 80056ac:	d015      	beq.n	80056da <_svfiprintf_r+0xf6>
 80056ae:	9a07      	ldr	r2, [sp, #28]
 80056b0:	4654      	mov	r4, sl
 80056b2:	2000      	movs	r0, #0
 80056b4:	f04f 0c0a 	mov.w	ip, #10
 80056b8:	4621      	mov	r1, r4
 80056ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056be:	3b30      	subs	r3, #48	; 0x30
 80056c0:	2b09      	cmp	r3, #9
 80056c2:	d94e      	bls.n	8005762 <_svfiprintf_r+0x17e>
 80056c4:	b1b0      	cbz	r0, 80056f4 <_svfiprintf_r+0x110>
 80056c6:	9207      	str	r2, [sp, #28]
 80056c8:	e014      	b.n	80056f4 <_svfiprintf_r+0x110>
 80056ca:	eba0 0308 	sub.w	r3, r0, r8
 80056ce:	fa09 f303 	lsl.w	r3, r9, r3
 80056d2:	4313      	orrs	r3, r2
 80056d4:	9304      	str	r3, [sp, #16]
 80056d6:	46a2      	mov	sl, r4
 80056d8:	e7d2      	b.n	8005680 <_svfiprintf_r+0x9c>
 80056da:	9b03      	ldr	r3, [sp, #12]
 80056dc:	1d19      	adds	r1, r3, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	9103      	str	r1, [sp, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bfbb      	ittet	lt
 80056e6:	425b      	neglt	r3, r3
 80056e8:	f042 0202 	orrlt.w	r2, r2, #2
 80056ec:	9307      	strge	r3, [sp, #28]
 80056ee:	9307      	strlt	r3, [sp, #28]
 80056f0:	bfb8      	it	lt
 80056f2:	9204      	strlt	r2, [sp, #16]
 80056f4:	7823      	ldrb	r3, [r4, #0]
 80056f6:	2b2e      	cmp	r3, #46	; 0x2e
 80056f8:	d10c      	bne.n	8005714 <_svfiprintf_r+0x130>
 80056fa:	7863      	ldrb	r3, [r4, #1]
 80056fc:	2b2a      	cmp	r3, #42	; 0x2a
 80056fe:	d135      	bne.n	800576c <_svfiprintf_r+0x188>
 8005700:	9b03      	ldr	r3, [sp, #12]
 8005702:	1d1a      	adds	r2, r3, #4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	9203      	str	r2, [sp, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	bfb8      	it	lt
 800570c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005710:	3402      	adds	r4, #2
 8005712:	9305      	str	r3, [sp, #20]
 8005714:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057e0 <_svfiprintf_r+0x1fc>
 8005718:	7821      	ldrb	r1, [r4, #0]
 800571a:	2203      	movs	r2, #3
 800571c:	4650      	mov	r0, sl
 800571e:	f7fa fd67 	bl	80001f0 <memchr>
 8005722:	b140      	cbz	r0, 8005736 <_svfiprintf_r+0x152>
 8005724:	2340      	movs	r3, #64	; 0x40
 8005726:	eba0 000a 	sub.w	r0, r0, sl
 800572a:	fa03 f000 	lsl.w	r0, r3, r0
 800572e:	9b04      	ldr	r3, [sp, #16]
 8005730:	4303      	orrs	r3, r0
 8005732:	3401      	adds	r4, #1
 8005734:	9304      	str	r3, [sp, #16]
 8005736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800573a:	4826      	ldr	r0, [pc, #152]	; (80057d4 <_svfiprintf_r+0x1f0>)
 800573c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005740:	2206      	movs	r2, #6
 8005742:	f7fa fd55 	bl	80001f0 <memchr>
 8005746:	2800      	cmp	r0, #0
 8005748:	d038      	beq.n	80057bc <_svfiprintf_r+0x1d8>
 800574a:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <_svfiprintf_r+0x1f4>)
 800574c:	bb1b      	cbnz	r3, 8005796 <_svfiprintf_r+0x1b2>
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	3307      	adds	r3, #7
 8005752:	f023 0307 	bic.w	r3, r3, #7
 8005756:	3308      	adds	r3, #8
 8005758:	9303      	str	r3, [sp, #12]
 800575a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800575c:	4433      	add	r3, r6
 800575e:	9309      	str	r3, [sp, #36]	; 0x24
 8005760:	e767      	b.n	8005632 <_svfiprintf_r+0x4e>
 8005762:	fb0c 3202 	mla	r2, ip, r2, r3
 8005766:	460c      	mov	r4, r1
 8005768:	2001      	movs	r0, #1
 800576a:	e7a5      	b.n	80056b8 <_svfiprintf_r+0xd4>
 800576c:	2300      	movs	r3, #0
 800576e:	3401      	adds	r4, #1
 8005770:	9305      	str	r3, [sp, #20]
 8005772:	4619      	mov	r1, r3
 8005774:	f04f 0c0a 	mov.w	ip, #10
 8005778:	4620      	mov	r0, r4
 800577a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800577e:	3a30      	subs	r2, #48	; 0x30
 8005780:	2a09      	cmp	r2, #9
 8005782:	d903      	bls.n	800578c <_svfiprintf_r+0x1a8>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0c5      	beq.n	8005714 <_svfiprintf_r+0x130>
 8005788:	9105      	str	r1, [sp, #20]
 800578a:	e7c3      	b.n	8005714 <_svfiprintf_r+0x130>
 800578c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005790:	4604      	mov	r4, r0
 8005792:	2301      	movs	r3, #1
 8005794:	e7f0      	b.n	8005778 <_svfiprintf_r+0x194>
 8005796:	ab03      	add	r3, sp, #12
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	462a      	mov	r2, r5
 800579c:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <_svfiprintf_r+0x1f8>)
 800579e:	a904      	add	r1, sp, #16
 80057a0:	4638      	mov	r0, r7
 80057a2:	f3af 8000 	nop.w
 80057a6:	1c42      	adds	r2, r0, #1
 80057a8:	4606      	mov	r6, r0
 80057aa:	d1d6      	bne.n	800575a <_svfiprintf_r+0x176>
 80057ac:	89ab      	ldrh	r3, [r5, #12]
 80057ae:	065b      	lsls	r3, r3, #25
 80057b0:	f53f af2c 	bmi.w	800560c <_svfiprintf_r+0x28>
 80057b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057b6:	b01d      	add	sp, #116	; 0x74
 80057b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057bc:	ab03      	add	r3, sp, #12
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	462a      	mov	r2, r5
 80057c2:	4b06      	ldr	r3, [pc, #24]	; (80057dc <_svfiprintf_r+0x1f8>)
 80057c4:	a904      	add	r1, sp, #16
 80057c6:	4638      	mov	r0, r7
 80057c8:	f000 f87a 	bl	80058c0 <_printf_i>
 80057cc:	e7eb      	b.n	80057a6 <_svfiprintf_r+0x1c2>
 80057ce:	bf00      	nop
 80057d0:	08005dd4 	.word	0x08005dd4
 80057d4:	08005dde 	.word	0x08005dde
 80057d8:	00000000 	.word	0x00000000
 80057dc:	0800552d 	.word	0x0800552d
 80057e0:	08005dda 	.word	0x08005dda

080057e4 <_printf_common>:
 80057e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e8:	4616      	mov	r6, r2
 80057ea:	4699      	mov	r9, r3
 80057ec:	688a      	ldr	r2, [r1, #8]
 80057ee:	690b      	ldr	r3, [r1, #16]
 80057f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057f4:	4293      	cmp	r3, r2
 80057f6:	bfb8      	it	lt
 80057f8:	4613      	movlt	r3, r2
 80057fa:	6033      	str	r3, [r6, #0]
 80057fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005800:	4607      	mov	r7, r0
 8005802:	460c      	mov	r4, r1
 8005804:	b10a      	cbz	r2, 800580a <_printf_common+0x26>
 8005806:	3301      	adds	r3, #1
 8005808:	6033      	str	r3, [r6, #0]
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	0699      	lsls	r1, r3, #26
 800580e:	bf42      	ittt	mi
 8005810:	6833      	ldrmi	r3, [r6, #0]
 8005812:	3302      	addmi	r3, #2
 8005814:	6033      	strmi	r3, [r6, #0]
 8005816:	6825      	ldr	r5, [r4, #0]
 8005818:	f015 0506 	ands.w	r5, r5, #6
 800581c:	d106      	bne.n	800582c <_printf_common+0x48>
 800581e:	f104 0a19 	add.w	sl, r4, #25
 8005822:	68e3      	ldr	r3, [r4, #12]
 8005824:	6832      	ldr	r2, [r6, #0]
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	42ab      	cmp	r3, r5
 800582a:	dc26      	bgt.n	800587a <_printf_common+0x96>
 800582c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005830:	1e13      	subs	r3, r2, #0
 8005832:	6822      	ldr	r2, [r4, #0]
 8005834:	bf18      	it	ne
 8005836:	2301      	movne	r3, #1
 8005838:	0692      	lsls	r2, r2, #26
 800583a:	d42b      	bmi.n	8005894 <_printf_common+0xb0>
 800583c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005840:	4649      	mov	r1, r9
 8005842:	4638      	mov	r0, r7
 8005844:	47c0      	blx	r8
 8005846:	3001      	adds	r0, #1
 8005848:	d01e      	beq.n	8005888 <_printf_common+0xa4>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	68e5      	ldr	r5, [r4, #12]
 800584e:	6832      	ldr	r2, [r6, #0]
 8005850:	f003 0306 	and.w	r3, r3, #6
 8005854:	2b04      	cmp	r3, #4
 8005856:	bf08      	it	eq
 8005858:	1aad      	subeq	r5, r5, r2
 800585a:	68a3      	ldr	r3, [r4, #8]
 800585c:	6922      	ldr	r2, [r4, #16]
 800585e:	bf0c      	ite	eq
 8005860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005864:	2500      	movne	r5, #0
 8005866:	4293      	cmp	r3, r2
 8005868:	bfc4      	itt	gt
 800586a:	1a9b      	subgt	r3, r3, r2
 800586c:	18ed      	addgt	r5, r5, r3
 800586e:	2600      	movs	r6, #0
 8005870:	341a      	adds	r4, #26
 8005872:	42b5      	cmp	r5, r6
 8005874:	d11a      	bne.n	80058ac <_printf_common+0xc8>
 8005876:	2000      	movs	r0, #0
 8005878:	e008      	b.n	800588c <_printf_common+0xa8>
 800587a:	2301      	movs	r3, #1
 800587c:	4652      	mov	r2, sl
 800587e:	4649      	mov	r1, r9
 8005880:	4638      	mov	r0, r7
 8005882:	47c0      	blx	r8
 8005884:	3001      	adds	r0, #1
 8005886:	d103      	bne.n	8005890 <_printf_common+0xac>
 8005888:	f04f 30ff 	mov.w	r0, #4294967295
 800588c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005890:	3501      	adds	r5, #1
 8005892:	e7c6      	b.n	8005822 <_printf_common+0x3e>
 8005894:	18e1      	adds	r1, r4, r3
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	2030      	movs	r0, #48	; 0x30
 800589a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800589e:	4422      	add	r2, r4
 80058a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058a8:	3302      	adds	r3, #2
 80058aa:	e7c7      	b.n	800583c <_printf_common+0x58>
 80058ac:	2301      	movs	r3, #1
 80058ae:	4622      	mov	r2, r4
 80058b0:	4649      	mov	r1, r9
 80058b2:	4638      	mov	r0, r7
 80058b4:	47c0      	blx	r8
 80058b6:	3001      	adds	r0, #1
 80058b8:	d0e6      	beq.n	8005888 <_printf_common+0xa4>
 80058ba:	3601      	adds	r6, #1
 80058bc:	e7d9      	b.n	8005872 <_printf_common+0x8e>
	...

080058c0 <_printf_i>:
 80058c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058c4:	460c      	mov	r4, r1
 80058c6:	4691      	mov	r9, r2
 80058c8:	7e27      	ldrb	r7, [r4, #24]
 80058ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058cc:	2f78      	cmp	r7, #120	; 0x78
 80058ce:	4680      	mov	r8, r0
 80058d0:	469a      	mov	sl, r3
 80058d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058d6:	d807      	bhi.n	80058e8 <_printf_i+0x28>
 80058d8:	2f62      	cmp	r7, #98	; 0x62
 80058da:	d80a      	bhi.n	80058f2 <_printf_i+0x32>
 80058dc:	2f00      	cmp	r7, #0
 80058de:	f000 80d8 	beq.w	8005a92 <_printf_i+0x1d2>
 80058e2:	2f58      	cmp	r7, #88	; 0x58
 80058e4:	f000 80a3 	beq.w	8005a2e <_printf_i+0x16e>
 80058e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058f0:	e03a      	b.n	8005968 <_printf_i+0xa8>
 80058f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058f6:	2b15      	cmp	r3, #21
 80058f8:	d8f6      	bhi.n	80058e8 <_printf_i+0x28>
 80058fa:	a001      	add	r0, pc, #4	; (adr r0, 8005900 <_printf_i+0x40>)
 80058fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005900:	08005959 	.word	0x08005959
 8005904:	0800596d 	.word	0x0800596d
 8005908:	080058e9 	.word	0x080058e9
 800590c:	080058e9 	.word	0x080058e9
 8005910:	080058e9 	.word	0x080058e9
 8005914:	080058e9 	.word	0x080058e9
 8005918:	0800596d 	.word	0x0800596d
 800591c:	080058e9 	.word	0x080058e9
 8005920:	080058e9 	.word	0x080058e9
 8005924:	080058e9 	.word	0x080058e9
 8005928:	080058e9 	.word	0x080058e9
 800592c:	08005a79 	.word	0x08005a79
 8005930:	0800599d 	.word	0x0800599d
 8005934:	08005a5b 	.word	0x08005a5b
 8005938:	080058e9 	.word	0x080058e9
 800593c:	080058e9 	.word	0x080058e9
 8005940:	08005a9b 	.word	0x08005a9b
 8005944:	080058e9 	.word	0x080058e9
 8005948:	0800599d 	.word	0x0800599d
 800594c:	080058e9 	.word	0x080058e9
 8005950:	080058e9 	.word	0x080058e9
 8005954:	08005a63 	.word	0x08005a63
 8005958:	680b      	ldr	r3, [r1, #0]
 800595a:	1d1a      	adds	r2, r3, #4
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	600a      	str	r2, [r1, #0]
 8005960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005968:	2301      	movs	r3, #1
 800596a:	e0a3      	b.n	8005ab4 <_printf_i+0x1f4>
 800596c:	6825      	ldr	r5, [r4, #0]
 800596e:	6808      	ldr	r0, [r1, #0]
 8005970:	062e      	lsls	r6, r5, #24
 8005972:	f100 0304 	add.w	r3, r0, #4
 8005976:	d50a      	bpl.n	800598e <_printf_i+0xce>
 8005978:	6805      	ldr	r5, [r0, #0]
 800597a:	600b      	str	r3, [r1, #0]
 800597c:	2d00      	cmp	r5, #0
 800597e:	da03      	bge.n	8005988 <_printf_i+0xc8>
 8005980:	232d      	movs	r3, #45	; 0x2d
 8005982:	426d      	negs	r5, r5
 8005984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005988:	485e      	ldr	r0, [pc, #376]	; (8005b04 <_printf_i+0x244>)
 800598a:	230a      	movs	r3, #10
 800598c:	e019      	b.n	80059c2 <_printf_i+0x102>
 800598e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005992:	6805      	ldr	r5, [r0, #0]
 8005994:	600b      	str	r3, [r1, #0]
 8005996:	bf18      	it	ne
 8005998:	b22d      	sxthne	r5, r5
 800599a:	e7ef      	b.n	800597c <_printf_i+0xbc>
 800599c:	680b      	ldr	r3, [r1, #0]
 800599e:	6825      	ldr	r5, [r4, #0]
 80059a0:	1d18      	adds	r0, r3, #4
 80059a2:	6008      	str	r0, [r1, #0]
 80059a4:	0628      	lsls	r0, r5, #24
 80059a6:	d501      	bpl.n	80059ac <_printf_i+0xec>
 80059a8:	681d      	ldr	r5, [r3, #0]
 80059aa:	e002      	b.n	80059b2 <_printf_i+0xf2>
 80059ac:	0669      	lsls	r1, r5, #25
 80059ae:	d5fb      	bpl.n	80059a8 <_printf_i+0xe8>
 80059b0:	881d      	ldrh	r5, [r3, #0]
 80059b2:	4854      	ldr	r0, [pc, #336]	; (8005b04 <_printf_i+0x244>)
 80059b4:	2f6f      	cmp	r7, #111	; 0x6f
 80059b6:	bf0c      	ite	eq
 80059b8:	2308      	moveq	r3, #8
 80059ba:	230a      	movne	r3, #10
 80059bc:	2100      	movs	r1, #0
 80059be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059c2:	6866      	ldr	r6, [r4, #4]
 80059c4:	60a6      	str	r6, [r4, #8]
 80059c6:	2e00      	cmp	r6, #0
 80059c8:	bfa2      	ittt	ge
 80059ca:	6821      	ldrge	r1, [r4, #0]
 80059cc:	f021 0104 	bicge.w	r1, r1, #4
 80059d0:	6021      	strge	r1, [r4, #0]
 80059d2:	b90d      	cbnz	r5, 80059d8 <_printf_i+0x118>
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	d04d      	beq.n	8005a74 <_printf_i+0x1b4>
 80059d8:	4616      	mov	r6, r2
 80059da:	fbb5 f1f3 	udiv	r1, r5, r3
 80059de:	fb03 5711 	mls	r7, r3, r1, r5
 80059e2:	5dc7      	ldrb	r7, [r0, r7]
 80059e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059e8:	462f      	mov	r7, r5
 80059ea:	42bb      	cmp	r3, r7
 80059ec:	460d      	mov	r5, r1
 80059ee:	d9f4      	bls.n	80059da <_printf_i+0x11a>
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d10b      	bne.n	8005a0c <_printf_i+0x14c>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	07df      	lsls	r7, r3, #31
 80059f8:	d508      	bpl.n	8005a0c <_printf_i+0x14c>
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	6861      	ldr	r1, [r4, #4]
 80059fe:	4299      	cmp	r1, r3
 8005a00:	bfde      	ittt	le
 8005a02:	2330      	movle	r3, #48	; 0x30
 8005a04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a0c:	1b92      	subs	r2, r2, r6
 8005a0e:	6122      	str	r2, [r4, #16]
 8005a10:	f8cd a000 	str.w	sl, [sp]
 8005a14:	464b      	mov	r3, r9
 8005a16:	aa03      	add	r2, sp, #12
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	f7ff fee2 	bl	80057e4 <_printf_common>
 8005a20:	3001      	adds	r0, #1
 8005a22:	d14c      	bne.n	8005abe <_printf_i+0x1fe>
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	b004      	add	sp, #16
 8005a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2e:	4835      	ldr	r0, [pc, #212]	; (8005b04 <_printf_i+0x244>)
 8005a30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	680e      	ldr	r6, [r1, #0]
 8005a38:	061f      	lsls	r7, r3, #24
 8005a3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a3e:	600e      	str	r6, [r1, #0]
 8005a40:	d514      	bpl.n	8005a6c <_printf_i+0x1ac>
 8005a42:	07d9      	lsls	r1, r3, #31
 8005a44:	bf44      	itt	mi
 8005a46:	f043 0320 	orrmi.w	r3, r3, #32
 8005a4a:	6023      	strmi	r3, [r4, #0]
 8005a4c:	b91d      	cbnz	r5, 8005a56 <_printf_i+0x196>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	f023 0320 	bic.w	r3, r3, #32
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	2310      	movs	r3, #16
 8005a58:	e7b0      	b.n	80059bc <_printf_i+0xfc>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	f043 0320 	orr.w	r3, r3, #32
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	2378      	movs	r3, #120	; 0x78
 8005a64:	4828      	ldr	r0, [pc, #160]	; (8005b08 <_printf_i+0x248>)
 8005a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a6a:	e7e3      	b.n	8005a34 <_printf_i+0x174>
 8005a6c:	065e      	lsls	r6, r3, #25
 8005a6e:	bf48      	it	mi
 8005a70:	b2ad      	uxthmi	r5, r5
 8005a72:	e7e6      	b.n	8005a42 <_printf_i+0x182>
 8005a74:	4616      	mov	r6, r2
 8005a76:	e7bb      	b.n	80059f0 <_printf_i+0x130>
 8005a78:	680b      	ldr	r3, [r1, #0]
 8005a7a:	6826      	ldr	r6, [r4, #0]
 8005a7c:	6960      	ldr	r0, [r4, #20]
 8005a7e:	1d1d      	adds	r5, r3, #4
 8005a80:	600d      	str	r5, [r1, #0]
 8005a82:	0635      	lsls	r5, r6, #24
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	d501      	bpl.n	8005a8c <_printf_i+0x1cc>
 8005a88:	6018      	str	r0, [r3, #0]
 8005a8a:	e002      	b.n	8005a92 <_printf_i+0x1d2>
 8005a8c:	0671      	lsls	r1, r6, #25
 8005a8e:	d5fb      	bpl.n	8005a88 <_printf_i+0x1c8>
 8005a90:	8018      	strh	r0, [r3, #0]
 8005a92:	2300      	movs	r3, #0
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	4616      	mov	r6, r2
 8005a98:	e7ba      	b.n	8005a10 <_printf_i+0x150>
 8005a9a:	680b      	ldr	r3, [r1, #0]
 8005a9c:	1d1a      	adds	r2, r3, #4
 8005a9e:	600a      	str	r2, [r1, #0]
 8005aa0:	681e      	ldr	r6, [r3, #0]
 8005aa2:	6862      	ldr	r2, [r4, #4]
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f7fa fba2 	bl	80001f0 <memchr>
 8005aac:	b108      	cbz	r0, 8005ab2 <_printf_i+0x1f2>
 8005aae:	1b80      	subs	r0, r0, r6
 8005ab0:	6060      	str	r0, [r4, #4]
 8005ab2:	6863      	ldr	r3, [r4, #4]
 8005ab4:	6123      	str	r3, [r4, #16]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005abc:	e7a8      	b.n	8005a10 <_printf_i+0x150>
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	47d0      	blx	sl
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d0ab      	beq.n	8005a24 <_printf_i+0x164>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	079b      	lsls	r3, r3, #30
 8005ad0:	d413      	bmi.n	8005afa <_printf_i+0x23a>
 8005ad2:	68e0      	ldr	r0, [r4, #12]
 8005ad4:	9b03      	ldr	r3, [sp, #12]
 8005ad6:	4298      	cmp	r0, r3
 8005ad8:	bfb8      	it	lt
 8005ada:	4618      	movlt	r0, r3
 8005adc:	e7a4      	b.n	8005a28 <_printf_i+0x168>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	47d0      	blx	sl
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d09b      	beq.n	8005a24 <_printf_i+0x164>
 8005aec:	3501      	adds	r5, #1
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	9903      	ldr	r1, [sp, #12]
 8005af2:	1a5b      	subs	r3, r3, r1
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dcf2      	bgt.n	8005ade <_printf_i+0x21e>
 8005af8:	e7eb      	b.n	8005ad2 <_printf_i+0x212>
 8005afa:	2500      	movs	r5, #0
 8005afc:	f104 0619 	add.w	r6, r4, #25
 8005b00:	e7f5      	b.n	8005aee <_printf_i+0x22e>
 8005b02:	bf00      	nop
 8005b04:	08005de5 	.word	0x08005de5
 8005b08:	08005df6 	.word	0x08005df6

08005b0c <memcpy>:
 8005b0c:	440a      	add	r2, r1
 8005b0e:	4291      	cmp	r1, r2
 8005b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b14:	d100      	bne.n	8005b18 <memcpy+0xc>
 8005b16:	4770      	bx	lr
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b22:	4291      	cmp	r1, r2
 8005b24:	d1f9      	bne.n	8005b1a <memcpy+0xe>
 8005b26:	bd10      	pop	{r4, pc}

08005b28 <memmove>:
 8005b28:	4288      	cmp	r0, r1
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	eb01 0402 	add.w	r4, r1, r2
 8005b30:	d902      	bls.n	8005b38 <memmove+0x10>
 8005b32:	4284      	cmp	r4, r0
 8005b34:	4623      	mov	r3, r4
 8005b36:	d807      	bhi.n	8005b48 <memmove+0x20>
 8005b38:	1e43      	subs	r3, r0, #1
 8005b3a:	42a1      	cmp	r1, r4
 8005b3c:	d008      	beq.n	8005b50 <memmove+0x28>
 8005b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b46:	e7f8      	b.n	8005b3a <memmove+0x12>
 8005b48:	4402      	add	r2, r0
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	428a      	cmp	r2, r1
 8005b4e:	d100      	bne.n	8005b52 <memmove+0x2a>
 8005b50:	bd10      	pop	{r4, pc}
 8005b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b5a:	e7f7      	b.n	8005b4c <memmove+0x24>

08005b5c <_free_r>:
 8005b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	d048      	beq.n	8005bf4 <_free_r+0x98>
 8005b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b66:	9001      	str	r0, [sp, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b6e:	bfb8      	it	lt
 8005b70:	18e4      	addlt	r4, r4, r3
 8005b72:	f000 f8d3 	bl	8005d1c <__malloc_lock>
 8005b76:	4a20      	ldr	r2, [pc, #128]	; (8005bf8 <_free_r+0x9c>)
 8005b78:	9801      	ldr	r0, [sp, #4]
 8005b7a:	6813      	ldr	r3, [r2, #0]
 8005b7c:	4615      	mov	r5, r2
 8005b7e:	b933      	cbnz	r3, 8005b8e <_free_r+0x32>
 8005b80:	6063      	str	r3, [r4, #4]
 8005b82:	6014      	str	r4, [r2, #0]
 8005b84:	b003      	add	sp, #12
 8005b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b8a:	f000 b8cd 	b.w	8005d28 <__malloc_unlock>
 8005b8e:	42a3      	cmp	r3, r4
 8005b90:	d90b      	bls.n	8005baa <_free_r+0x4e>
 8005b92:	6821      	ldr	r1, [r4, #0]
 8005b94:	1862      	adds	r2, r4, r1
 8005b96:	4293      	cmp	r3, r2
 8005b98:	bf04      	itt	eq
 8005b9a:	681a      	ldreq	r2, [r3, #0]
 8005b9c:	685b      	ldreq	r3, [r3, #4]
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	bf04      	itt	eq
 8005ba2:	1852      	addeq	r2, r2, r1
 8005ba4:	6022      	streq	r2, [r4, #0]
 8005ba6:	602c      	str	r4, [r5, #0]
 8005ba8:	e7ec      	b.n	8005b84 <_free_r+0x28>
 8005baa:	461a      	mov	r2, r3
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b10b      	cbz	r3, 8005bb4 <_free_r+0x58>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d9fa      	bls.n	8005baa <_free_r+0x4e>
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	1855      	adds	r5, r2, r1
 8005bb8:	42a5      	cmp	r5, r4
 8005bba:	d10b      	bne.n	8005bd4 <_free_r+0x78>
 8005bbc:	6824      	ldr	r4, [r4, #0]
 8005bbe:	4421      	add	r1, r4
 8005bc0:	1854      	adds	r4, r2, r1
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	6011      	str	r1, [r2, #0]
 8005bc6:	d1dd      	bne.n	8005b84 <_free_r+0x28>
 8005bc8:	681c      	ldr	r4, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	6053      	str	r3, [r2, #4]
 8005bce:	4421      	add	r1, r4
 8005bd0:	6011      	str	r1, [r2, #0]
 8005bd2:	e7d7      	b.n	8005b84 <_free_r+0x28>
 8005bd4:	d902      	bls.n	8005bdc <_free_r+0x80>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	6003      	str	r3, [r0, #0]
 8005bda:	e7d3      	b.n	8005b84 <_free_r+0x28>
 8005bdc:	6825      	ldr	r5, [r4, #0]
 8005bde:	1961      	adds	r1, r4, r5
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf04      	itt	eq
 8005be4:	6819      	ldreq	r1, [r3, #0]
 8005be6:	685b      	ldreq	r3, [r3, #4]
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	bf04      	itt	eq
 8005bec:	1949      	addeq	r1, r1, r5
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	6054      	str	r4, [r2, #4]
 8005bf2:	e7c7      	b.n	8005b84 <_free_r+0x28>
 8005bf4:	b003      	add	sp, #12
 8005bf6:	bd30      	pop	{r4, r5, pc}
 8005bf8:	20000110 	.word	0x20000110

08005bfc <_malloc_r>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	1ccd      	adds	r5, r1, #3
 8005c00:	f025 0503 	bic.w	r5, r5, #3
 8005c04:	3508      	adds	r5, #8
 8005c06:	2d0c      	cmp	r5, #12
 8005c08:	bf38      	it	cc
 8005c0a:	250c      	movcc	r5, #12
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	4606      	mov	r6, r0
 8005c10:	db01      	blt.n	8005c16 <_malloc_r+0x1a>
 8005c12:	42a9      	cmp	r1, r5
 8005c14:	d903      	bls.n	8005c1e <_malloc_r+0x22>
 8005c16:	230c      	movs	r3, #12
 8005c18:	6033      	str	r3, [r6, #0]
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c1e:	f000 f87d 	bl	8005d1c <__malloc_lock>
 8005c22:	4921      	ldr	r1, [pc, #132]	; (8005ca8 <_malloc_r+0xac>)
 8005c24:	680a      	ldr	r2, [r1, #0]
 8005c26:	4614      	mov	r4, r2
 8005c28:	b99c      	cbnz	r4, 8005c52 <_malloc_r+0x56>
 8005c2a:	4f20      	ldr	r7, [pc, #128]	; (8005cac <_malloc_r+0xb0>)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	b923      	cbnz	r3, 8005c3a <_malloc_r+0x3e>
 8005c30:	4621      	mov	r1, r4
 8005c32:	4630      	mov	r0, r6
 8005c34:	f000 f862 	bl	8005cfc <_sbrk_r>
 8005c38:	6038      	str	r0, [r7, #0]
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f85d 	bl	8005cfc <_sbrk_r>
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	d123      	bne.n	8005c8e <_malloc_r+0x92>
 8005c46:	230c      	movs	r3, #12
 8005c48:	6033      	str	r3, [r6, #0]
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f000 f86c 	bl	8005d28 <__malloc_unlock>
 8005c50:	e7e3      	b.n	8005c1a <_malloc_r+0x1e>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	1b5b      	subs	r3, r3, r5
 8005c56:	d417      	bmi.n	8005c88 <_malloc_r+0x8c>
 8005c58:	2b0b      	cmp	r3, #11
 8005c5a:	d903      	bls.n	8005c64 <_malloc_r+0x68>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	441c      	add	r4, r3
 8005c60:	6025      	str	r5, [r4, #0]
 8005c62:	e004      	b.n	8005c6e <_malloc_r+0x72>
 8005c64:	6863      	ldr	r3, [r4, #4]
 8005c66:	42a2      	cmp	r2, r4
 8005c68:	bf0c      	ite	eq
 8005c6a:	600b      	streq	r3, [r1, #0]
 8005c6c:	6053      	strne	r3, [r2, #4]
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f000 f85a 	bl	8005d28 <__malloc_unlock>
 8005c74:	f104 000b 	add.w	r0, r4, #11
 8005c78:	1d23      	adds	r3, r4, #4
 8005c7a:	f020 0007 	bic.w	r0, r0, #7
 8005c7e:	1ac2      	subs	r2, r0, r3
 8005c80:	d0cc      	beq.n	8005c1c <_malloc_r+0x20>
 8005c82:	1a1b      	subs	r3, r3, r0
 8005c84:	50a3      	str	r3, [r4, r2]
 8005c86:	e7c9      	b.n	8005c1c <_malloc_r+0x20>
 8005c88:	4622      	mov	r2, r4
 8005c8a:	6864      	ldr	r4, [r4, #4]
 8005c8c:	e7cc      	b.n	8005c28 <_malloc_r+0x2c>
 8005c8e:	1cc4      	adds	r4, r0, #3
 8005c90:	f024 0403 	bic.w	r4, r4, #3
 8005c94:	42a0      	cmp	r0, r4
 8005c96:	d0e3      	beq.n	8005c60 <_malloc_r+0x64>
 8005c98:	1a21      	subs	r1, r4, r0
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f000 f82e 	bl	8005cfc <_sbrk_r>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d1dd      	bne.n	8005c60 <_malloc_r+0x64>
 8005ca4:	e7cf      	b.n	8005c46 <_malloc_r+0x4a>
 8005ca6:	bf00      	nop
 8005ca8:	20000110 	.word	0x20000110
 8005cac:	20000114 	.word	0x20000114

08005cb0 <_realloc_r>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	4607      	mov	r7, r0
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	460e      	mov	r6, r1
 8005cb8:	b921      	cbnz	r1, 8005cc4 <_realloc_r+0x14>
 8005cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	f7ff bf9c 	b.w	8005bfc <_malloc_r>
 8005cc4:	b922      	cbnz	r2, 8005cd0 <_realloc_r+0x20>
 8005cc6:	f7ff ff49 	bl	8005b5c <_free_r>
 8005cca:	4625      	mov	r5, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cd0:	f000 f830 	bl	8005d34 <_malloc_usable_size_r>
 8005cd4:	42a0      	cmp	r0, r4
 8005cd6:	d20f      	bcs.n	8005cf8 <_realloc_r+0x48>
 8005cd8:	4621      	mov	r1, r4
 8005cda:	4638      	mov	r0, r7
 8005cdc:	f7ff ff8e 	bl	8005bfc <_malloc_r>
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d0f2      	beq.n	8005ccc <_realloc_r+0x1c>
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4622      	mov	r2, r4
 8005cea:	f7ff ff0f 	bl	8005b0c <memcpy>
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	f7ff ff33 	bl	8005b5c <_free_r>
 8005cf6:	e7e9      	b.n	8005ccc <_realloc_r+0x1c>
 8005cf8:	4635      	mov	r5, r6
 8005cfa:	e7e7      	b.n	8005ccc <_realloc_r+0x1c>

08005cfc <_sbrk_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	4d06      	ldr	r5, [pc, #24]	; (8005d18 <_sbrk_r+0x1c>)
 8005d00:	2300      	movs	r3, #0
 8005d02:	4604      	mov	r4, r0
 8005d04:	4608      	mov	r0, r1
 8005d06:	602b      	str	r3, [r5, #0]
 8005d08:	f7fb fcae 	bl	8001668 <_sbrk>
 8005d0c:	1c43      	adds	r3, r0, #1
 8005d0e:	d102      	bne.n	8005d16 <_sbrk_r+0x1a>
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	b103      	cbz	r3, 8005d16 <_sbrk_r+0x1a>
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
 8005d18:	20000300 	.word	0x20000300

08005d1c <__malloc_lock>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	; (8005d24 <__malloc_lock+0x8>)
 8005d1e:	f000 b811 	b.w	8005d44 <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	20000308 	.word	0x20000308

08005d28 <__malloc_unlock>:
 8005d28:	4801      	ldr	r0, [pc, #4]	; (8005d30 <__malloc_unlock+0x8>)
 8005d2a:	f000 b80c 	b.w	8005d46 <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	20000308 	.word	0x20000308

08005d34 <_malloc_usable_size_r>:
 8005d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d38:	1f18      	subs	r0, r3, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bfbc      	itt	lt
 8005d3e:	580b      	ldrlt	r3, [r1, r0]
 8005d40:	18c0      	addlt	r0, r0, r3
 8005d42:	4770      	bx	lr

08005d44 <__retarget_lock_acquire_recursive>:
 8005d44:	4770      	bx	lr

08005d46 <__retarget_lock_release_recursive>:
 8005d46:	4770      	bx	lr

08005d48 <_init>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	bf00      	nop
 8005d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4e:	bc08      	pop	{r3}
 8005d50:	469e      	mov	lr, r3
 8005d52:	4770      	bx	lr

08005d54 <_fini>:
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d56:	bf00      	nop
 8005d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5a:	bc08      	pop	{r3}
 8005d5c:	469e      	mov	lr, r3
 8005d5e:	4770      	bx	lr
