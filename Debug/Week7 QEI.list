
Week7 QEI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f38  08005f38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f40  08005f40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000078  08005fbc  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005fbc  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6b6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002178  00000000  00000000  0002f75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000318d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  000326f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c2c  00000000  00000000  00033450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2c7  00000000  00000000  0004b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a0b5  00000000  00000000  0005a343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f43f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe8  00000000  00000000  000f444c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e78 	.word	0x08005e78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08005e78 	.word	0x08005e78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_frsub>:
 8000290:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__addsf3>
 8000296:	bf00      	nop

08000298 <__aeabi_fsub>:
 8000298:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800029c <__addsf3>:
 800029c:	0042      	lsls	r2, r0, #1
 800029e:	bf1f      	itttt	ne
 80002a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002a4:	ea92 0f03 	teqne	r2, r3
 80002a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002b0:	d06a      	beq.n	8000388 <__addsf3+0xec>
 80002b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002ba:	bfc1      	itttt	gt
 80002bc:	18d2      	addgt	r2, r2, r3
 80002be:	4041      	eorgt	r1, r0
 80002c0:	4048      	eorgt	r0, r1
 80002c2:	4041      	eorgt	r1, r0
 80002c4:	bfb8      	it	lt
 80002c6:	425b      	neglt	r3, r3
 80002c8:	2b19      	cmp	r3, #25
 80002ca:	bf88      	it	hi
 80002cc:	4770      	bxhi	lr
 80002ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4240      	negne	r0, r0
 80002de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002ea:	bf18      	it	ne
 80002ec:	4249      	negne	r1, r1
 80002ee:	ea92 0f03 	teq	r2, r3
 80002f2:	d03f      	beq.n	8000374 <__addsf3+0xd8>
 80002f4:	f1a2 0201 	sub.w	r2, r2, #1
 80002f8:	fa41 fc03 	asr.w	ip, r1, r3
 80002fc:	eb10 000c 	adds.w	r0, r0, ip
 8000300:	f1c3 0320 	rsb	r3, r3, #32
 8000304:	fa01 f103 	lsl.w	r1, r1, r3
 8000308:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__addsf3+0x78>
 800030e:	4249      	negs	r1, r1
 8000310:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000314:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000318:	d313      	bcc.n	8000342 <__addsf3+0xa6>
 800031a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800031e:	d306      	bcc.n	800032e <__addsf3+0x92>
 8000320:	0840      	lsrs	r0, r0, #1
 8000322:	ea4f 0131 	mov.w	r1, r1, rrx
 8000326:	f102 0201 	add.w	r2, r2, #1
 800032a:	2afe      	cmp	r2, #254	; 0xfe
 800032c:	d251      	bcs.n	80003d2 <__addsf3+0x136>
 800032e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000332:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000336:	bf08      	it	eq
 8000338:	f020 0001 	biceq.w	r0, r0, #1
 800033c:	ea40 0003 	orr.w	r0, r0, r3
 8000340:	4770      	bx	lr
 8000342:	0049      	lsls	r1, r1, #1
 8000344:	eb40 0000 	adc.w	r0, r0, r0
 8000348:	3a01      	subs	r2, #1
 800034a:	bf28      	it	cs
 800034c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000350:	d2ed      	bcs.n	800032e <__addsf3+0x92>
 8000352:	fab0 fc80 	clz	ip, r0
 8000356:	f1ac 0c08 	sub.w	ip, ip, #8
 800035a:	ebb2 020c 	subs.w	r2, r2, ip
 800035e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000362:	bfaa      	itet	ge
 8000364:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000368:	4252      	neglt	r2, r2
 800036a:	4318      	orrge	r0, r3
 800036c:	bfbc      	itt	lt
 800036e:	40d0      	lsrlt	r0, r2
 8000370:	4318      	orrlt	r0, r3
 8000372:	4770      	bx	lr
 8000374:	f092 0f00 	teq	r2, #0
 8000378:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800037c:	bf06      	itte	eq
 800037e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000382:	3201      	addeq	r2, #1
 8000384:	3b01      	subne	r3, #1
 8000386:	e7b5      	b.n	80002f4 <__addsf3+0x58>
 8000388:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800038c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000390:	bf18      	it	ne
 8000392:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000396:	d021      	beq.n	80003dc <__addsf3+0x140>
 8000398:	ea92 0f03 	teq	r2, r3
 800039c:	d004      	beq.n	80003a8 <__addsf3+0x10c>
 800039e:	f092 0f00 	teq	r2, #0
 80003a2:	bf08      	it	eq
 80003a4:	4608      	moveq	r0, r1
 80003a6:	4770      	bx	lr
 80003a8:	ea90 0f01 	teq	r0, r1
 80003ac:	bf1c      	itt	ne
 80003ae:	2000      	movne	r0, #0
 80003b0:	4770      	bxne	lr
 80003b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003b6:	d104      	bne.n	80003c2 <__addsf3+0x126>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	bf28      	it	cs
 80003bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003c0:	4770      	bx	lr
 80003c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003c6:	bf3c      	itt	cc
 80003c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003cc:	4770      	bxcc	lr
 80003ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003da:	4770      	bx	lr
 80003dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003e0:	bf16      	itet	ne
 80003e2:	4608      	movne	r0, r1
 80003e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003e8:	4601      	movne	r1, r0
 80003ea:	0242      	lsls	r2, r0, #9
 80003ec:	bf06      	itte	eq
 80003ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003f2:	ea90 0f01 	teqeq	r0, r1
 80003f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003fa:	4770      	bx	lr

080003fc <__aeabi_ui2f>:
 80003fc:	f04f 0300 	mov.w	r3, #0
 8000400:	e004      	b.n	800040c <__aeabi_i2f+0x8>
 8000402:	bf00      	nop

08000404 <__aeabi_i2f>:
 8000404:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	ea5f 0c00 	movs.w	ip, r0
 8000410:	bf08      	it	eq
 8000412:	4770      	bxeq	lr
 8000414:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000418:	4601      	mov	r1, r0
 800041a:	f04f 0000 	mov.w	r0, #0
 800041e:	e01c      	b.n	800045a <__aeabi_l2f+0x2a>

08000420 <__aeabi_ul2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f04f 0300 	mov.w	r3, #0
 800042c:	e00a      	b.n	8000444 <__aeabi_l2f+0x14>
 800042e:	bf00      	nop

08000430 <__aeabi_l2f>:
 8000430:	ea50 0201 	orrs.w	r2, r0, r1
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800043c:	d502      	bpl.n	8000444 <__aeabi_l2f+0x14>
 800043e:	4240      	negs	r0, r0
 8000440:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000444:	ea5f 0c01 	movs.w	ip, r1
 8000448:	bf02      	ittt	eq
 800044a:	4684      	moveq	ip, r0
 800044c:	4601      	moveq	r1, r0
 800044e:	2000      	moveq	r0, #0
 8000450:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000454:	bf08      	it	eq
 8000456:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800045a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800045e:	fabc f28c 	clz	r2, ip
 8000462:	3a08      	subs	r2, #8
 8000464:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000468:	db10      	blt.n	800048c <__aeabi_l2f+0x5c>
 800046a:	fa01 fc02 	lsl.w	ip, r1, r2
 800046e:	4463      	add	r3, ip
 8000470:	fa00 fc02 	lsl.w	ip, r0, r2
 8000474:	f1c2 0220 	rsb	r2, r2, #32
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	fa20 f202 	lsr.w	r2, r0, r2
 8000480:	eb43 0002 	adc.w	r0, r3, r2
 8000484:	bf08      	it	eq
 8000486:	f020 0001 	biceq.w	r0, r0, #1
 800048a:	4770      	bx	lr
 800048c:	f102 0220 	add.w	r2, r2, #32
 8000490:	fa01 fc02 	lsl.w	ip, r1, r2
 8000494:	f1c2 0220 	rsb	r2, r2, #32
 8000498:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800049c:	fa21 f202 	lsr.w	r2, r1, r2
 80004a0:	eb43 0002 	adc.w	r0, r3, r2
 80004a4:	bf08      	it	eq
 80004a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004aa:	4770      	bx	lr

080004ac <__aeabi_uldivmod>:
 80004ac:	b953      	cbnz	r3, 80004c4 <__aeabi_uldivmod+0x18>
 80004ae:	b94a      	cbnz	r2, 80004c4 <__aeabi_uldivmod+0x18>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	bf08      	it	eq
 80004b4:	2800      	cmpeq	r0, #0
 80004b6:	bf1c      	itt	ne
 80004b8:	f04f 31ff 	movne.w	r1, #4294967295
 80004bc:	f04f 30ff 	movne.w	r0, #4294967295
 80004c0:	f000 b96e 	b.w	80007a0 <__aeabi_idiv0>
 80004c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80004c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004cc:	f000 f806 	bl	80004dc <__udivmoddi4>
 80004d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004d8:	b004      	add	sp, #16
 80004da:	4770      	bx	lr

080004dc <__udivmoddi4>:
 80004dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004e0:	9d08      	ldr	r5, [sp, #32]
 80004e2:	4604      	mov	r4, r0
 80004e4:	468c      	mov	ip, r1
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	f040 8083 	bne.w	80005f2 <__udivmoddi4+0x116>
 80004ec:	428a      	cmp	r2, r1
 80004ee:	4617      	mov	r7, r2
 80004f0:	d947      	bls.n	8000582 <__udivmoddi4+0xa6>
 80004f2:	fab2 f282 	clz	r2, r2
 80004f6:	b142      	cbz	r2, 800050a <__udivmoddi4+0x2e>
 80004f8:	f1c2 0020 	rsb	r0, r2, #32
 80004fc:	fa24 f000 	lsr.w	r0, r4, r0
 8000500:	4091      	lsls	r1, r2
 8000502:	4097      	lsls	r7, r2
 8000504:	ea40 0c01 	orr.w	ip, r0, r1
 8000508:	4094      	lsls	r4, r2
 800050a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800050e:	0c23      	lsrs	r3, r4, #16
 8000510:	fbbc f6f8 	udiv	r6, ip, r8
 8000514:	fa1f fe87 	uxth.w	lr, r7
 8000518:	fb08 c116 	mls	r1, r8, r6, ip
 800051c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000520:	fb06 f10e 	mul.w	r1, r6, lr
 8000524:	4299      	cmp	r1, r3
 8000526:	d909      	bls.n	800053c <__udivmoddi4+0x60>
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	f106 30ff 	add.w	r0, r6, #4294967295
 800052e:	f080 8119 	bcs.w	8000764 <__udivmoddi4+0x288>
 8000532:	4299      	cmp	r1, r3
 8000534:	f240 8116 	bls.w	8000764 <__udivmoddi4+0x288>
 8000538:	3e02      	subs	r6, #2
 800053a:	443b      	add	r3, r7
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3310 	mls	r3, r8, r0, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000550:	45a6      	cmp	lr, r4
 8000552:	d909      	bls.n	8000568 <__udivmoddi4+0x8c>
 8000554:	193c      	adds	r4, r7, r4
 8000556:	f100 33ff 	add.w	r3, r0, #4294967295
 800055a:	f080 8105 	bcs.w	8000768 <__udivmoddi4+0x28c>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f240 8102 	bls.w	8000768 <__udivmoddi4+0x28c>
 8000564:	3802      	subs	r0, #2
 8000566:	443c      	add	r4, r7
 8000568:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800056c:	eba4 040e 	sub.w	r4, r4, lr
 8000570:	2600      	movs	r6, #0
 8000572:	b11d      	cbz	r5, 800057c <__udivmoddi4+0xa0>
 8000574:	40d4      	lsrs	r4, r2
 8000576:	2300      	movs	r3, #0
 8000578:	e9c5 4300 	strd	r4, r3, [r5]
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	b902      	cbnz	r2, 8000586 <__udivmoddi4+0xaa>
 8000584:	deff      	udf	#255	; 0xff
 8000586:	fab2 f282 	clz	r2, r2
 800058a:	2a00      	cmp	r2, #0
 800058c:	d150      	bne.n	8000630 <__udivmoddi4+0x154>
 800058e:	1bcb      	subs	r3, r1, r7
 8000590:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000594:	fa1f f887 	uxth.w	r8, r7
 8000598:	2601      	movs	r6, #1
 800059a:	fbb3 fcfe 	udiv	ip, r3, lr
 800059e:	0c21      	lsrs	r1, r4, #16
 80005a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80005a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a8:	fb08 f30c 	mul.w	r3, r8, ip
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d907      	bls.n	80005c0 <__udivmoddi4+0xe4>
 80005b0:	1879      	adds	r1, r7, r1
 80005b2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80005b6:	d202      	bcs.n	80005be <__udivmoddi4+0xe2>
 80005b8:	428b      	cmp	r3, r1
 80005ba:	f200 80e9 	bhi.w	8000790 <__udivmoddi4+0x2b4>
 80005be:	4684      	mov	ip, r0
 80005c0:	1ac9      	subs	r1, r1, r3
 80005c2:	b2a3      	uxth	r3, r4
 80005c4:	fbb1 f0fe 	udiv	r0, r1, lr
 80005c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80005cc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80005d0:	fb08 f800 	mul.w	r8, r8, r0
 80005d4:	45a0      	cmp	r8, r4
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x10c>
 80005d8:	193c      	adds	r4, r7, r4
 80005da:	f100 33ff 	add.w	r3, r0, #4294967295
 80005de:	d202      	bcs.n	80005e6 <__udivmoddi4+0x10a>
 80005e0:	45a0      	cmp	r8, r4
 80005e2:	f200 80d9 	bhi.w	8000798 <__udivmoddi4+0x2bc>
 80005e6:	4618      	mov	r0, r3
 80005e8:	eba4 0408 	sub.w	r4, r4, r8
 80005ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005f0:	e7bf      	b.n	8000572 <__udivmoddi4+0x96>
 80005f2:	428b      	cmp	r3, r1
 80005f4:	d909      	bls.n	800060a <__udivmoddi4+0x12e>
 80005f6:	2d00      	cmp	r5, #0
 80005f8:	f000 80b1 	beq.w	800075e <__udivmoddi4+0x282>
 80005fc:	2600      	movs	r6, #0
 80005fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000602:	4630      	mov	r0, r6
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	fab3 f683 	clz	r6, r3
 800060e:	2e00      	cmp	r6, #0
 8000610:	d14a      	bne.n	80006a8 <__udivmoddi4+0x1cc>
 8000612:	428b      	cmp	r3, r1
 8000614:	d302      	bcc.n	800061c <__udivmoddi4+0x140>
 8000616:	4282      	cmp	r2, r0
 8000618:	f200 80b8 	bhi.w	800078c <__udivmoddi4+0x2b0>
 800061c:	1a84      	subs	r4, r0, r2
 800061e:	eb61 0103 	sbc.w	r1, r1, r3
 8000622:	2001      	movs	r0, #1
 8000624:	468c      	mov	ip, r1
 8000626:	2d00      	cmp	r5, #0
 8000628:	d0a8      	beq.n	800057c <__udivmoddi4+0xa0>
 800062a:	e9c5 4c00 	strd	r4, ip, [r5]
 800062e:	e7a5      	b.n	800057c <__udivmoddi4+0xa0>
 8000630:	f1c2 0320 	rsb	r3, r2, #32
 8000634:	fa20 f603 	lsr.w	r6, r0, r3
 8000638:	4097      	lsls	r7, r2
 800063a:	fa01 f002 	lsl.w	r0, r1, r2
 800063e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000642:	40d9      	lsrs	r1, r3
 8000644:	4330      	orrs	r0, r6
 8000646:	0c03      	lsrs	r3, r0, #16
 8000648:	fbb1 f6fe 	udiv	r6, r1, lr
 800064c:	fa1f f887 	uxth.w	r8, r7
 8000650:	fb0e 1116 	mls	r1, lr, r6, r1
 8000654:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000658:	fb06 f108 	mul.w	r1, r6, r8
 800065c:	4299      	cmp	r1, r3
 800065e:	fa04 f402 	lsl.w	r4, r4, r2
 8000662:	d909      	bls.n	8000678 <__udivmoddi4+0x19c>
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	f106 3cff 	add.w	ip, r6, #4294967295
 800066a:	f080 808d 	bcs.w	8000788 <__udivmoddi4+0x2ac>
 800066e:	4299      	cmp	r1, r3
 8000670:	f240 808a 	bls.w	8000788 <__udivmoddi4+0x2ac>
 8000674:	3e02      	subs	r6, #2
 8000676:	443b      	add	r3, r7
 8000678:	1a5b      	subs	r3, r3, r1
 800067a:	b281      	uxth	r1, r0
 800067c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000680:	fb0e 3310 	mls	r3, lr, r0, r3
 8000684:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000688:	fb00 f308 	mul.w	r3, r0, r8
 800068c:	428b      	cmp	r3, r1
 800068e:	d907      	bls.n	80006a0 <__udivmoddi4+0x1c4>
 8000690:	1879      	adds	r1, r7, r1
 8000692:	f100 3cff 	add.w	ip, r0, #4294967295
 8000696:	d273      	bcs.n	8000780 <__udivmoddi4+0x2a4>
 8000698:	428b      	cmp	r3, r1
 800069a:	d971      	bls.n	8000780 <__udivmoddi4+0x2a4>
 800069c:	3802      	subs	r0, #2
 800069e:	4439      	add	r1, r7
 80006a0:	1acb      	subs	r3, r1, r3
 80006a2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80006a6:	e778      	b.n	800059a <__udivmoddi4+0xbe>
 80006a8:	f1c6 0c20 	rsb	ip, r6, #32
 80006ac:	fa03 f406 	lsl.w	r4, r3, r6
 80006b0:	fa22 f30c 	lsr.w	r3, r2, ip
 80006b4:	431c      	orrs	r4, r3
 80006b6:	fa20 f70c 	lsr.w	r7, r0, ip
 80006ba:	fa01 f306 	lsl.w	r3, r1, r6
 80006be:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80006c2:	fa21 f10c 	lsr.w	r1, r1, ip
 80006c6:	431f      	orrs	r7, r3
 80006c8:	0c3b      	lsrs	r3, r7, #16
 80006ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80006ce:	fa1f f884 	uxth.w	r8, r4
 80006d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80006d6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80006da:	fb09 fa08 	mul.w	sl, r9, r8
 80006de:	458a      	cmp	sl, r1
 80006e0:	fa02 f206 	lsl.w	r2, r2, r6
 80006e4:	fa00 f306 	lsl.w	r3, r0, r6
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x220>
 80006ea:	1861      	adds	r1, r4, r1
 80006ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80006f0:	d248      	bcs.n	8000784 <__udivmoddi4+0x2a8>
 80006f2:	458a      	cmp	sl, r1
 80006f4:	d946      	bls.n	8000784 <__udivmoddi4+0x2a8>
 80006f6:	f1a9 0902 	sub.w	r9, r9, #2
 80006fa:	4421      	add	r1, r4
 80006fc:	eba1 010a 	sub.w	r1, r1, sl
 8000700:	b2bf      	uxth	r7, r7
 8000702:	fbb1 f0fe 	udiv	r0, r1, lr
 8000706:	fb0e 1110 	mls	r1, lr, r0, r1
 800070a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800070e:	fb00 f808 	mul.w	r8, r0, r8
 8000712:	45b8      	cmp	r8, r7
 8000714:	d907      	bls.n	8000726 <__udivmoddi4+0x24a>
 8000716:	19e7      	adds	r7, r4, r7
 8000718:	f100 31ff 	add.w	r1, r0, #4294967295
 800071c:	d22e      	bcs.n	800077c <__udivmoddi4+0x2a0>
 800071e:	45b8      	cmp	r8, r7
 8000720:	d92c      	bls.n	800077c <__udivmoddi4+0x2a0>
 8000722:	3802      	subs	r0, #2
 8000724:	4427      	add	r7, r4
 8000726:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800072a:	eba7 0708 	sub.w	r7, r7, r8
 800072e:	fba0 8902 	umull	r8, r9, r0, r2
 8000732:	454f      	cmp	r7, r9
 8000734:	46c6      	mov	lr, r8
 8000736:	4649      	mov	r1, r9
 8000738:	d31a      	bcc.n	8000770 <__udivmoddi4+0x294>
 800073a:	d017      	beq.n	800076c <__udivmoddi4+0x290>
 800073c:	b15d      	cbz	r5, 8000756 <__udivmoddi4+0x27a>
 800073e:	ebb3 020e 	subs.w	r2, r3, lr
 8000742:	eb67 0701 	sbc.w	r7, r7, r1
 8000746:	fa07 fc0c 	lsl.w	ip, r7, ip
 800074a:	40f2      	lsrs	r2, r6
 800074c:	ea4c 0202 	orr.w	r2, ip, r2
 8000750:	40f7      	lsrs	r7, r6
 8000752:	e9c5 2700 	strd	r2, r7, [r5]
 8000756:	2600      	movs	r6, #0
 8000758:	4631      	mov	r1, r6
 800075a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075e:	462e      	mov	r6, r5
 8000760:	4628      	mov	r0, r5
 8000762:	e70b      	b.n	800057c <__udivmoddi4+0xa0>
 8000764:	4606      	mov	r6, r0
 8000766:	e6e9      	b.n	800053c <__udivmoddi4+0x60>
 8000768:	4618      	mov	r0, r3
 800076a:	e6fd      	b.n	8000568 <__udivmoddi4+0x8c>
 800076c:	4543      	cmp	r3, r8
 800076e:	d2e5      	bcs.n	800073c <__udivmoddi4+0x260>
 8000770:	ebb8 0e02 	subs.w	lr, r8, r2
 8000774:	eb69 0104 	sbc.w	r1, r9, r4
 8000778:	3801      	subs	r0, #1
 800077a:	e7df      	b.n	800073c <__udivmoddi4+0x260>
 800077c:	4608      	mov	r0, r1
 800077e:	e7d2      	b.n	8000726 <__udivmoddi4+0x24a>
 8000780:	4660      	mov	r0, ip
 8000782:	e78d      	b.n	80006a0 <__udivmoddi4+0x1c4>
 8000784:	4681      	mov	r9, r0
 8000786:	e7b9      	b.n	80006fc <__udivmoddi4+0x220>
 8000788:	4666      	mov	r6, ip
 800078a:	e775      	b.n	8000678 <__udivmoddi4+0x19c>
 800078c:	4630      	mov	r0, r6
 800078e:	e74a      	b.n	8000626 <__udivmoddi4+0x14a>
 8000790:	f1ac 0c02 	sub.w	ip, ip, #2
 8000794:	4439      	add	r1, r7
 8000796:	e713      	b.n	80005c0 <__udivmoddi4+0xe4>
 8000798:	3802      	subs	r0, #2
 800079a:	443c      	add	r4, r7
 800079c:	e724      	b.n	80005e8 <__udivmoddi4+0x10c>
 800079e:	bf00      	nop

080007a0 <__aeabi_idiv0>:
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80007a8:	ed2d 8b02 	vpush	{d8}
 80007ac:	b08a      	sub	sp, #40	; 0x28
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b0:	f001 f84c 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b4:	f000 f980 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b8:	f000 fb9c 	bl	8000ef4 <MX_GPIO_Init>
  MX_DMA_Init();
 80007bc:	f000 fb7a 	bl	8000eb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007c0:	f000 fb4e 	bl	8000e60 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007c4:	f000 fa32 	bl	8000c2c <MX_TIM1_Init>
  MX_TIM2_Init();
 80007c8:	f000 fa88 	bl	8000cdc <MX_TIM2_Init>
  MX_ADC1_Init();
 80007cc:	f000 f9dc 	bl	8000b88 <MX_ADC1_Init>
  MX_TIM3_Init();
 80007d0:	f000 fad0 	bl	8000d74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80007d4:	48a2      	ldr	r0, [pc, #648]	; (8000a60 <main+0x2bc>)
 80007d6:	f002 ffe7 	bl	80037a8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80007da:	213c      	movs	r1, #60	; 0x3c
 80007dc:	48a1      	ldr	r0, [pc, #644]	; (8000a64 <main+0x2c0>)
 80007de:	f003 f9f5 	bl	8003bcc <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim3);
 80007e2:	48a1      	ldr	r0, [pc, #644]	; (8000a68 <main+0x2c4>)
 80007e4:	f002 ff86 	bl	80036f4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80007e8:	2100      	movs	r1, #0
 80007ea:	489f      	ldr	r0, [pc, #636]	; (8000a68 <main+0x2c4>)
 80007ec:	f003 f898 	bl	8003920 <HAL_TIM_PWM_Start>
	{
	char temp[] = "Hello world\r\n please type something\r\n";
 80007f0:	4b9e      	ldr	r3, [pc, #632]	; (8000a6c <main+0x2c8>)
 80007f2:	463c      	mov	r4, r7
 80007f4:	461d      	mov	r5, r3
 80007f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000802:	6020      	str	r0, [r4, #0]
 8000804:	3404      	adds	r4, #4
 8000806:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)temp,strlen(temp) ,10);
 8000808:	463b      	mov	r3, r7
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fce8 	bl	80001e0 <strlen>
 8000810:	4603      	mov	r3, r0
 8000812:	b29a      	uxth	r2, r3
 8000814:	4639      	mov	r1, r7
 8000816:	230a      	movs	r3, #10
 8000818:	4895      	ldr	r0, [pc, #596]	; (8000a70 <main+0x2cc>)
 800081a:	f004 f8b2 	bl	8004982 <HAL_UART_Transmit>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//UART Part
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 4);
 800081e:	2204      	movs	r2, #4
 8000820:	4994      	ldr	r1, [pc, #592]	; (8000a74 <main+0x2d0>)
 8000822:	4893      	ldr	r0, [pc, #588]	; (8000a70 <main+0x2cc>)
 8000824:	f004 f93f 	bl	8004aa6 <HAL_UART_Receive_IT>
		int16_t inputchar = UARTRecieveIT();
 8000828:	f000 fbe0 	bl	8000fec <UARTRecieveIT>
 800082c:	4603      	mov	r3, r0
 800082e:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(inputchar!=-1)
 8000830:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000838:	d011      	beq.n	800085e <main+0xba>
		{

			sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
 800083a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800083e:	461a      	mov	r2, r3
 8000840:	498d      	ldr	r1, [pc, #564]	; (8000a78 <main+0x2d4>)
 8000842:	488e      	ldr	r0, [pc, #568]	; (8000a7c <main+0x2d8>)
 8000844:	f004 feea 	bl	800561c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000848:	488c      	ldr	r0, [pc, #560]	; (8000a7c <main+0x2d8>)
 800084a:	f7ff fcc9 	bl	80001e0 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	4989      	ldr	r1, [pc, #548]	; (8000a7c <main+0x2d8>)
 8000858:	4885      	ldr	r0, [pc, #532]	; (8000a70 <main+0x2cc>)
 800085a:	f004 f892 	bl	8004982 <HAL_UART_Transmit>
		}


		//PWM set
		if(require>0){
 800085e:	4b88      	ldr	r3, [pc, #544]	; (8000a80 <main+0x2dc>)
 8000860:	edd3 7a00 	vldr	s15, [r3]
 8000864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086c:	dd0a      	ble.n	8000884 <main+0xe0>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 800086e:	2201      	movs	r2, #1
 8000870:	2101      	movs	r1, #1
 8000872:	4884      	ldr	r0, [pc, #528]	; (8000a84 <main+0x2e0>)
 8000874:	f002 fa60 	bl	8002d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2102      	movs	r1, #2
 800087c:	4881      	ldr	r0, [pc, #516]	; (8000a84 <main+0x2e0>)
 800087e:	f002 fa5b 	bl	8002d38 <HAL_GPIO_WritePin>
 8000882:	e011      	b.n	80008a8 <main+0x104>
		}
		else if(require<0){
 8000884:	4b7e      	ldr	r3, [pc, #504]	; (8000a80 <main+0x2dc>)
 8000886:	edd3 7a00 	vldr	s15, [r3]
 800088a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800088e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000892:	d509      	bpl.n	80008a8 <main+0x104>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	487a      	ldr	r0, [pc, #488]	; (8000a84 <main+0x2e0>)
 800089a:	f002 fa4d 	bl	8002d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	2102      	movs	r1, #2
 80008a2:	4878      	ldr	r0, [pc, #480]	; (8000a84 <main+0x2e0>)
 80008a4:	f002 fa48 	bl	8002d38 <HAL_GPIO_WritePin>
		}
		if(pwm<0) pwm =0;
 80008a8:	4b77      	ldr	r3, [pc, #476]	; (8000a88 <main+0x2e4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	da02      	bge.n	80008b6 <main+0x112>
 80008b0:	4b75      	ldr	r3, [pc, #468]	; (8000a88 <main+0x2e4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
		if (micros() - Timestamp_Encoder >= 10000)
 80008b6:	f000 fd0b 	bl	80012d0 <micros>
 80008ba:	4b74      	ldr	r3, [pc, #464]	; (8000a8c <main+0x2e8>)
 80008bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c0:	ebb0 0802 	subs.w	r8, r0, r2
 80008c4:	eb61 0903 	sbc.w	r9, r1, r3
 80008c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80008cc:	f04f 0300 	mov.w	r3, #0
 80008d0:	454b      	cmp	r3, r9
 80008d2:	bf08      	it	eq
 80008d4:	4542      	cmpeq	r2, r8
 80008d6:	d27d      	bcs.n	80009d4 <main+0x230>
		{
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 80008d8:	4b6b      	ldr	r3, [pc, #428]	; (8000a88 <main+0x2e4>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b62      	ldr	r3, [pc, #392]	; (8000a68 <main+0x2c4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
			Timestamp_Encoder = micros();
 80008e2:	f000 fcf5 	bl	80012d0 <micros>
 80008e6:	4602      	mov	r2, r0
 80008e8:	460b      	mov	r3, r1
 80008ea:	4968      	ldr	r1, [pc, #416]	; (8000a8c <main+0x2e8>)
 80008ec:	e9c1 2300 	strd	r2, r3, [r1]
			EncoderVel = (EncoderVel * 2 + EncoderVelocity_Update()) / 3;
 80008f0:	4b67      	ldr	r3, [pc, #412]	; (8000a90 <main+0x2ec>)
 80008f2:	edd3 7a00 	vldr	s15, [r3]
 80008f6:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80008fa:	f000 fc67 	bl	80011cc <EncoderVelocity_Update>
 80008fe:	eef0 7a40 	vmov.f32	s15, s0
 8000902:	ee38 7a27 	vadd.f32	s14, s16, s15
 8000906:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800090a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800090e:	4b60      	ldr	r3, [pc, #384]	; (8000a90 <main+0x2ec>)
 8000910:	edc3 7a00 	vstr	s15, [r3]
			vrpm = EncoderVel / 4072 *60;
 8000914:	4b5e      	ldr	r3, [pc, #376]	; (8000a90 <main+0x2ec>)
 8000916:	ed93 7a00 	vldr	s14, [r3]
 800091a:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8000a94 <main+0x2f0>
 800091e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000922:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000a98 <main+0x2f4>
 8000926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800092a:	4b5c      	ldr	r3, [pc, #368]	; (8000a9c <main+0x2f8>)
 800092c:	edc3 7a00 	vstr	s15, [r3]
			if(require>=0){
 8000930:	4b53      	ldr	r3, [pc, #332]	; (8000a80 <main+0x2dc>)
 8000932:	edd3 7a00 	vldr	s15, [r3]
 8000936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800093a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093e:	db20      	blt.n	8000982 <main+0x1de>
				if(vrpm < require){
 8000940:	4b56      	ldr	r3, [pc, #344]	; (8000a9c <main+0x2f8>)
 8000942:	ed93 7a00 	vldr	s14, [r3]
 8000946:	4b4e      	ldr	r3, [pc, #312]	; (8000a80 <main+0x2dc>)
 8000948:	edd3 7a00 	vldr	s15, [r3]
 800094c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000954:	d505      	bpl.n	8000962 <main+0x1be>
					pwm += 10;
 8000956:	4b4c      	ldr	r3, [pc, #304]	; (8000a88 <main+0x2e4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	330a      	adds	r3, #10
 800095c:	4a4a      	ldr	r2, [pc, #296]	; (8000a88 <main+0x2e4>)
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	e00f      	b.n	8000982 <main+0x1de>
				}
				else if (vrpm>require){
 8000962:	4b4e      	ldr	r3, [pc, #312]	; (8000a9c <main+0x2f8>)
 8000964:	ed93 7a00 	vldr	s14, [r3]
 8000968:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <main+0x2dc>)
 800096a:	edd3 7a00 	vldr	s15, [r3]
 800096e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000976:	dd04      	ble.n	8000982 <main+0x1de>
					pwm-=10;
 8000978:	4b43      	ldr	r3, [pc, #268]	; (8000a88 <main+0x2e4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3b0a      	subs	r3, #10
 800097e:	4a42      	ldr	r2, [pc, #264]	; (8000a88 <main+0x2e4>)
 8000980:	6013      	str	r3, [r2, #0]
				}
			}
			if(require<0){
 8000982:	4b3f      	ldr	r3, [pc, #252]	; (8000a80 <main+0x2dc>)
 8000984:	edd3 7a00 	vldr	s15, [r3]
 8000988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800098c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000990:	d520      	bpl.n	80009d4 <main+0x230>
				if(vrpm > require){
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <main+0x2f8>)
 8000994:	ed93 7a00 	vldr	s14, [r3]
 8000998:	4b39      	ldr	r3, [pc, #228]	; (8000a80 <main+0x2dc>)
 800099a:	edd3 7a00 	vldr	s15, [r3]
 800099e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a6:	dd05      	ble.n	80009b4 <main+0x210>
					pwm += 10;
 80009a8:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <main+0x2e4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	330a      	adds	r3, #10
 80009ae:	4a36      	ldr	r2, [pc, #216]	; (8000a88 <main+0x2e4>)
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e00f      	b.n	80009d4 <main+0x230>
				}
				else if (vrpm<require){
 80009b4:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <main+0x2f8>)
 80009b6:	ed93 7a00 	vldr	s14, [r3]
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <main+0x2dc>)
 80009bc:	edd3 7a00 	vldr	s15, [r3]
 80009c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c8:	d504      	bpl.n	80009d4 <main+0x230>
					pwm-=10;
 80009ca:	4b2f      	ldr	r3, [pc, #188]	; (8000a88 <main+0x2e4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3b0a      	subs	r3, #10
 80009d0:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <main+0x2e4>)
 80009d2:	6013      	str	r3, [r2, #0]
				}
			}
		}
		// Set Zero
		sclk[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	482b      	ldr	r0, [pc, #172]	; (8000a84 <main+0x2e0>)
 80009d8:	f002 f996 	bl	8002d08 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <main+0x2fc>)
 80009e2:	601a      	str	r2, [r3, #0]
		if(zerostate == 1){
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <main+0x300>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d11e      	bne.n	8000a2a <main+0x286>
			if(sclk[0] == 0 && sclk[1] == 1){
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <main+0x2fc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d11a      	bne.n	8000a2a <main+0x286>
 80009f4:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <main+0x2fc>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d116      	bne.n	8000a2a <main+0x286>
				pwm = 0;
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <main+0x2e4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
				position = 0;
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <main+0x304>)
 8000a04:	f04f 0200 	mov.w	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
				require = 0;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <main+0x2dc>)
 8000a0c:	f04f 0200 	mov.w	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
				zerostate = 0;
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <main+0x300>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
				error = (TIM1->CNT);
 8000a18:	4b24      	ldr	r3, [pc, #144]	; (8000aac <main+0x308>)
 8000a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <main+0x30c>)
 8000a26:	edc3 7a00 	vstr	s15, [r3]
			}
		}
		sclk[1]=sclk[0];
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <main+0x2fc>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <main+0x2fc>)
 8000a30:	6053      	str	r3, [r2, #4]
		position = ((TIM1->CNT) - error)/4072*360;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <main+0x308>)
 8000a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a36:	ee07 3a90 	vmov	s15, r3
 8000a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <main+0x30c>)
 8000a40:	edd3 7a00 	vldr	s15, [r3]
 8000a44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000a48:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000a94 <main+0x2f0>
 8000a4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a50:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000ab4 <main+0x310>
 8000a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <main+0x304>)
 8000a5a:	edc3 7a00 	vstr	s15, [r3]
	{
 8000a5e:	e6de      	b.n	800081e <main+0x7a>
 8000a60:	20000270 	.word	0x20000270
 8000a64:	20000228 	.word	0x20000228
 8000a68:	20000130 	.word	0x20000130
 8000a6c:	08005ea4 	.word	0x08005ea4
 8000a70:	200002b8 	.word	0x200002b8
 8000a74:	200000d8 	.word	0x200000d8
 8000a78:	08005e90 	.word	0x08005e90
 8000a7c:	200000b8 	.word	0x200000b8
 8000a80:	20000000 	.word	0x20000000
 8000a84:	40020000 	.word	0x40020000
 8000a88:	200000b4 	.word	0x200000b4
 8000a8c:	200000a8 	.word	0x200000a8
 8000a90:	200000a0 	.word	0x200000a0
 8000a94:	457e8000 	.word	0x457e8000
 8000a98:	42700000 	.word	0x42700000
 8000a9c:	200000b0 	.word	0x200000b0
 8000aa0:	200000fc 	.word	0x200000fc
 8000aa4:	200000f8 	.word	0x200000f8
 8000aa8:	20000104 	.word	0x20000104
 8000aac:	40010000 	.word	0x40010000
 8000ab0:	20000108 	.word	0x20000108
 8000ab4:	43b40000 	.word	0x43b40000

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	; 0x50
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	2230      	movs	r2, #48	; 0x30
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 fda0 	bl	800560c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <SystemClock_Config+0xc8>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a26      	ldr	r2, [pc, #152]	; (8000b80 <SystemClock_Config+0xc8>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <SystemClock_Config+0xc8>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af8:	2300      	movs	r3, #0
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <SystemClock_Config+0xcc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <SystemClock_Config+0xcc>)
 8000b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <SystemClock_Config+0xcc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b14:	2302      	movs	r3, #2
 8000b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1c:	2310      	movs	r3, #16
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b20:	2302      	movs	r3, #2
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 f915 	bl	8002d6c <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b48:	f000 fbdc 	bl	8001304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2302      	movs	r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	2103      	movs	r1, #3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fb77 	bl	800325c <HAL_RCC_ClockConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b74:	f000 fbc6 	bl	8001304 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3750      	adds	r7, #80	; 0x50
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000b9c:	4a22      	ldr	r2, [pc, #136]	; (8000c28 <MX_ADC1_Init+0xa0>)
 8000b9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000ba2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ba6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000bcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000bee:	f000 fe9f 	bl	8001930 <HAL_ADC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000bf8:	f000 fb84 	bl	8001304 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000c0e:	f001 f831 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c18:	f000 fb74 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000178 	.word	0x20000178
 8000c28:	40012000 	.word	0x40012000

08000c2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	2224      	movs	r2, #36	; 0x24
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 fce6 	bl	800560c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_TIM1_Init+0xa8>)
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <MX_TIM1_Init+0xac>)
 8000c4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_TIM1_Init+0xa8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_TIM1_Init+0xa8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3072;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_TIM1_Init+0xa8>)
 8000c5c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000c60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_TIM1_Init+0xa8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM1_Init+0xa8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM1_Init+0xa8>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c74:	2303      	movs	r3, #3
 8000c76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_TIM1_Init+0xa8>)
 8000ca0:	f002 feee 	bl	8003a80 <HAL_TIM_Encoder_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000caa:	f000 fb2b 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <MX_TIM1_Init+0xa8>)
 8000cbc:	f003 fd92 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000cc6:	f000 fb1d 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3730      	adds	r7, #48	; 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000228 	.word	0x20000228
 8000cd8:	40010000 	.word	0x40010000

08000cdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf8:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <MX_TIM2_Init+0x94>)
 8000cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_TIM2_Init+0x94>)
 8000d02:	2263      	movs	r2, #99	; 0x63
 8000d04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM2_Init+0x94>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_TIM2_Init+0x94>)
 8000d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_TIM2_Init+0x94>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_TIM2_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <MX_TIM2_Init+0x94>)
 8000d22:	f002 fc97 	bl	8003654 <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d2c:	f000 faea 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <MX_TIM2_Init+0x94>)
 8000d3e:	f003 f999 	bl	8004074 <HAL_TIM_ConfigClockSource>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d48:	f000 fadc 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_TIM2_Init+0x94>)
 8000d5a:	f003 fd43 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d64:	f000 face 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000270 	.word	0x20000270

08000d74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08e      	sub	sp, #56	; 0x38
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	f107 0320 	add.w	r3, r7, #32
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
 8000da0:	615a      	str	r2, [r3, #20]
 8000da2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da4:	4b2c      	ldr	r3, [pc, #176]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000da6:	4a2d      	ldr	r2, [pc, #180]	; (8000e5c <MX_TIM3_Init+0xe8>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b29      	ldr	r3, [pc, #164]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000db6:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000db8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dca:	4823      	ldr	r0, [pc, #140]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000dcc:	f002 fc42 	bl	8003654 <HAL_TIM_Base_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000dd6:	f000 fa95 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de4:	4619      	mov	r1, r3
 8000de6:	481c      	ldr	r0, [pc, #112]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000de8:	f003 f944 	bl	8004074 <HAL_TIM_ConfigClockSource>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000df2:	f000 fa87 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000df6:	4818      	ldr	r0, [pc, #96]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000df8:	f002 fd38 	bl	800386c <HAL_TIM_PWM_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e02:	f000 fa7f 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e06:	2320      	movs	r3, #32
 8000e08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	4619      	mov	r1, r3
 8000e14:	4810      	ldr	r0, [pc, #64]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000e16:	f003 fce5 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e20:	f000 fa70 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e24:	2360      	movs	r3, #96	; 0x60
 8000e26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000e3c:	f003 f85c 	bl	8003ef8 <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e46:	f000 fa5d 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <MX_TIM3_Init+0xe4>)
 8000e4c:	f000 fb9c 	bl	8001588 <HAL_TIM_MspPostInit>

}
 8000e50:	bf00      	nop
 8000e52:	3738      	adds	r7, #56	; 0x38
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000130 	.word	0x20000130
 8000e5c:	40000400 	.word	0x40000400

08000e60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <MX_USART2_UART_Init+0x50>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e98:	f003 fd26 	bl	80048e8 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ea2:	f000 fa2f 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200002b8 	.word	0x200002b8
 8000eb0:	40004400 	.word	0x40004400

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_DMA_Init+0x3c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <MX_DMA_Init+0x3c>)
 8000ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_DMA_Init+0x3c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2038      	movs	r0, #56	; 0x38
 8000edc:	f001 f9dd 	bl	800229a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ee0:	2038      	movs	r0, #56	; 0x38
 8000ee2:	f001 f9f6 	bl	80022d2 <HAL_NVIC_EnableIRQ>

}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a32      	ldr	r2, [pc, #200]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a2b      	ldr	r2, [pc, #172]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_GPIO_Init+0xe8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2123      	movs	r1, #35	; 0x23
 8000f7e:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <MX_GPIO_Init+0xec>)
 8000f80:	f001 feda 	bl	8002d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_GPIO_Init+0xf0>)
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <MX_GPIO_Init+0xf4>)
 8000f9a:	f001 fd31 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 8000f9e:	2323      	movs	r3, #35	; 0x23
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <MX_GPIO_Init+0xec>)
 8000fb6:	f001 fd23 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_GPIO_Init+0xec>)
 8000fce:	f001 fd17 	bl	8002a00 <HAL_GPIO_Init>

}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	10210000 	.word	0x10210000
 8000fe8:	40020800 	.word	0x40020800

08000fec <UARTRecieveIT>:

/* USER CODE BEGIN 4 */

int16_t UARTRecieveIT()
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8000ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff6:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <UARTRecieveIT+0x54>)
 8000ffa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <UARTRecieveIT+0x54>)
 8001000:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001002:	b29b      	uxth	r3, r3
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <UARTRecieveIT+0x58>)
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	4293      	cmp	r3, r2
 800100c:	d010      	beq.n	8001030 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <UARTRecieveIT+0x58>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <UARTRecieveIT+0x5c>)
 8001014:	5cd3      	ldrb	r3, [r2, r3]
 8001016:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <UARTRecieveIT+0x58>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <UARTRecieveIT+0x54>)
 8001020:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001022:	fbb3 f1f2 	udiv	r1, r3, r2
 8001026:	fb02 f201 	mul.w	r2, r2, r1
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	4a05      	ldr	r2, [pc, #20]	; (8001044 <UARTRecieveIT+0x58>)
 800102e:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001030:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	200002b8 	.word	0x200002b8
 8001044:	2000010c 	.word	0x2000010c
 8001048:	200000d8 	.word	0x200000d8

0800104c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af02      	add	r7, sp, #8
 8001052:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%d%d%d%d]\r\n", RxDataBuffer[0],RxDataBuffer[1],RxDataBuffer[2],RxDataBuffer[3]);
 8001054:	4b51      	ldr	r3, [pc, #324]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	4b50      	ldr	r3, [pc, #320]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	4618      	mov	r0, r3
 8001060:	4b4e      	ldr	r3, [pc, #312]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	461a      	mov	r2, r3
 8001066:	4b4d      	ldr	r3, [pc, #308]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	9200      	str	r2, [sp, #0]
 800106e:	4603      	mov	r3, r0
 8001070:	460a      	mov	r2, r1
 8001072:	494b      	ldr	r1, [pc, #300]	; (80011a0 <HAL_UART_RxCpltCallback+0x154>)
 8001074:	484b      	ldr	r0, [pc, #300]	; (80011a4 <HAL_UART_RxCpltCallback+0x158>)
 8001076:	f004 fad1 	bl	800561c <siprintf>
	a0 = RxDataBuffer[0];
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <HAL_UART_RxCpltCallback+0x15c>)
 8001082:	601a      	str	r2, [r3, #0]
	a1 = RxDataBuffer[1];
 8001084:	4b45      	ldr	r3, [pc, #276]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 8001086:	785b      	ldrb	r3, [r3, #1]
 8001088:	461a      	mov	r2, r3
 800108a:	4b48      	ldr	r3, [pc, #288]	; (80011ac <HAL_UART_RxCpltCallback+0x160>)
 800108c:	601a      	str	r2, [r3, #0]
	a2 = RxDataBuffer[2];
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 8001090:	789b      	ldrb	r3, [r3, #2]
 8001092:	461a      	mov	r2, r3
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HAL_UART_RxCpltCallback+0x164>)
 8001096:	601a      	str	r2, [r3, #0]
	a3 = RxDataBuffer[3];
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 800109a:	78db      	ldrb	r3, [r3, #3]
 800109c:	461a      	mov	r2, r3
 800109e:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <HAL_UART_RxCpltCallback+0x168>)
 80010a0:	601a      	str	r2, [r3, #0]
	if(a0 == 115 && a1 == 116 && a2 == 111 && a3 == 112){ //stop
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_UART_RxCpltCallback+0x15c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b73      	cmp	r3, #115	; 0x73
 80010a8:	d110      	bne.n	80010cc <HAL_UART_RxCpltCallback+0x80>
 80010aa:	4b40      	ldr	r3, [pc, #256]	; (80011ac <HAL_UART_RxCpltCallback+0x160>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b74      	cmp	r3, #116	; 0x74
 80010b0:	d10c      	bne.n	80010cc <HAL_UART_RxCpltCallback+0x80>
 80010b2:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <HAL_UART_RxCpltCallback+0x164>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b6f      	cmp	r3, #111	; 0x6f
 80010b8:	d108      	bne.n	80010cc <HAL_UART_RxCpltCallback+0x80>
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <HAL_UART_RxCpltCallback+0x168>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b70      	cmp	r3, #112	; 0x70
 80010c0:	d104      	bne.n	80010cc <HAL_UART_RxCpltCallback+0x80>
		require = 0;
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <HAL_UART_RxCpltCallback+0x16c>)
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e058      	b.n	800117e <HAL_UART_RxCpltCallback+0x132>
	}
	else if(a0 == 115 && a1 == 101 && a2 == 116 && a3 == 48){ //set0
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_UART_RxCpltCallback+0x15c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b73      	cmp	r3, #115	; 0x73
 80010d2:	d116      	bne.n	8001102 <HAL_UART_RxCpltCallback+0xb6>
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HAL_UART_RxCpltCallback+0x160>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b65      	cmp	r3, #101	; 0x65
 80010da:	d112      	bne.n	8001102 <HAL_UART_RxCpltCallback+0xb6>
 80010dc:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <HAL_UART_RxCpltCallback+0x164>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b74      	cmp	r3, #116	; 0x74
 80010e2:	d10e      	bne.n	8001102 <HAL_UART_RxCpltCallback+0xb6>
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_UART_RxCpltCallback+0x168>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b30      	cmp	r3, #48	; 0x30
 80010ea:	d10a      	bne.n	8001102 <HAL_UART_RxCpltCallback+0xb6>
		require = 10;
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <HAL_UART_RxCpltCallback+0x16c>)
 80010ee:	4a33      	ldr	r2, [pc, #204]	; (80011bc <HAL_UART_RxCpltCallback+0x170>)
 80010f0:	601a      	str	r2, [r3, #0]
		pwm = 1000;
 80010f2:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <HAL_UART_RxCpltCallback+0x174>)
 80010f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f8:	601a      	str	r2, [r3, #0]
		zerostate = 1;
 80010fa:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <HAL_UART_RxCpltCallback+0x178>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e03d      	b.n	800117e <HAL_UART_RxCpltCallback+0x132>
	}
	else if(a0 == 43){ //+
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <HAL_UART_RxCpltCallback+0x15c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b2b      	cmp	r3, #43	; 0x2b
 8001108:	d11a      	bne.n	8001140 <HAL_UART_RxCpltCallback+0xf4>
		require = ((RxDataBuffer[1]-48)*100) + ((RxDataBuffer[2]-48)*10) + ((RxDataBuffer[3]-48)*1);
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 800110c:	785b      	ldrb	r3, [r3, #1]
 800110e:	3b30      	subs	r3, #48	; 0x30
 8001110:	2264      	movs	r2, #100	; 0x64
 8001112:	fb02 f103 	mul.w	r1, r2, r3
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 8001118:	789b      	ldrb	r3, [r3, #2]
 800111a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	18ca      	adds	r2, r1, r3
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 800112a:	78db      	ldrb	r3, [r3, #3]
 800112c:	3b30      	subs	r3, #48	; 0x30
 800112e:	4413      	add	r3, r2
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_UART_RxCpltCallback+0x16c>)
 800113a:	edc3 7a00 	vstr	s15, [r3]
 800113e:	e01e      	b.n	800117e <HAL_UART_RxCpltCallback+0x132>
	}
	else if(a0 == 45){ //-
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <HAL_UART_RxCpltCallback+0x15c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b2d      	cmp	r3, #45	; 0x2d
 8001146:	d11a      	bne.n	800117e <HAL_UART_RxCpltCallback+0x132>
			require = -1*(((RxDataBuffer[1]-48)*100) + ((RxDataBuffer[2]-48)*10) + ((RxDataBuffer[3]-48)*1));
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 800114a:	785b      	ldrb	r3, [r3, #1]
 800114c:	3b30      	subs	r3, #48	; 0x30
 800114e:	2264      	movs	r2, #100	; 0x64
 8001150:	fb02 f103 	mul.w	r1, r2, r3
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	18ca      	adds	r2, r1, r3
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_UART_RxCpltCallback+0x150>)
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	3b30      	subs	r3, #48	; 0x30
 800116c:	4413      	add	r3, r2
 800116e:	425b      	negs	r3, r3
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <HAL_UART_RxCpltCallback+0x16c>)
 800117a:	edc3 7a00 	vstr	s15, [r3]
		}
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 800117e:	4809      	ldr	r0, [pc, #36]	; (80011a4 <HAL_UART_RxCpltCallback+0x158>)
 8001180:	f7ff f82e 	bl	80001e0 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118c:	4905      	ldr	r1, [pc, #20]	; (80011a4 <HAL_UART_RxCpltCallback+0x158>)
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <HAL_UART_RxCpltCallback+0x17c>)
 8001190:	f003 fbf7 	bl	8004982 <HAL_UART_Transmit>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000d8 	.word	0x200000d8
 80011a0:	08005ecc 	.word	0x08005ecc
 80011a4:	200000b8 	.word	0x200000b8
 80011a8:	20000308 	.word	0x20000308
 80011ac:	20000128 	.word	0x20000128
 80011b0:	20000224 	.word	0x20000224
 80011b4:	2000012c 	.word	0x2000012c
 80011b8:	20000000 	.word	0x20000000
 80011bc:	41200000 	.word	0x41200000
 80011c0:	200000b4 	.word	0x200000b4
 80011c4:	200000f8 	.word	0x200000f8
 80011c8:	200002b8 	.word	0x200002b8

080011cc <EncoderVelocity_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 3072

float EncoderVelocity_Update()
{
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	ed2d 8b02 	vpush	{d8}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 80011d6:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <EncoderVelocity_Update+0xb4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	60fb      	str	r3, [r7, #12]
	uint64_t EncoderNowTimestamp = micros();
 80011de:	f000 f877 	bl	80012d0 <micros>
 80011e2:	e9c7 0100 	strd	r0, r1, [r7]


	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80011e6:	4b27      	ldr	r3, [pc, #156]	; (8001284 <EncoderVelocity_Update+0xb8>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011f0:	1a84      	subs	r4, r0, r2
 80011f2:	eb61 0503 	sbc.w	r5, r1, r3
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <EncoderVelocity_Update+0xbc>)
 80011f8:	e9c3 4500 	strd	r4, r5, [r3]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <EncoderVelocity_Update+0xc0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	461a      	mov	r2, r3
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <EncoderVelocity_Update+0xc4>)
 8001208:	601a      	str	r2, [r3, #0]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <EncoderVelocity_Update+0xc4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001212:	db06      	blt.n	8001222 <EncoderVelocity_Update+0x56>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <EncoderVelocity_Update+0xc4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 800121c:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <EncoderVelocity_Update+0xc4>)
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e00a      	b.n	8001238 <EncoderVelocity_Update+0x6c>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <EncoderVelocity_Update+0xc4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 800122a:	dc05      	bgt.n	8001238 <EncoderVelocity_Update+0x6c>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <EncoderVelocity_Update+0xc4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001234:	4a16      	ldr	r2, [pc, #88]	; (8001290 <EncoderVelocity_Update+0xc4>)
 8001236:	6013      	str	r3, [r2, #0]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001238:	4a14      	ldr	r2, [pc, #80]	; (800128c <EncoderVelocity_Update+0xc0>)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 800123e:	4911      	ldr	r1, [pc, #68]	; (8001284 <EncoderVelocity_Update+0xb8>)
 8001240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001244:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <EncoderVelocity_Update+0xc4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a11      	ldr	r2, [pc, #68]	; (8001294 <EncoderVelocity_Update+0xc8>)
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <EncoderVelocity_Update+0xbc>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff f8dc 	bl	8000420 <__aeabi_ul2f>
 8001268:	ee07 0a10 	vmov	s14, r0
 800126c:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	ecbd 8b02 	vpop	{d8}
 800127c:	bdb0      	pop	{r4, r5, r7, pc}
 800127e:	bf00      	nop
 8001280:	20000228 	.word	0x20000228
 8001284:	20000110 	.word	0x20000110
 8001288:	20000300 	.word	0x20000300
 800128c:	20000118 	.word	0x20000118
 8001290:	200001c0 	.word	0x200001c0
 8001294:	000f4240 	.word	0x000f4240

08001298 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001298:	b4b0      	push	{r4, r5, r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d109      	bne.n	80012bc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f112 34ff 	adds.w	r4, r2, #4294967295
 80012b2:	f143 0500 	adc.w	r5, r3, #0
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012b8:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bcb0      	pop	{r4, r5, r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000270 	.word	0x20000270
 80012cc:	20000098 	.word	0x20000098

080012d0 <micros>:
uint64_t micros()
{
 80012d0:	b4b0      	push	{r4, r5, r7}
 80012d2:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <micros+0x2c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	4618      	mov	r0, r3
 80012dc:	f04f 0100 	mov.w	r1, #0
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <micros+0x30>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	1884      	adds	r4, r0, r2
 80012e8:	eb41 0503 	adc.w	r5, r1, r3
 80012ec:	4622      	mov	r2, r4
 80012ee:	462b      	mov	r3, r5
}
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bcb0      	pop	{r4, r5, r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000270 	.word	0x20000270
 8001300:	20000098 	.word	0x20000098

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_MspInit+0x4c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800134e:	2007      	movs	r0, #7
 8001350:	f000 ff98 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a33      	ldr	r2, [pc, #204]	; (800144c <HAL_ADC_MspInit+0xec>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d15f      	bne.n	8001442 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HAL_ADC_MspInit+0xf0>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	4a31      	ldr	r2, [pc, #196]	; (8001450 <HAL_ADC_MspInit+0xf0>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6453      	str	r3, [r2, #68]	; 0x44
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <HAL_ADC_MspInit+0xf0>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_ADC_MspInit+0xf0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a2a      	ldr	r2, [pc, #168]	; (8001450 <HAL_ADC_MspInit+0xf0>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_ADC_MspInit+0xf0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013ba:	2310      	movs	r3, #16
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013be:	2303      	movs	r3, #3
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	4821      	ldr	r0, [pc, #132]	; (8001454 <HAL_ADC_MspInit+0xf4>)
 80013ce:	f001 fb17 	bl	8002a00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 80013d4:	4a21      	ldr	r2, [pc, #132]	; (800145c <HAL_ADC_MspInit+0xfc>)
 80013d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013de:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 80013ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 80013f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 80013fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001400:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 8001404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001408:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800140a:	4b13      	ldr	r3, [pc, #76]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001416:	4810      	ldr	r0, [pc, #64]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 8001418:	f000 ff76 	bl	8002308 <HAL_DMA_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001422:	f7ff ff6f 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 800142a:	639a      	str	r2, [r3, #56]	; 0x38
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_ADC_MspInit+0xf8>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2012      	movs	r0, #18
 8001438:	f000 ff2f 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800143c:	2012      	movs	r0, #18
 800143e:	f000 ff48 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40012000 	.word	0x40012000
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	200001c4 	.word	0x200001c4
 800145c:	40026410 	.word	0x40026410

08001460 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <HAL_TIM_Encoder_MspInit+0x94>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d134      	bne.n	80014ec <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_TIM_Encoder_MspInit+0x98>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_TIM_Encoder_MspInit+0x98>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_TIM_Encoder_MspInit+0x98>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_TIM_Encoder_MspInit+0x98>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4809      	ldr	r0, [pc, #36]	; (80014fc <HAL_TIM_Encoder_MspInit+0x9c>)
 80014d8:	f001 fa92 	bl	8002a00 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	201a      	movs	r0, #26
 80014e2:	f000 feda 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80014e6:	201a      	movs	r0, #26
 80014e8:	f000 fef3 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40010000 	.word	0x40010000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000

08001500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001510:	d116      	bne.n	8001540 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_TIM_Base_MspInit+0x80>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_TIM_Base_MspInit+0x80>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_TIM_Base_MspInit+0x80>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	201c      	movs	r0, #28
 8001534:	f000 feb1 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001538:	201c      	movs	r0, #28
 800153a:	f000 feca 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800153e:	e01a      	b.n	8001576 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_TIM_Base_MspInit+0x84>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d115      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_TIM_Base_MspInit+0x80>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_TIM_Base_MspInit+0x80>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_TIM_Base_MspInit+0x80>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	201d      	movs	r0, #29
 800156c:	f000 fe95 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001570:	201d      	movs	r0, #29
 8001572:	f000 feae 	bl	80022d2 <HAL_NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40000400 	.word	0x40000400

08001588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_TIM_MspPostInit+0x68>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d11d      	bne.n	80015e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_TIM_MspPostInit+0x6c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_TIM_MspPostInit+0x6c>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <HAL_TIM_MspPostInit+0x6c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c6:	2340      	movs	r3, #64	; 0x40
 80015c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	4619      	mov	r1, r3
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <HAL_TIM_MspPostInit+0x70>)
 80015e2:	f001 fa0d 	bl	8002a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40000400 	.word	0x40000400
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000

080015fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08a      	sub	sp, #40	; 0x28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a1d      	ldr	r2, [pc, #116]	; (8001690 <HAL_UART_MspInit+0x94>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d133      	bne.n	8001686 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_UART_MspInit+0x98>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_UART_MspInit+0x98>)
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_UART_MspInit+0x98>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_UART_MspInit+0x98>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a14      	ldr	r2, [pc, #80]	; (8001694 <HAL_UART_MspInit+0x98>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_UART_MspInit+0x98>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001656:	230c      	movs	r3, #12
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001666:	2307      	movs	r3, #7
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	4809      	ldr	r0, [pc, #36]	; (8001698 <HAL_UART_MspInit+0x9c>)
 8001672:	f001 f9c5 	bl	8002a00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2026      	movs	r0, #38	; 0x26
 800167c:	f000 fe0d 	bl	800229a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001680:	2026      	movs	r0, #38	; 0x26
 8001682:	f000 fe26 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40004400 	.word	0x40004400
 8001694:	40023800 	.word	0x40023800
 8001698:	40020000 	.word	0x40020000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <MemManage_Handler+0x4>

080016ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <BusFault_Handler+0x4>

080016b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler+0x4>

080016ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e8:	f000 f902 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <ADC_IRQHandler+0x10>)
 80016f6:	f000 f95e 	bl	80019b6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000178 	.word	0x20000178

08001704 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800170a:	f002 faed 	bl	8003ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000228 	.word	0x20000228

08001718 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <TIM2_IRQHandler+0x10>)
 800171e:	f002 fae3 	bl	8003ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000270 	.word	0x20000270

0800172c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <TIM3_IRQHandler+0x10>)
 8001732:	f002 fad9 	bl	8003ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000130 	.word	0x20000130

08001740 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <USART2_IRQHandler+0x10>)
 8001746:	f003 f9df 	bl	8004b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200002b8 	.word	0x200002b8

08001754 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001758:	4802      	ldr	r0, [pc, #8]	; (8001764 <DMA2_Stream0_IRQHandler+0x10>)
 800175a:	f000 ff15 	bl	8002588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200001c4 	.word	0x200001c4

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f003 ff0e 	bl	80055b8 <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20020000 	.word	0x20020000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	2000011c 	.word	0x2000011c
 80017d0:	20000320 	.word	0x20000320

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fe:	490e      	ldr	r1, [pc, #56]	; (8001838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001800:	4a0e      	ldr	r2, [pc, #56]	; (800183c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001804:	e002      	b.n	800180c <LoopCopyDataInit>

08001806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180a:	3304      	adds	r3, #4

0800180c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800180c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001810:	d3f9      	bcc.n	8001806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001814:	4c0b      	ldr	r4, [pc, #44]	; (8001844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001818:	e001      	b.n	800181e <LoopFillZerobss>

0800181a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800181c:	3204      	adds	r2, #4

0800181e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001820:	d3fb      	bcc.n	800181a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001822:	f7ff ffd7 	bl	80017d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001826:	f003 fecd 	bl	80055c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7fe ffbb 	bl	80007a4 <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800183c:	08005f48 	.word	0x08005f48
  ldr r2, =_sbss
 8001840:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001844:	20000320 	.word	0x20000320

08001848 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <DMA1_Stream0_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001850:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_Init+0x40>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800185a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_Init+0x40>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_Init+0x40>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 fd05 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f808 	bl	8001890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7ff fd46 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x54>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_InitTick+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd1d 	bl	80022ee <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f000 fce5 	bl	800229a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	; (80018ec <HAL_InitTick+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000004 	.word	0x20000004
 80018e8:	2000000c 	.word	0x2000000c
 80018ec:	20000008 	.word	0x20000008

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000000c 	.word	0x2000000c
 8001914:	2000030c 	.word	0x2000030c

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2000030c 	.word	0x2000030c

08001930 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e033      	b.n	80019ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fd06 	bl	8001360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 0310 	and.w	r3, r3, #16
 800196a:	2b00      	cmp	r3, #0
 800196c:	d118      	bne.n	80019a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001976:	f023 0302 	bic.w	r3, r3, #2
 800197a:	f043 0202 	orr.w	r2, r3, #2
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 faa8 	bl	8001ed8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	f043 0201 	orr.w	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
 800199e:	e001      	b.n	80019a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	bf0c      	ite	eq
 80019d4:	2301      	moveq	r3, #1
 80019d6:	2300      	movne	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	bf0c      	ite	eq
 80019ea:	2301      	moveq	r3, #1
 80019ec:	2300      	movne	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d049      	beq.n	8001a8c <HAL_ADC_IRQHandler+0xd6>
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d046      	beq.n	8001a8c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d105      	bne.n	8001a16 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d12b      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d127      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d119      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0220 	bic.w	r2, r2, #32
 8001a56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f8db 	bl	8001c38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f06f 0212 	mvn.w	r2, #18
 8001a8a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf0c      	ite	eq
 8001a9a:	2301      	moveq	r3, #1
 8001a9c:	2300      	movne	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aac:	2b80      	cmp	r3, #128	; 0x80
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d057      	beq.n	8001b6e <HAL_ADC_IRQHandler+0x1b8>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d054      	beq.n	8001b6e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f003 0310 	and.w	r3, r3, #16
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d139      	bne.n	8001b5e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d12b      	bne.n	8001b5e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d124      	bne.n	8001b5e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d11d      	bne.n	8001b5e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d119      	bne.n	8001b5e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b38:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fab6 	bl	80020d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 020c 	mvn.w	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8e:	2b40      	cmp	r3, #64	; 0x40
 8001b90:	bf0c      	ite	eq
 8001b92:	2301      	moveq	r3, #1
 8001b94:	2300      	movne	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d017      	beq.n	8001bd0 <HAL_ADC_IRQHandler+0x21a>
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d014      	beq.n	8001bd0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f843 	bl	8001c4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f06f 0201 	mvn.w	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	bf0c      	ite	eq
 8001bde:	2301      	moveq	r3, #1
 8001be0:	2300      	movne	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bf4:	bf0c      	ite	eq
 8001bf6:	2301      	moveq	r3, #1
 8001bf8:	2300      	movne	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d015      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x27a>
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d012      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f043 0202 	orr.w	r2, r3, #2
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f06f 0220 	mvn.w	r2, #32
 8001c1e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f81d 	bl	8001c60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f06f 0220 	mvn.w	r2, #32
 8001c2e:	601a      	str	r2, [r3, #0]
  }
}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1c>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e113      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x244>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d925      	bls.n	8001cec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68d9      	ldr	r1, [r3, #12]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b1e      	subs	r3, #30
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68d9      	ldr	r1, [r3, #12]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4403      	add	r3, r0
 8001cde:	3b1e      	subs	r3, #30
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	e022      	b.n	8001d32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6919      	ldr	r1, [r3, #16]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	2207      	movs	r2, #7
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6919      	ldr	r1, [r3, #16]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4403      	add	r3, r0
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d824      	bhi.n	8001d84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b05      	subs	r3, #5
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3b05      	subs	r3, #5
 8001d76:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34
 8001d82:	e04c      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d824      	bhi.n	8001dd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b23      	subs	r3, #35	; 0x23
 8001d9e:	221f      	movs	r2, #31
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43da      	mvns	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	400a      	ands	r2, r1
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b23      	subs	r3, #35	; 0x23
 8001dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd4:	e023      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	3b41      	subs	r3, #65	; 0x41
 8001de8:	221f      	movs	r2, #31
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b41      	subs	r3, #65	; 0x41
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1e:	4b29      	ldr	r3, [pc, #164]	; (8001ec4 <HAL_ADC_ConfigChannel+0x250>)
 8001e20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <HAL_ADC_ConfigChannel+0x254>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d10f      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1d8>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b12      	cmp	r3, #18
 8001e32:	d10b      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1d      	ldr	r2, [pc, #116]	; (8001ec8 <HAL_ADC_ConfigChannel+0x254>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d12b      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x23a>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <HAL_ADC_ConfigChannel+0x258>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d003      	beq.n	8001e68 <HAL_ADC_ConfigChannel+0x1f4>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b11      	cmp	r3, #17
 8001e66:	d122      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_ADC_ConfigChannel+0x258>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d111      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_ADC_ConfigChannel+0x25c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_ADC_ConfigChannel+0x260>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	0c9a      	lsrs	r2, r3, #18
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ea0:	e002      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40012300 	.word	0x40012300
 8001ec8:	40012000 	.word	0x40012000
 8001ecc:	10000012 	.word	0x10000012
 8001ed0:	20000004 	.word	0x20000004
 8001ed4:	431bde83 	.word	0x431bde83

08001ed8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee0:	4b79      	ldr	r3, [pc, #484]	; (80020c8 <ADC_Init+0x1f0>)
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	021a      	lsls	r2, r3, #8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6899      	ldr	r1, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	4a58      	ldr	r2, [pc, #352]	; (80020cc <ADC_Init+0x1f4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d022      	beq.n	8001fb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6899      	ldr	r1, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	e00f      	b.n	8001fd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0202 	bic.w	r2, r2, #2
 8001fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7e1b      	ldrb	r3, [r3, #24]
 8001ff0:	005a      	lsls	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01b      	beq.n	800203c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002012:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002022:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6859      	ldr	r1, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	3b01      	subs	r3, #1
 8002030:	035a      	lsls	r2, r3, #13
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	e007      	b.n	800204c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	3b01      	subs	r3, #1
 8002068:	051a      	lsls	r2, r3, #20
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800208e:	025a      	lsls	r2, r3, #9
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6899      	ldr	r1, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	029a      	lsls	r2, r3, #10
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	609a      	str	r2, [r3, #8]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40012300 	.word	0x40012300
 80020cc:	0f000001 	.word	0x0f000001

080020d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db0b      	blt.n	8002172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <__NVIC_EnableIRQ+0x38>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2001      	movs	r0, #1
 800216a:	fa00 f202 	lsl.w	r2, r0, r2
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000e100 	.word	0xe000e100

08002184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	6039      	str	r1, [r7, #0]
 800218e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002194:	2b00      	cmp	r3, #0
 8002196:	db0a      	blt.n	80021ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	490c      	ldr	r1, [pc, #48]	; (80021d0 <__NVIC_SetPriority+0x4c>)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	0112      	lsls	r2, r2, #4
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	440b      	add	r3, r1
 80021a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ac:	e00a      	b.n	80021c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4908      	ldr	r1, [pc, #32]	; (80021d4 <__NVIC_SetPriority+0x50>)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	3b04      	subs	r3, #4
 80021bc:	0112      	lsls	r2, r2, #4
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	761a      	strb	r2, [r3, #24]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000e100 	.word	0xe000e100
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f1c3 0307 	rsb	r3, r3, #7
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	bf28      	it	cs
 80021f6:	2304      	movcs	r3, #4
 80021f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3304      	adds	r3, #4
 80021fe:	2b06      	cmp	r3, #6
 8002200:	d902      	bls.n	8002208 <NVIC_EncodePriority+0x30>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3b03      	subs	r3, #3
 8002206:	e000      	b.n	800220a <NVIC_EncodePriority+0x32>
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	f04f 32ff 	mov.w	r2, #4294967295
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	401a      	ands	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fa01 f303 	lsl.w	r3, r1, r3
 800222a:	43d9      	mvns	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	4313      	orrs	r3, r2
         );
}
 8002232:	4618      	mov	r0, r3
 8002234:	3724      	adds	r7, #36	; 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f7ff ff8e 	bl	8002184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	; (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff29 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff3e 	bl	800212c <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff8e 	bl	80021d8 <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5d 	bl	8002184 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff31 	bl	8002148 <__NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa2 	bl	8002240 <SysTick_Config>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff fb00 	bl	8001918 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e099      	b.n	8002458 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002344:	e00f      	b.n	8002366 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002346:	f7ff fae7 	bl	8001918 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b05      	cmp	r3, #5
 8002352:	d908      	bls.n	8002366 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2203      	movs	r2, #3
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e078      	b.n	8002458 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1e8      	bne.n	8002346 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4b38      	ldr	r3, [pc, #224]	; (8002460 <HAL_DMA_Init+0x158>)
 8002380:	4013      	ands	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002392:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d107      	bne.n	80023d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	4313      	orrs	r3, r2
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f023 0307 	bic.w	r3, r3, #7
 80023e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d117      	bne.n	800242a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00e      	beq.n	800242a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 fa7b 	bl	8002908 <DMA_CheckFifoParam>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002426:	2301      	movs	r3, #1
 8002428:	e016      	b.n	8002458 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa32 	bl	800289c <DMA_CalcBaseAndBitshift>
 8002438:	4603      	mov	r3, r0
 800243a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	223f      	movs	r2, #63	; 0x3f
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	f010803f 	.word	0xf010803f

08002464 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002472:	f7ff fa51 	bl	8001918 <HAL_GetTick>
 8002476:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d008      	beq.n	8002496 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e052      	b.n	800253c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0216 	bic.w	r2, r2, #22
 80024a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <HAL_DMA_Abort+0x62>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d007      	beq.n	80024d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0201 	bic.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e6:	e013      	b.n	8002510 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e8:	f7ff fa16 	bl	8001918 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d90c      	bls.n	8002510 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2220      	movs	r2, #32
 80024fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2203      	movs	r2, #3
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e015      	b.n	800253c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1e4      	bne.n	80024e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	223f      	movs	r2, #63	; 0x3f
 8002524:	409a      	lsls	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d004      	beq.n	8002562 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2280      	movs	r2, #128	; 0x80
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e00c      	b.n	800257c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2205      	movs	r2, #5
 8002566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002594:	4b92      	ldr	r3, [pc, #584]	; (80027e0 <HAL_DMA_IRQHandler+0x258>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a92      	ldr	r2, [pc, #584]	; (80027e4 <HAL_DMA_IRQHandler+0x25c>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0a9b      	lsrs	r3, r3, #10
 80025a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	2208      	movs	r2, #8
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01a      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0204 	bic.w	r2, r2, #4
 80025da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	2208      	movs	r2, #8
 80025e2:	409a      	lsls	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f043 0201 	orr.w	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f8:	2201      	movs	r2, #1
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2201      	movs	r2, #1
 8002618:	409a      	lsls	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0202 	orr.w	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	2204      	movs	r2, #4
 8002630:	409a      	lsls	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00b      	beq.n	8002660 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2204      	movs	r2, #4
 800264e:	409a      	lsls	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	2210      	movs	r2, #16
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d043      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d03c      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	2210      	movs	r2, #16
 8002684:	409a      	lsls	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d018      	beq.n	80026ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d108      	bne.n	80026b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d024      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
 80026b6:	e01f      	b.n	80026f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01b      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	4798      	blx	r3
 80026c8:	e016      	b.n	80026f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0208 	bic.w	r2, r2, #8
 80026e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2220      	movs	r2, #32
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 808e 	beq.w	8002826 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8086 	beq.w	8002826 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	2220      	movs	r2, #32
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b05      	cmp	r3, #5
 8002730:	d136      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0216 	bic.w	r2, r2, #22
 8002740:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002750:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <HAL_DMA_IRQHandler+0x1da>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0208 	bic.w	r2, r2, #8
 8002770:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	223f      	movs	r2, #63	; 0x3f
 8002778:	409a      	lsls	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002792:	2b00      	cmp	r3, #0
 8002794:	d07d      	beq.n	8002892 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	4798      	blx	r3
        }
        return;
 800279e:	e078      	b.n	8002892 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01c      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d108      	bne.n	80027ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d030      	beq.n	8002826 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
 80027cc:	e02b      	b.n	8002826 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	4798      	blx	r3
 80027de:	e022      	b.n	8002826 <HAL_DMA_IRQHandler+0x29e>
 80027e0:	20000004 	.word	0x20000004
 80027e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0210 	bic.w	r2, r2, #16
 8002804:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	2b00      	cmp	r3, #0
 800282c:	d032      	beq.n	8002894 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d022      	beq.n	8002880 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2205      	movs	r2, #5
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3301      	adds	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	429a      	cmp	r2, r3
 800285c:	d307      	bcc.n	800286e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f2      	bne.n	8002852 <HAL_DMA_IRQHandler+0x2ca>
 800286c:	e000      	b.n	8002870 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800286e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
 8002890:	e000      	b.n	8002894 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002892:	bf00      	nop
    }
  }
}
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop

0800289c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	3b10      	subs	r3, #16
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <DMA_CalcBaseAndBitshift+0x64>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028b6:	4a13      	ldr	r2, [pc, #76]	; (8002904 <DMA_CalcBaseAndBitshift+0x68>)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d909      	bls.n	80028de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	1d1a      	adds	r2, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	659a      	str	r2, [r3, #88]	; 0x58
 80028dc:	e007      	b.n	80028ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028e6:	f023 0303 	bic.w	r3, r3, #3
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	aaaaaaab 	.word	0xaaaaaaab
 8002904:	08005efc 	.word	0x08005efc

08002908 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d11f      	bne.n	8002962 <DMA_CheckFifoParam+0x5a>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d856      	bhi.n	80029d6 <DMA_CheckFifoParam+0xce>
 8002928:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <DMA_CheckFifoParam+0x28>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002941 	.word	0x08002941
 8002934:	08002953 	.word	0x08002953
 8002938:	08002941 	.word	0x08002941
 800293c:	080029d7 	.word	0x080029d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d046      	beq.n	80029da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002950:	e043      	b.n	80029da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800295a:	d140      	bne.n	80029de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002960:	e03d      	b.n	80029de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800296a:	d121      	bne.n	80029b0 <DMA_CheckFifoParam+0xa8>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d837      	bhi.n	80029e2 <DMA_CheckFifoParam+0xda>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <DMA_CheckFifoParam+0x70>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	08002989 	.word	0x08002989
 800297c:	0800298f 	.word	0x0800298f
 8002980:	08002989 	.word	0x08002989
 8002984:	080029a1 	.word	0x080029a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e030      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d025      	beq.n	80029e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299e:	e022      	b.n	80029e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029a8:	d11f      	bne.n	80029ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029ae:	e01c      	b.n	80029ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d903      	bls.n	80029be <DMA_CheckFifoParam+0xb6>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d003      	beq.n	80029c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029bc:	e018      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
      break;
 80029c2:	e015      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00e      	beq.n	80029ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      break;
 80029d4:	e00b      	b.n	80029ee <DMA_CheckFifoParam+0xe6>
      break;
 80029d6:	bf00      	nop
 80029d8:	e00a      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;
 80029da:	bf00      	nop
 80029dc:	e008      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;
 80029de:	bf00      	nop
 80029e0:	e006      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;
 80029e2:	bf00      	nop
 80029e4:	e004      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;
 80029e6:	bf00      	nop
 80029e8:	e002      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80029ea:	bf00      	nop
 80029ec:	e000      	b.n	80029f0 <DMA_CheckFifoParam+0xe8>
      break;
 80029ee:	bf00      	nop
    }
  } 
  
  return status; 
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e159      	b.n	8002cd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 8148 	bne.w	8002cca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d005      	beq.n	8002a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d130      	bne.n	8002ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 0201 	and.w	r2, r3, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d017      	beq.n	8002af0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d123      	bne.n	8002b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a2 	beq.w	8002cca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a56      	ldr	r2, [pc, #344]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b54      	ldr	r3, [pc, #336]	; (8002ce8 <HAL_GPIO_Init+0x2e8>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba2:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_GPIO_Init+0x2ec>)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a49      	ldr	r2, [pc, #292]	; (8002cf0 <HAL_GPIO_Init+0x2f0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x202>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a48      	ldr	r2, [pc, #288]	; (8002cf4 <HAL_GPIO_Init+0x2f4>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x1fe>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a47      	ldr	r2, [pc, #284]	; (8002cf8 <HAL_GPIO_Init+0x2f8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x1fa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <HAL_GPIO_Init+0x2fc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x1f6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a45      	ldr	r2, [pc, #276]	; (8002d00 <HAL_GPIO_Init+0x300>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x1f2>
 8002bee:	2304      	movs	r3, #4
 8002bf0:	e008      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e006      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e004      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_GPIO_Init+0x204>
 8002c02:	2300      	movs	r3, #0
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	f002 0203 	and.w	r2, r2, #3
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	4093      	lsls	r3, r2
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c14:	4935      	ldr	r1, [pc, #212]	; (8002cec <HAL_GPIO_Init+0x2ec>)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c46:	4a2f      	ldr	r2, [pc, #188]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c70:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c76:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9a:	4a1a      	ldr	r2, [pc, #104]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <HAL_GPIO_Init+0x304>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b0f      	cmp	r3, #15
 8002cd4:	f67f aea2 	bls.w	8002a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3724      	adds	r7, #36	; 0x24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40020000 	.word	0x40020000
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	40020800 	.word	0x40020800
 8002cfc:	40020c00 	.word	0x40020c00
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	887b      	ldrh	r3, [r7, #2]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
 8002d24:	e001      	b.n	8002d2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
 8002d44:	4613      	mov	r3, r2
 8002d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d48:	787b      	ldrb	r3, [r7, #1]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d4e:	887a      	ldrh	r2, [r7, #2]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d54:	e003      	b.n	8002d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	041a      	lsls	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	619a      	str	r2, [r3, #24]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e264      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d075      	beq.n	8002e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8a:	4ba3      	ldr	r3, [pc, #652]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d00c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	4ba0      	ldr	r3, [pc, #640]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d112      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4b9d      	ldr	r3, [pc, #628]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dae:	d10b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	4b99      	ldr	r3, [pc, #612]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05b      	beq.n	8002e74 <HAL_RCC_OscConfig+0x108>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d157      	bne.n	8002e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e23f      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x74>
 8002dd2:	4b91      	ldr	r3, [pc, #580]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a90      	ldr	r2, [pc, #576]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e01d      	b.n	8002e1c <HAL_RCC_OscConfig+0xb0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x98>
 8002dea:	4b8b      	ldr	r3, [pc, #556]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a8a      	ldr	r2, [pc, #552]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b88      	ldr	r3, [pc, #544]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a87      	ldr	r2, [pc, #540]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0xb0>
 8002e04:	4b84      	ldr	r3, [pc, #528]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a83      	ldr	r2, [pc, #524]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b81      	ldr	r3, [pc, #516]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a80      	ldr	r2, [pc, #512]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d013      	beq.n	8002e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fd78 	bl	8001918 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe fd74 	bl	8001918 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e204      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b76      	ldr	r3, [pc, #472]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0xc0>
 8002e4a:	e014      	b.n	8002e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fd64 	bl	8001918 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fe fd60 	bl	8001918 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e1f0      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	4b6c      	ldr	r3, [pc, #432]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0xe8>
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e82:	4b65      	ldr	r3, [pc, #404]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b62      	ldr	r3, [pc, #392]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d11c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b5f      	ldr	r3, [pc, #380]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d116      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	4b5c      	ldr	r3, [pc, #368]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_RCC_OscConfig+0x152>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e1c4      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b56      	ldr	r3, [pc, #344]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4952      	ldr	r1, [pc, #328]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	e03a      	b.n	8002f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002edc:	4b4f      	ldr	r3, [pc, #316]	; (800301c <HAL_RCC_OscConfig+0x2b0>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe fd19 	bl	8001918 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fe fd15 	bl	8001918 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e1a5      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	4b46      	ldr	r3, [pc, #280]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4b43      	ldr	r3, [pc, #268]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4940      	ldr	r1, [pc, #256]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
 8002f1c:	e015      	b.n	8002f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCC_OscConfig+0x2b0>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fcf8 	bl	8001918 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fcf4 	bl	8001918 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e184      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d030      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b30      	ldr	r3, [pc, #192]	; (8003020 <HAL_RCC_OscConfig+0x2b4>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe fcd8 	bl	8001918 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fcd4 	bl	8001918 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e164      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x200>
 8002f8a:	e015      	b.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8c:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_OscConfig+0x2b4>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7fe fcc1 	bl	8001918 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9a:	f7fe fcbd 	bl	8001918 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e14d      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80a0 	beq.w	8003106 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b13      	ldr	r3, [pc, #76]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a0e      	ldr	r2, [pc, #56]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_OscConfig+0x2b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d121      	bne.n	8003046 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_RCC_OscConfig+0x2b8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a07      	ldr	r2, [pc, #28]	; (8003024 <HAL_RCC_OscConfig+0x2b8>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300e:	f7fe fc83 	bl	8001918 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	e011      	b.n	800303a <HAL_RCC_OscConfig+0x2ce>
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	42470000 	.word	0x42470000
 8003020:	42470e80 	.word	0x42470e80
 8003024:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003028:	f7fe fc76 	bl	8001918 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e106      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	4b85      	ldr	r3, [pc, #532]	; (8003250 <HAL_RCC_OscConfig+0x4e4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d106      	bne.n	800305c <HAL_RCC_OscConfig+0x2f0>
 800304e:	4b81      	ldr	r3, [pc, #516]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a80      	ldr	r2, [pc, #512]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
 800305a:	e01c      	b.n	8003096 <HAL_RCC_OscConfig+0x32a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b05      	cmp	r3, #5
 8003062:	d10c      	bne.n	800307e <HAL_RCC_OscConfig+0x312>
 8003064:	4b7b      	ldr	r3, [pc, #492]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a7a      	ldr	r2, [pc, #488]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 800306a:	f043 0304 	orr.w	r3, r3, #4
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
 8003070:	4b78      	ldr	r3, [pc, #480]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	4a77      	ldr	r2, [pc, #476]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6713      	str	r3, [r2, #112]	; 0x70
 800307c:	e00b      	b.n	8003096 <HAL_RCC_OscConfig+0x32a>
 800307e:	4b75      	ldr	r3, [pc, #468]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	4a74      	ldr	r2, [pc, #464]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	6713      	str	r3, [r2, #112]	; 0x70
 800308a:	4b72      	ldr	r3, [pc, #456]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 800308c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308e:	4a71      	ldr	r2, [pc, #452]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003090:	f023 0304 	bic.w	r3, r3, #4
 8003094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d015      	beq.n	80030ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309e:	f7fe fc3b 	bl	8001918 <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe fc37 	bl	8001918 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e0c5      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030bc:	4b65      	ldr	r3, [pc, #404]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0ee      	beq.n	80030a6 <HAL_RCC_OscConfig+0x33a>
 80030c8:	e014      	b.n	80030f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fc25 	bl	8001918 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe fc21 	bl	8001918 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0af      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e8:	4b5a      	ldr	r3, [pc, #360]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ee      	bne.n	80030d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d105      	bne.n	8003106 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fa:	4b56      	ldr	r3, [pc, #344]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a55      	ldr	r2, [pc, #340]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 809b 	beq.w	8003246 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003110:	4b50      	ldr	r3, [pc, #320]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b08      	cmp	r3, #8
 800311a:	d05c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b02      	cmp	r3, #2
 8003122:	d141      	bne.n	80031a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003124:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <HAL_RCC_OscConfig+0x4ec>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fe fbf5 	bl	8001918 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003132:	f7fe fbf1 	bl	8001918 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e081      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003144:	4b43      	ldr	r3, [pc, #268]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	019b      	lsls	r3, r3, #6
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	3b01      	subs	r3, #1
 800316a:	041b      	lsls	r3, r3, #16
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	061b      	lsls	r3, r3, #24
 8003174:	4937      	ldr	r1, [pc, #220]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 8003176:	4313      	orrs	r3, r2
 8003178:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <HAL_RCC_OscConfig+0x4ec>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fe fbca 	bl	8001918 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe fbc6 	bl	8001918 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e056      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319a:	4b2e      	ldr	r3, [pc, #184]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x41c>
 80031a6:	e04e      	b.n	8003246 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCC_OscConfig+0x4ec>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fe fbb3 	bl	8001918 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe fbaf 	bl	8001918 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e03f      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c8:	4b22      	ldr	r3, [pc, #136]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x44a>
 80031d4:	e037      	b.n	8003246 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e032      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e2:	4b1c      	ldr	r3, [pc, #112]	; (8003254 <HAL_RCC_OscConfig+0x4e8>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d028      	beq.n	8003242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d121      	bne.n	8003242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d11a      	bne.n	8003242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003212:	4013      	ands	r3, r2
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003218:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800321a:	4293      	cmp	r3, r2
 800321c:	d111      	bne.n	8003242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d107      	bne.n	8003242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40007000 	.word	0x40007000
 8003254:	40023800 	.word	0x40023800
 8003258:	42470060 	.word	0x42470060

0800325c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0cc      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b68      	ldr	r3, [pc, #416]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d90c      	bls.n	8003298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b65      	ldr	r3, [pc, #404]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0b8      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d044      	beq.n	800337c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d003      	beq.n	800331a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	2b03      	cmp	r3, #3
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e067      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4934      	ldr	r1, [pc, #208]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334c:	f7fe fae4 	bl	8001918 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fe fae0 	bl	8001918 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e04f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 020c 	and.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	429a      	cmp	r2, r3
 800337a:	d1eb      	bne.n	8003354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d20c      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e032      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4916      	ldr	r1, [pc, #88]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e2:	f000 f821 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	5ccb      	ldrb	r3, [r1, r3]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fa44 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023c00 	.word	0x40023c00
 8003418:	40023800 	.word	0x40023800
 800341c:	08005ee4 	.word	0x08005ee4
 8003420:	20000004 	.word	0x20000004
 8003424:	20000008 	.word	0x20000008

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	2300      	movs	r3, #0
 800343a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003440:	4b67      	ldr	r3, [pc, #412]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00d      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x40>
 800344c:	2b08      	cmp	r3, #8
 800344e:	f200 80bd 	bhi.w	80035cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
 8003456:	2b04      	cmp	r3, #4
 8003458:	d003      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x3a>
 800345a:	e0b7      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b61      	ldr	r3, [pc, #388]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800345e:	60bb      	str	r3, [r7, #8]
       break;
 8003460:	e0b7      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003462:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003464:	60bb      	str	r3, [r7, #8]
      break;
 8003466:	e0b4      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4b5d      	ldr	r3, [pc, #372]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003472:	4b5b      	ldr	r3, [pc, #364]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d04d      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b58      	ldr	r3, [pc, #352]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	461a      	mov	r2, r3
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800348e:	f04f 0100 	mov.w	r1, #0
 8003492:	ea02 0800 	and.w	r8, r2, r0
 8003496:	ea03 0901 	and.w	r9, r3, r1
 800349a:	4640      	mov	r0, r8
 800349c:	4649      	mov	r1, r9
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	014b      	lsls	r3, r1, #5
 80034a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034ac:	0142      	lsls	r2, r0, #5
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	ebb0 0008 	subs.w	r0, r0, r8
 80034b6:	eb61 0109 	sbc.w	r1, r1, r9
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	018b      	lsls	r3, r1, #6
 80034c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034c8:	0182      	lsls	r2, r0, #6
 80034ca:	1a12      	subs	r2, r2, r0
 80034cc:	eb63 0301 	sbc.w	r3, r3, r1
 80034d0:	f04f 0000 	mov.w	r0, #0
 80034d4:	f04f 0100 	mov.w	r1, #0
 80034d8:	00d9      	lsls	r1, r3, #3
 80034da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034de:	00d0      	lsls	r0, r2, #3
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	eb12 0208 	adds.w	r2, r2, r8
 80034e8:	eb43 0309 	adc.w	r3, r3, r9
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	0259      	lsls	r1, r3, #9
 80034f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034fa:	0250      	lsls	r0, r2, #9
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	461a      	mov	r2, r3
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	f7fc ffce 	bl	80004ac <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4613      	mov	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e04a      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	099b      	lsrs	r3, r3, #6
 8003520:	461a      	mov	r2, r3
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	ea02 0400 	and.w	r4, r2, r0
 8003532:	ea03 0501 	and.w	r5, r3, r1
 8003536:	4620      	mov	r0, r4
 8003538:	4629      	mov	r1, r5
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	014b      	lsls	r3, r1, #5
 8003544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003548:	0142      	lsls	r2, r0, #5
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	1b00      	subs	r0, r0, r4
 8003550:	eb61 0105 	sbc.w	r1, r1, r5
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	018b      	lsls	r3, r1, #6
 800355e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003562:	0182      	lsls	r2, r0, #6
 8003564:	1a12      	subs	r2, r2, r0
 8003566:	eb63 0301 	sbc.w	r3, r3, r1
 800356a:	f04f 0000 	mov.w	r0, #0
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	00d9      	lsls	r1, r3, #3
 8003574:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003578:	00d0      	lsls	r0, r2, #3
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	1912      	adds	r2, r2, r4
 8003580:	eb45 0303 	adc.w	r3, r5, r3
 8003584:	f04f 0000 	mov.w	r0, #0
 8003588:	f04f 0100 	mov.w	r1, #0
 800358c:	0299      	lsls	r1, r3, #10
 800358e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003592:	0290      	lsls	r0, r2, #10
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	461a      	mov	r2, r3
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	f7fc ff82 	bl	80004ac <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4613      	mov	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	3301      	adds	r3, #1
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	60bb      	str	r3, [r7, #8]
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035ce:	60bb      	str	r3, [r7, #8]
      break;
 80035d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d2:	68bb      	ldr	r3, [r7, #8]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	007a1200 	.word	0x007a1200

080035ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000004 	.word	0x20000004

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	08005ef4 	.word	0x08005ef4

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffdc 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0b5b      	lsrs	r3, r3, #13
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	08005ef4 	.word	0x08005ef4

08003654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e041      	b.n	80036ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd ff40 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 fdda 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d001      	beq.n	800370c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e03c      	b.n	8003786 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <HAL_TIM_Base_Start+0xa0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d018      	beq.n	8003750 <HAL_TIM_Base_Start+0x5c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d013      	beq.n	8003750 <HAL_TIM_Base_Start+0x5c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1a      	ldr	r2, [pc, #104]	; (8003798 <HAL_TIM_Base_Start+0xa4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00e      	beq.n	8003750 <HAL_TIM_Base_Start+0x5c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a19      	ldr	r2, [pc, #100]	; (800379c <HAL_TIM_Base_Start+0xa8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_TIM_Base_Start+0x5c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a17      	ldr	r2, [pc, #92]	; (80037a0 <HAL_TIM_Base_Start+0xac>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_TIM_Base_Start+0x5c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <HAL_TIM_Base_Start+0xb0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d111      	bne.n	8003774 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b06      	cmp	r3, #6
 8003760:	d010      	beq.n	8003784 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	e007      	b.n	8003784 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40010000 	.word	0x40010000
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40014000 	.word	0x40014000

080037a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d001      	beq.n	80037c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e044      	b.n	800384a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_TIM_Base_Start_IT+0xb0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d018      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d013      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1a      	ldr	r2, [pc, #104]	; (800385c <HAL_TIM_Base_Start_IT+0xb4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00e      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a19      	ldr	r2, [pc, #100]	; (8003860 <HAL_TIM_Base_Start_IT+0xb8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d009      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a17      	ldr	r2, [pc, #92]	; (8003864 <HAL_TIM_Base_Start_IT+0xbc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d004      	beq.n	8003814 <HAL_TIM_Base_Start_IT+0x6c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a16      	ldr	r2, [pc, #88]	; (8003868 <HAL_TIM_Base_Start_IT+0xc0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d111      	bne.n	8003838 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d010      	beq.n	8003848 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003836:	e007      	b.n	8003848 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40010000 	.word	0x40010000
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800
 8003864:	40000c00 	.word	0x40000c00
 8003868:	40014000 	.word	0x40014000

0800386c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e041      	b.n	8003902 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f839 	bl	800390a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	4610      	mov	r0, r2
 80038ac:	f000 fcce 	bl	800424c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_TIM_PWM_Start+0x24>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e022      	b.n	800398a <HAL_TIM_PWM_Start+0x6a>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b04      	cmp	r3, #4
 8003948:	d109      	bne.n	800395e <HAL_TIM_PWM_Start+0x3e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	e015      	b.n	800398a <HAL_TIM_PWM_Start+0x6a>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d109      	bne.n	8003978 <HAL_TIM_PWM_Start+0x58>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e008      	b.n	800398a <HAL_TIM_PWM_Start+0x6a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	bf14      	ite	ne
 8003984:	2301      	movne	r3, #1
 8003986:	2300      	moveq	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e068      	b.n	8003a64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Start+0x82>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a0:	e013      	b.n	80039ca <HAL_TIM_PWM_Start+0xaa>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Start+0x92>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b0:	e00b      	b.n	80039ca <HAL_TIM_PWM_Start+0xaa>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Start+0xa2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c0:	e003      	b.n	80039ca <HAL_TIM_PWM_Start+0xaa>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2201      	movs	r2, #1
 80039d0:	6839      	ldr	r1, [r7, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fee0 	bl	8004798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a23      	ldr	r2, [pc, #140]	; (8003a6c <HAL_TIM_PWM_Start+0x14c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d107      	bne.n	80039f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <HAL_TIM_PWM_Start+0x14c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x10e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a04:	d013      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x10e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a19      	ldr	r2, [pc, #100]	; (8003a70 <HAL_TIM_PWM_Start+0x150>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x10e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <HAL_TIM_PWM_Start+0x154>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x10e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	; (8003a78 <HAL_TIM_PWM_Start+0x158>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_TIM_PWM_Start+0x10e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <HAL_TIM_PWM_Start+0x15c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d111      	bne.n	8003a52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b06      	cmp	r3, #6
 8003a3e:	d010      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a50:	e007      	b.n	8003a62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800
 8003a78:	40000c00 	.word	0x40000c00
 8003a7c:	40014000 	.word	0x40014000

08003a80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e097      	b.n	8003bc4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fd fcd9 	bl	8001460 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac4:	f023 0307 	bic.w	r3, r3, #7
 8003ac8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f000 fbb9 	bl	800424c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	4313      	orrs	r3, r2
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b20:	f023 030c 	bic.w	r3, r3, #12
 8003b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	021b      	lsls	r3, r3, #8
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	011a      	lsls	r2, r3, #4
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	031b      	lsls	r3, r3, #12
 8003b50:	4313      	orrs	r3, r2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4313      	orrs	r3, r2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bdc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003be4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bf4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d110      	bne.n	8003c1e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003bfc:	7bfb      	ldrb	r3, [r7, #15]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d102      	bne.n	8003c08 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c02:	7b7b      	ldrb	r3, [r7, #13]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d001      	beq.n	8003c0c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e069      	b.n	8003ce0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c1c:	e031      	b.n	8003c82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d110      	bne.n	8003c46 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d102      	bne.n	8003c30 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c2a:	7b3b      	ldrb	r3, [r7, #12]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d001      	beq.n	8003c34 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e055      	b.n	8003ce0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c44:	e01d      	b.n	8003c82 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d108      	bne.n	8003c5e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c4c:	7bbb      	ldrb	r3, [r7, #14]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c52:	7b7b      	ldrb	r3, [r7, #13]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d102      	bne.n	8003c5e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c58:	7b3b      	ldrb	r3, [r7, #12]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e03e      	b.n	8003ce0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_TIM_Encoder_Start+0xc4>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d008      	beq.n	8003ca0 <HAL_TIM_Encoder_Start+0xd4>
 8003c8e:	e00f      	b.n	8003cb0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2201      	movs	r2, #1
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fd7d 	bl	8004798 <TIM_CCxChannelCmd>
      break;
 8003c9e:	e016      	b.n	8003cce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2104      	movs	r1, #4
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fd75 	bl	8004798 <TIM_CCxChannelCmd>
      break;
 8003cae:	e00e      	b.n	8003cce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd6d 	bl	8004798 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	2104      	movs	r1, #4
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fd66 	bl	8004798 <TIM_CCxChannelCmd>
      break;
 8003ccc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0201 	orr.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d122      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d11b      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0202 	mvn.w	r2, #2
 8003d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa70 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fa62 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fa73 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d122      	bne.n	8003d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d11b      	bne.n	8003d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0204 	mvn.w	r2, #4
 8003d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fa46 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003d84:	e005      	b.n	8003d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fa38 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fa49 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d122      	bne.n	8003dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d11b      	bne.n	8003dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f06f 0208 	mvn.w	r2, #8
 8003dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 fa1c 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e005      	b.n	8003de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fa0e 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fa1f 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d122      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d11b      	bne.n	8003e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0210 	mvn.w	r2, #16
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2208      	movs	r2, #8
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f9f2 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f9e4 	bl	80041fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f9f5 	bl	8004224 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d10e      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d107      	bne.n	8003e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0201 	mvn.w	r2, #1
 8003e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd fa16 	bl	8001298 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	2b80      	cmp	r3, #128	; 0x80
 8003e78:	d10e      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e84:	2b80      	cmp	r3, #128	; 0x80
 8003e86:	d107      	bne.n	8003e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fd1e 	bl	80048d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	d10e      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b40      	cmp	r3, #64	; 0x40
 8003eb2:	d107      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9ba 	bl	8004238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d10e      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	d107      	bne.n	8003ef0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0220 	mvn.w	r2, #32
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fce8 	bl	80048c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e0ac      	b.n	800406c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b0c      	cmp	r3, #12
 8003f1e:	f200 809f 	bhi.w	8004060 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f5d 	.word	0x08003f5d
 8003f2c:	08004061 	.word	0x08004061
 8003f30:	08004061 	.word	0x08004061
 8003f34:	08004061 	.word	0x08004061
 8003f38:	08003f9d 	.word	0x08003f9d
 8003f3c:	08004061 	.word	0x08004061
 8003f40:	08004061 	.word	0x08004061
 8003f44:	08004061 	.word	0x08004061
 8003f48:	08003fdf 	.word	0x08003fdf
 8003f4c:	08004061 	.word	0x08004061
 8003f50:	08004061 	.word	0x08004061
 8003f54:	08004061 	.word	0x08004061
 8003f58:	0800401f 	.word	0x0800401f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f9f2 	bl	800434c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0208 	orr.w	r2, r2, #8
 8003f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0204 	bic.w	r2, r2, #4
 8003f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6999      	ldr	r1, [r3, #24]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	619a      	str	r2, [r3, #24]
      break;
 8003f9a:	e062      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fa38 	bl	8004418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6999      	ldr	r1, [r3, #24]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	021a      	lsls	r2, r3, #8
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	619a      	str	r2, [r3, #24]
      break;
 8003fdc:	e041      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fa83 	bl	80044f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0208 	orr.w	r2, r2, #8
 8003ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0204 	bic.w	r2, r2, #4
 8004008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69d9      	ldr	r1, [r3, #28]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	61da      	str	r2, [r3, #28]
      break;
 800401c:	e021      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 facd 	bl	80045c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69d9      	ldr	r1, [r3, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	021a      	lsls	r2, r3, #8
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	61da      	str	r2, [r3, #28]
      break;
 800405e:	e000      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004060:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_TIM_ConfigClockSource+0x18>
 8004088:	2302      	movs	r3, #2
 800408a:	e0b3      	b.n	80041f4 <HAL_TIM_ConfigClockSource+0x180>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c4:	d03e      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0xd0>
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ca:	f200 8087 	bhi.w	80041dc <HAL_TIM_ConfigClockSource+0x168>
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	f000 8085 	beq.w	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040da:	d87f      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x168>
 80040dc:	2b70      	cmp	r3, #112	; 0x70
 80040de:	d01a      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0xa2>
 80040e0:	2b70      	cmp	r3, #112	; 0x70
 80040e2:	d87b      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x168>
 80040e4:	2b60      	cmp	r3, #96	; 0x60
 80040e6:	d050      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x116>
 80040e8:	2b60      	cmp	r3, #96	; 0x60
 80040ea:	d877      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x168>
 80040ec:	2b50      	cmp	r3, #80	; 0x50
 80040ee:	d03c      	beq.n	800416a <HAL_TIM_ConfigClockSource+0xf6>
 80040f0:	2b50      	cmp	r3, #80	; 0x50
 80040f2:	d873      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x168>
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d058      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x136>
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d86f      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x168>
 80040fc:	2b30      	cmp	r3, #48	; 0x30
 80040fe:	d064      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x156>
 8004100:	2b30      	cmp	r3, #48	; 0x30
 8004102:	d86b      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x168>
 8004104:	2b20      	cmp	r3, #32
 8004106:	d060      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x156>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d867      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x168>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d05c      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x156>
 8004110:	2b10      	cmp	r3, #16
 8004112:	d05a      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004114:	e062      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6899      	ldr	r1, [r3, #8]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f000 fb17 	bl	8004758 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004138:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	609a      	str	r2, [r3, #8]
      break;
 8004142:	e04e      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6899      	ldr	r1, [r3, #8]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f000 fb00 	bl	8004758 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004166:	609a      	str	r2, [r3, #8]
      break;
 8004168:	e03b      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	461a      	mov	r2, r3
 8004178:	f000 fa74 	bl	8004664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2150      	movs	r1, #80	; 0x50
 8004182:	4618      	mov	r0, r3
 8004184:	f000 facd 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 8004188:	e02b      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	461a      	mov	r2, r3
 8004198:	f000 fa93 	bl	80046c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2160      	movs	r1, #96	; 0x60
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fabd 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 80041a8:	e01b      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f000 fa54 	bl	8004664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 faad 	bl	8004722 <TIM_ITRx_SetConfig>
      break;
 80041c8:	e00b      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f000 faa4 	bl	8004722 <TIM_ITRx_SetConfig>
        break;
 80041da:	e002      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041dc:	bf00      	nop
 80041de:	e000      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a34      	ldr	r2, [pc, #208]	; (8004330 <TIM_Base_SetConfig+0xe4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00f      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d00b      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a31      	ldr	r2, [pc, #196]	; (8004334 <TIM_Base_SetConfig+0xe8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d007      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a30      	ldr	r2, [pc, #192]	; (8004338 <TIM_Base_SetConfig+0xec>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0x38>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a2f      	ldr	r2, [pc, #188]	; (800433c <TIM_Base_SetConfig+0xf0>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d108      	bne.n	8004296 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a25      	ldr	r2, [pc, #148]	; (8004330 <TIM_Base_SetConfig+0xe4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01b      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d017      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a22      	ldr	r2, [pc, #136]	; (8004334 <TIM_Base_SetConfig+0xe8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a21      	ldr	r2, [pc, #132]	; (8004338 <TIM_Base_SetConfig+0xec>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00f      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a20      	ldr	r2, [pc, #128]	; (800433c <TIM_Base_SetConfig+0xf0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00b      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <TIM_Base_SetConfig+0xf4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d007      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <TIM_Base_SetConfig+0xf8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <TIM_Base_SetConfig+0x8a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <TIM_Base_SetConfig+0xfc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d108      	bne.n	80042e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a08      	ldr	r2, [pc, #32]	; (8004330 <TIM_Base_SetConfig+0xe4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d103      	bne.n	800431c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	615a      	str	r2, [r3, #20]
}
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40014000 	.word	0x40014000
 8004344:	40014400 	.word	0x40014400
 8004348:	40014800 	.word	0x40014800

0800434c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0201 	bic.w	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0303 	bic.w	r3, r3, #3
 8004382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 0302 	bic.w	r3, r3, #2
 8004394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <TIM_OC1_SetConfig+0xc8>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d10c      	bne.n	80043c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0308 	bic.w	r3, r3, #8
 80043ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f023 0304 	bic.w	r3, r3, #4
 80043c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a13      	ldr	r2, [pc, #76]	; (8004414 <TIM_OC1_SetConfig+0xc8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d111      	bne.n	80043ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	621a      	str	r2, [r3, #32]
}
 8004408:	bf00      	nop
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	40010000 	.word	0x40010000

08004418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f023 0210 	bic.w	r2, r3, #16
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f023 0320 	bic.w	r3, r3, #32
 8004462:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a1e      	ldr	r2, [pc, #120]	; (80044ec <TIM_OC2_SetConfig+0xd4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10d      	bne.n	8004494 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004492:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a15      	ldr	r2, [pc, #84]	; (80044ec <TIM_OC2_SetConfig+0xd4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d113      	bne.n	80044c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40010000 	.word	0x40010000

080044f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <TIM_OC3_SetConfig+0xd0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10d      	bne.n	800456a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	021b      	lsls	r3, r3, #8
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <TIM_OC3_SetConfig+0xd0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d113      	bne.n	800459a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	621a      	str	r2, [r3, #32]
}
 80045b4:	bf00      	nop
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40010000 	.word	0x40010000

080045c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800460e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	031b      	lsls	r3, r3, #12
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a10      	ldr	r2, [pc, #64]	; (8004660 <TIM_OC4_SetConfig+0x9c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d109      	bne.n	8004638 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800462a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	019b      	lsls	r3, r3, #6
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	621a      	str	r2, [r3, #32]
}
 8004652:	bf00      	nop
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40010000 	.word	0x40010000

08004664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f023 0201 	bic.w	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800468e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f023 030a 	bic.w	r3, r3, #10
 80046a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b087      	sub	sp, #28
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f023 0210 	bic.w	r2, r3, #16
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	031b      	lsls	r3, r3, #12
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004722:	b480      	push	{r7}
 8004724:	b085      	sub	sp, #20
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	f043 0307 	orr.w	r3, r3, #7
 8004744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	431a      	orrs	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4313      	orrs	r3, r2
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2201      	movs	r2, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1a      	ldr	r2, [r3, #32]
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	401a      	ands	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1a      	ldr	r2, [r3, #32]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	621a      	str	r2, [r3, #32]
}
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e050      	b.n	800489e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1c      	ldr	r2, [pc, #112]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d018      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004848:	d013      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a13      	ldr	r2, [pc, #76]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d10c      	bne.n	800488c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	4313      	orrs	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40014000 	.word	0x40014000

080048c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e03f      	b.n	800497a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fc fe74 	bl	80015fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fc7b 	bl	8005228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2220      	movs	r2, #32
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08a      	sub	sp, #40	; 0x28
 8004986:	af02      	add	r7, sp, #8
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d17c      	bne.n	8004a9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_UART_Transmit+0x2c>
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e075      	b.n	8004a9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_UART_Transmit+0x3e>
 80049bc:	2302      	movs	r3, #2
 80049be:	e06e      	b.n	8004a9e <HAL_UART_Transmit+0x11c>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2221      	movs	r2, #33	; 0x21
 80049d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049d6:	f7fc ff9f 	bl	8001918 <HAL_GetTick>
 80049da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	88fa      	ldrh	r2, [r7, #6]
 80049e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d108      	bne.n	8004a04 <HAL_UART_Transmit+0x82>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	e003      	b.n	8004a0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a14:	e02a      	b.n	8004a6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 fa3d 	bl	8004ea0 <UART_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e036      	b.n	8004a9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3302      	adds	r3, #2
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	e007      	b.n	8004a5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1cf      	bne.n	8004a16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2140      	movs	r1, #64	; 0x40
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fa0d 	bl	8004ea0 <UART_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e006      	b.n	8004a9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e000      	b.n	8004a9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d11d      	bne.n	8004afc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_UART_Receive_IT+0x26>
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e016      	b.n	8004afe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d101      	bne.n	8004ade <HAL_UART_Receive_IT+0x38>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e00f      	b.n	8004afe <HAL_UART_Receive_IT+0x58>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	461a      	mov	r2, r3
 8004af0:	68b9      	ldr	r1, [r7, #8]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fa1e 	bl	8004f34 <UART_Start_Receive_IT>
 8004af8:	4603      	mov	r3, r0
 8004afa:	e000      	b.n	8004afe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004afc:	2302      	movs	r3, #2
  }
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08a      	sub	sp, #40	; 0x28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10d      	bne.n	8004b5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_UART_IRQHandler+0x52>
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fad1 	bl	80050fa <UART_Receive_IT>
      return;
 8004b58:	e17c      	b.n	8004e54 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80b1 	beq.w	8004cc4 <HAL_UART_IRQHandler+0x1bc>
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <HAL_UART_IRQHandler+0x70>
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80a6 	beq.w	8004cc4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00a      	beq.n	8004b98 <HAL_UART_IRQHandler+0x90>
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	f043 0201 	orr.w	r2, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_UART_IRQHandler+0xb0>
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f043 0202 	orr.w	r2, r3, #2
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_UART_IRQHandler+0xd0>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00f      	beq.n	8004c02 <HAL_UART_IRQHandler+0xfa>
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <HAL_UART_IRQHandler+0xee>
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f043 0208 	orr.w	r2, r3, #8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 811f 	beq.w	8004e4a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_UART_IRQHandler+0x11e>
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fa6a 	bl	80050fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <HAL_UART_IRQHandler+0x146>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d031      	beq.n	8004cb2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9aa 	bl	8004fa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d123      	bne.n	8004caa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695a      	ldr	r2, [r3, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c70:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d013      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	4a77      	ldr	r2, [pc, #476]	; (8004e5c <HAL_UART_IRQHandler+0x354>)
 8004c80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fd fc5c 	bl	8002544 <HAL_DMA_Abort_IT>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d016      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca0:	e00e      	b.n	8004cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f8e6 	bl	8004e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	e00a      	b.n	8004cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8e2 	bl	8004e74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	e006      	b.n	8004cc0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8de 	bl	8004e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cbe:	e0c4      	b.n	8004e4a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc0:	bf00      	nop
    return;
 8004cc2:	e0c2      	b.n	8004e4a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	f040 80a2 	bne.w	8004e12 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 809c 	beq.w	8004e12 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 8096 	beq.w	8004e12 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d14f      	bne.n	8004daa <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d14:	8a3b      	ldrh	r3, [r7, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8099 	beq.w	8004e4e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d20:	8a3a      	ldrh	r2, [r7, #16]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	f080 8093 	bcs.w	8004e4e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8a3a      	ldrh	r2, [r7, #16]
 8004d2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d38:	d02b      	beq.n	8004d92 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d48:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695a      	ldr	r2, [r3, #20]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695a      	ldr	r2, [r3, #20]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d68:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0210 	bic.w	r2, r2, #16
 8004d86:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fd fb69 	bl	8002464 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f870 	bl	8004e88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004da8:	e051      	b.n	8004e4e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d047      	beq.n	8004e52 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004dc2:	8a7b      	ldrh	r3, [r7, #18]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d044      	beq.n	8004e52 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004dd6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0210 	bic.w	r2, r2, #16
 8004e04:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e06:	8a7b      	ldrh	r3, [r7, #18]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f83c 	bl	8004e88 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e10:	e01f      	b.n	8004e52 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <HAL_UART_IRQHandler+0x326>
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8ff 	bl	800502a <UART_Transmit_IT>
    return;
 8004e2c:	e012      	b.n	8004e54 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <HAL_UART_IRQHandler+0x34c>
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f941 	bl	80050ca <UART_EndTransmit_IT>
    return;
 8004e48:	e004      	b.n	8004e54 <HAL_UART_IRQHandler+0x34c>
    return;
 8004e4a:	bf00      	nop
 8004e4c:	e002      	b.n	8004e54 <HAL_UART_IRQHandler+0x34c>
      return;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_UART_IRQHandler+0x34c>
      return;
 8004e52:	bf00      	nop
  }
}
 8004e54:	3728      	adds	r7, #40	; 0x28
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	08005003 	.word	0x08005003

08004e60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb0:	e02c      	b.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d028      	beq.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec0:	f7fc fd2a 	bl	8001918 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d21d      	bcs.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ede:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2220      	movs	r2, #32
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e00f      	b.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4013      	ands	r3, r2
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d0c3      	beq.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	88fa      	ldrh	r2, [r7, #6]
 8004f4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	88fa      	ldrh	r2, [r7, #6]
 8004f52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2222      	movs	r2, #34	; 0x22
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f78:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695a      	ldr	r2, [r3, #20]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0201 	orr.w	r2, r2, #1
 8004f88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0220 	orr.w	r2, r2, #32
 8004f98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fbe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d107      	bne.n	8004fe8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0210 	bic.w	r2, r2, #16
 8004fe6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff ff29 	bl	8004e74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b21      	cmp	r3, #33	; 0x21
 800503c:	d13e      	bne.n	80050bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005046:	d114      	bne.n	8005072 <UART_Transmit_IT+0x48>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d110      	bne.n	8005072 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005064:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	1c9a      	adds	r2, r3, #2
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]
 8005070:	e008      	b.n	8005084 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	1c59      	adds	r1, r3, #1
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6211      	str	r1, [r2, #32]
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29b      	uxth	r3, r3
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	4619      	mov	r1, r3
 8005092:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10f      	bne.n	80050b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	e000      	b.n	80050be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
  }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff feb8 	bl	8004e60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b22      	cmp	r3, #34	; 0x22
 800510c:	f040 8087 	bne.w	800521e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005118:	d117      	bne.n	800514a <UART_Receive_IT+0x50>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d113      	bne.n	800514a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005138:	b29a      	uxth	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	1c9a      	adds	r2, r3, #2
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
 8005148:	e026      	b.n	8005198 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515c:	d007      	beq.n	800516e <UART_Receive_IT+0x74>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10a      	bne.n	800517c <UART_Receive_IT+0x82>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	b2da      	uxtb	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	e008      	b.n	800518e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4619      	mov	r1, r3
 80051a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d136      	bne.n	800521a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0220 	bic.w	r2, r2, #32
 80051ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d10e      	bne.n	800520a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0210 	bic.w	r2, r2, #16
 80051fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005200:	4619      	mov	r1, r3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff fe40 	bl	8004e88 <HAL_UARTEx_RxEventCallback>
 8005208:	e002      	b.n	8005210 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fb ff1e 	bl	800104c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	e002      	b.n	8005220 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	e000      	b.n	8005220 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800521e:	2302      	movs	r3, #2
  }
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800522c:	b09f      	sub	sp, #124	; 0x7c
 800522e:	af00      	add	r7, sp, #0
 8005230:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800523c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523e:	68d9      	ldr	r1, [r3, #12]
 8005240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	ea40 0301 	orr.w	r3, r0, r1
 8005248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800524a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	431a      	orrs	r2, r3
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	431a      	orrs	r2, r3
 800525a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	4313      	orrs	r3, r2
 8005260:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800526c:	f021 010c 	bic.w	r1, r1, #12
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005276:	430b      	orrs	r3, r1
 8005278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800527a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005286:	6999      	ldr	r1, [r3, #24]
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	ea40 0301 	orr.w	r3, r0, r1
 8005290:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4bc5      	ldr	r3, [pc, #788]	; (80055ac <UART_SetConfig+0x384>)
 8005298:	429a      	cmp	r2, r3
 800529a:	d004      	beq.n	80052a6 <UART_SetConfig+0x7e>
 800529c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4bc3      	ldr	r3, [pc, #780]	; (80055b0 <UART_SetConfig+0x388>)
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d103      	bne.n	80052ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052a6:	f7fe f9c1 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 80052aa:	6778      	str	r0, [r7, #116]	; 0x74
 80052ac:	e002      	b.n	80052b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052ae:	f7fe f9a9 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 80052b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052bc:	f040 80b6 	bne.w	800542c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c2:	461c      	mov	r4, r3
 80052c4:	f04f 0500 	mov.w	r5, #0
 80052c8:	4622      	mov	r2, r4
 80052ca:	462b      	mov	r3, r5
 80052cc:	1891      	adds	r1, r2, r2
 80052ce:	6439      	str	r1, [r7, #64]	; 0x40
 80052d0:	415b      	adcs	r3, r3
 80052d2:	647b      	str	r3, [r7, #68]	; 0x44
 80052d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052d8:	1912      	adds	r2, r2, r4
 80052da:	eb45 0303 	adc.w	r3, r5, r3
 80052de:	f04f 0000 	mov.w	r0, #0
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	00d9      	lsls	r1, r3, #3
 80052e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052ec:	00d0      	lsls	r0, r2, #3
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	1911      	adds	r1, r2, r4
 80052f4:	6639      	str	r1, [r7, #96]	; 0x60
 80052f6:	416b      	adcs	r3, r5
 80052f8:	667b      	str	r3, [r7, #100]	; 0x64
 80052fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	461a      	mov	r2, r3
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	1891      	adds	r1, r2, r2
 8005306:	63b9      	str	r1, [r7, #56]	; 0x38
 8005308:	415b      	adcs	r3, r3
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800530c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005310:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005314:	f7fb f8ca 	bl	80004ac <__aeabi_uldivmod>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4ba5      	ldr	r3, [pc, #660]	; (80055b4 <UART_SetConfig+0x38c>)
 800531e:	fba3 2302 	umull	r2, r3, r3, r2
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	011e      	lsls	r6, r3, #4
 8005326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005328:	461c      	mov	r4, r3
 800532a:	f04f 0500 	mov.w	r5, #0
 800532e:	4622      	mov	r2, r4
 8005330:	462b      	mov	r3, r5
 8005332:	1891      	adds	r1, r2, r2
 8005334:	6339      	str	r1, [r7, #48]	; 0x30
 8005336:	415b      	adcs	r3, r3
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
 800533a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800533e:	1912      	adds	r2, r2, r4
 8005340:	eb45 0303 	adc.w	r3, r5, r3
 8005344:	f04f 0000 	mov.w	r0, #0
 8005348:	f04f 0100 	mov.w	r1, #0
 800534c:	00d9      	lsls	r1, r3, #3
 800534e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005352:	00d0      	lsls	r0, r2, #3
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	1911      	adds	r1, r2, r4
 800535a:	65b9      	str	r1, [r7, #88]	; 0x58
 800535c:	416b      	adcs	r3, r5
 800535e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	461a      	mov	r2, r3
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	1891      	adds	r1, r2, r2
 800536c:	62b9      	str	r1, [r7, #40]	; 0x28
 800536e:	415b      	adcs	r3, r3
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005376:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800537a:	f7fb f897 	bl	80004ac <__aeabi_uldivmod>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4b8c      	ldr	r3, [pc, #560]	; (80055b4 <UART_SetConfig+0x38c>)
 8005384:	fba3 1302 	umull	r1, r3, r3, r2
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	2164      	movs	r1, #100	; 0x64
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	3332      	adds	r3, #50	; 0x32
 8005396:	4a87      	ldr	r2, [pc, #540]	; (80055b4 <UART_SetConfig+0x38c>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053a4:	441e      	add	r6, r3
 80053a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a8:	4618      	mov	r0, r3
 80053aa:	f04f 0100 	mov.w	r1, #0
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	1894      	adds	r4, r2, r2
 80053b4:	623c      	str	r4, [r7, #32]
 80053b6:	415b      	adcs	r3, r3
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053be:	1812      	adds	r2, r2, r0
 80053c0:	eb41 0303 	adc.w	r3, r1, r3
 80053c4:	f04f 0400 	mov.w	r4, #0
 80053c8:	f04f 0500 	mov.w	r5, #0
 80053cc:	00dd      	lsls	r5, r3, #3
 80053ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053d2:	00d4      	lsls	r4, r2, #3
 80053d4:	4622      	mov	r2, r4
 80053d6:	462b      	mov	r3, r5
 80053d8:	1814      	adds	r4, r2, r0
 80053da:	653c      	str	r4, [r7, #80]	; 0x50
 80053dc:	414b      	adcs	r3, r1
 80053de:	657b      	str	r3, [r7, #84]	; 0x54
 80053e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	461a      	mov	r2, r3
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	1891      	adds	r1, r2, r2
 80053ec:	61b9      	str	r1, [r7, #24]
 80053ee:	415b      	adcs	r3, r3
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053fa:	f7fb f857 	bl	80004ac <__aeabi_uldivmod>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4b6c      	ldr	r3, [pc, #432]	; (80055b4 <UART_SetConfig+0x38c>)
 8005404:	fba3 1302 	umull	r1, r3, r3, r2
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	2164      	movs	r1, #100	; 0x64
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	3332      	adds	r3, #50	; 0x32
 8005416:	4a67      	ldr	r2, [pc, #412]	; (80055b4 <UART_SetConfig+0x38c>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	f003 0207 	and.w	r2, r3, #7
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4432      	add	r2, r6
 8005428:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800542a:	e0b9      	b.n	80055a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800542c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800542e:	461c      	mov	r4, r3
 8005430:	f04f 0500 	mov.w	r5, #0
 8005434:	4622      	mov	r2, r4
 8005436:	462b      	mov	r3, r5
 8005438:	1891      	adds	r1, r2, r2
 800543a:	6139      	str	r1, [r7, #16]
 800543c:	415b      	adcs	r3, r3
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005444:	1912      	adds	r2, r2, r4
 8005446:	eb45 0303 	adc.w	r3, r5, r3
 800544a:	f04f 0000 	mov.w	r0, #0
 800544e:	f04f 0100 	mov.w	r1, #0
 8005452:	00d9      	lsls	r1, r3, #3
 8005454:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005458:	00d0      	lsls	r0, r2, #3
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	eb12 0804 	adds.w	r8, r2, r4
 8005462:	eb43 0905 	adc.w	r9, r3, r5
 8005466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4618      	mov	r0, r3
 800546c:	f04f 0100 	mov.w	r1, #0
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	008b      	lsls	r3, r1, #2
 800547a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800547e:	0082      	lsls	r2, r0, #2
 8005480:	4640      	mov	r0, r8
 8005482:	4649      	mov	r1, r9
 8005484:	f7fb f812 	bl	80004ac <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4b49      	ldr	r3, [pc, #292]	; (80055b4 <UART_SetConfig+0x38c>)
 800548e:	fba3 2302 	umull	r2, r3, r3, r2
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	011e      	lsls	r6, r3, #4
 8005496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005498:	4618      	mov	r0, r3
 800549a:	f04f 0100 	mov.w	r1, #0
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	1894      	adds	r4, r2, r2
 80054a4:	60bc      	str	r4, [r7, #8]
 80054a6:	415b      	adcs	r3, r3
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054ae:	1812      	adds	r2, r2, r0
 80054b0:	eb41 0303 	adc.w	r3, r1, r3
 80054b4:	f04f 0400 	mov.w	r4, #0
 80054b8:	f04f 0500 	mov.w	r5, #0
 80054bc:	00dd      	lsls	r5, r3, #3
 80054be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054c2:	00d4      	lsls	r4, r2, #3
 80054c4:	4622      	mov	r2, r4
 80054c6:	462b      	mov	r3, r5
 80054c8:	1814      	adds	r4, r2, r0
 80054ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80054cc:	414b      	adcs	r3, r1
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	4618      	mov	r0, r3
 80054d6:	f04f 0100 	mov.w	r1, #0
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	008b      	lsls	r3, r1, #2
 80054e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054e8:	0082      	lsls	r2, r0, #2
 80054ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054ee:	f7fa ffdd 	bl	80004ac <__aeabi_uldivmod>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <UART_SetConfig+0x38c>)
 80054f8:	fba3 1302 	umull	r1, r3, r3, r2
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	2164      	movs	r1, #100	; 0x64
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	3332      	adds	r3, #50	; 0x32
 800550a:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <UART_SetConfig+0x38c>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005516:	441e      	add	r6, r3
 8005518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551a:	4618      	mov	r0, r3
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	1894      	adds	r4, r2, r2
 8005526:	603c      	str	r4, [r7, #0]
 8005528:	415b      	adcs	r3, r3
 800552a:	607b      	str	r3, [r7, #4]
 800552c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005530:	1812      	adds	r2, r2, r0
 8005532:	eb41 0303 	adc.w	r3, r1, r3
 8005536:	f04f 0400 	mov.w	r4, #0
 800553a:	f04f 0500 	mov.w	r5, #0
 800553e:	00dd      	lsls	r5, r3, #3
 8005540:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005544:	00d4      	lsls	r4, r2, #3
 8005546:	4622      	mov	r2, r4
 8005548:	462b      	mov	r3, r5
 800554a:	eb12 0a00 	adds.w	sl, r2, r0
 800554e:	eb43 0b01 	adc.w	fp, r3, r1
 8005552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4618      	mov	r0, r3
 8005558:	f04f 0100 	mov.w	r1, #0
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	008b      	lsls	r3, r1, #2
 8005566:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800556a:	0082      	lsls	r2, r0, #2
 800556c:	4650      	mov	r0, sl
 800556e:	4659      	mov	r1, fp
 8005570:	f7fa ff9c 	bl	80004ac <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <UART_SetConfig+0x38c>)
 800557a:	fba3 1302 	umull	r1, r3, r3, r2
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	2164      	movs	r1, #100	; 0x64
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	3332      	adds	r3, #50	; 0x32
 800558c:	4a09      	ldr	r2, [pc, #36]	; (80055b4 <UART_SetConfig+0x38c>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	f003 020f 	and.w	r2, r3, #15
 8005598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4432      	add	r2, r6
 800559e:	609a      	str	r2, [r3, #8]
}
 80055a0:	bf00      	nop
 80055a2:	377c      	adds	r7, #124	; 0x7c
 80055a4:	46bd      	mov	sp, r7
 80055a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055aa:	bf00      	nop
 80055ac:	40011000 	.word	0x40011000
 80055b0:	40011400 	.word	0x40011400
 80055b4:	51eb851f 	.word	0x51eb851f

080055b8 <__errno>:
 80055b8:	4b01      	ldr	r3, [pc, #4]	; (80055c0 <__errno+0x8>)
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000010 	.word	0x20000010

080055c4 <__libc_init_array>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4d0d      	ldr	r5, [pc, #52]	; (80055fc <__libc_init_array+0x38>)
 80055c8:	4c0d      	ldr	r4, [pc, #52]	; (8005600 <__libc_init_array+0x3c>)
 80055ca:	1b64      	subs	r4, r4, r5
 80055cc:	10a4      	asrs	r4, r4, #2
 80055ce:	2600      	movs	r6, #0
 80055d0:	42a6      	cmp	r6, r4
 80055d2:	d109      	bne.n	80055e8 <__libc_init_array+0x24>
 80055d4:	4d0b      	ldr	r5, [pc, #44]	; (8005604 <__libc_init_array+0x40>)
 80055d6:	4c0c      	ldr	r4, [pc, #48]	; (8005608 <__libc_init_array+0x44>)
 80055d8:	f000 fc4e 	bl	8005e78 <_init>
 80055dc:	1b64      	subs	r4, r4, r5
 80055de:	10a4      	asrs	r4, r4, #2
 80055e0:	2600      	movs	r6, #0
 80055e2:	42a6      	cmp	r6, r4
 80055e4:	d105      	bne.n	80055f2 <__libc_init_array+0x2e>
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ec:	4798      	blx	r3
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7ee      	b.n	80055d0 <__libc_init_array+0xc>
 80055f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f6:	4798      	blx	r3
 80055f8:	3601      	adds	r6, #1
 80055fa:	e7f2      	b.n	80055e2 <__libc_init_array+0x1e>
 80055fc:	08005f40 	.word	0x08005f40
 8005600:	08005f40 	.word	0x08005f40
 8005604:	08005f40 	.word	0x08005f40
 8005608:	08005f44 	.word	0x08005f44

0800560c <memset>:
 800560c:	4402      	add	r2, r0
 800560e:	4603      	mov	r3, r0
 8005610:	4293      	cmp	r3, r2
 8005612:	d100      	bne.n	8005616 <memset+0xa>
 8005614:	4770      	bx	lr
 8005616:	f803 1b01 	strb.w	r1, [r3], #1
 800561a:	e7f9      	b.n	8005610 <memset+0x4>

0800561c <siprintf>:
 800561c:	b40e      	push	{r1, r2, r3}
 800561e:	b500      	push	{lr}
 8005620:	b09c      	sub	sp, #112	; 0x70
 8005622:	ab1d      	add	r3, sp, #116	; 0x74
 8005624:	9002      	str	r0, [sp, #8]
 8005626:	9006      	str	r0, [sp, #24]
 8005628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800562c:	4809      	ldr	r0, [pc, #36]	; (8005654 <siprintf+0x38>)
 800562e:	9107      	str	r1, [sp, #28]
 8005630:	9104      	str	r1, [sp, #16]
 8005632:	4909      	ldr	r1, [pc, #36]	; (8005658 <siprintf+0x3c>)
 8005634:	f853 2b04 	ldr.w	r2, [r3], #4
 8005638:	9105      	str	r1, [sp, #20]
 800563a:	6800      	ldr	r0, [r0, #0]
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	a902      	add	r1, sp, #8
 8005640:	f000 f868 	bl	8005714 <_svfiprintf_r>
 8005644:	9b02      	ldr	r3, [sp, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	b01c      	add	sp, #112	; 0x70
 800564c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005650:	b003      	add	sp, #12
 8005652:	4770      	bx	lr
 8005654:	20000010 	.word	0x20000010
 8005658:	ffff0208 	.word	0xffff0208

0800565c <__ssputs_r>:
 800565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005660:	688e      	ldr	r6, [r1, #8]
 8005662:	429e      	cmp	r6, r3
 8005664:	4682      	mov	sl, r0
 8005666:	460c      	mov	r4, r1
 8005668:	4690      	mov	r8, r2
 800566a:	461f      	mov	r7, r3
 800566c:	d838      	bhi.n	80056e0 <__ssputs_r+0x84>
 800566e:	898a      	ldrh	r2, [r1, #12]
 8005670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005674:	d032      	beq.n	80056dc <__ssputs_r+0x80>
 8005676:	6825      	ldr	r5, [r4, #0]
 8005678:	6909      	ldr	r1, [r1, #16]
 800567a:	eba5 0901 	sub.w	r9, r5, r1
 800567e:	6965      	ldr	r5, [r4, #20]
 8005680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005684:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005688:	3301      	adds	r3, #1
 800568a:	444b      	add	r3, r9
 800568c:	106d      	asrs	r5, r5, #1
 800568e:	429d      	cmp	r5, r3
 8005690:	bf38      	it	cc
 8005692:	461d      	movcc	r5, r3
 8005694:	0553      	lsls	r3, r2, #21
 8005696:	d531      	bpl.n	80056fc <__ssputs_r+0xa0>
 8005698:	4629      	mov	r1, r5
 800569a:	f000 fb47 	bl	8005d2c <_malloc_r>
 800569e:	4606      	mov	r6, r0
 80056a0:	b950      	cbnz	r0, 80056b8 <__ssputs_r+0x5c>
 80056a2:	230c      	movs	r3, #12
 80056a4:	f8ca 3000 	str.w	r3, [sl]
 80056a8:	89a3      	ldrh	r3, [r4, #12]
 80056aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295
 80056b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b8:	6921      	ldr	r1, [r4, #16]
 80056ba:	464a      	mov	r2, r9
 80056bc:	f000 fabe 	bl	8005c3c <memcpy>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	81a3      	strh	r3, [r4, #12]
 80056cc:	6126      	str	r6, [r4, #16]
 80056ce:	6165      	str	r5, [r4, #20]
 80056d0:	444e      	add	r6, r9
 80056d2:	eba5 0509 	sub.w	r5, r5, r9
 80056d6:	6026      	str	r6, [r4, #0]
 80056d8:	60a5      	str	r5, [r4, #8]
 80056da:	463e      	mov	r6, r7
 80056dc:	42be      	cmp	r6, r7
 80056de:	d900      	bls.n	80056e2 <__ssputs_r+0x86>
 80056e0:	463e      	mov	r6, r7
 80056e2:	4632      	mov	r2, r6
 80056e4:	6820      	ldr	r0, [r4, #0]
 80056e6:	4641      	mov	r1, r8
 80056e8:	f000 fab6 	bl	8005c58 <memmove>
 80056ec:	68a3      	ldr	r3, [r4, #8]
 80056ee:	6822      	ldr	r2, [r4, #0]
 80056f0:	1b9b      	subs	r3, r3, r6
 80056f2:	4432      	add	r2, r6
 80056f4:	60a3      	str	r3, [r4, #8]
 80056f6:	6022      	str	r2, [r4, #0]
 80056f8:	2000      	movs	r0, #0
 80056fa:	e7db      	b.n	80056b4 <__ssputs_r+0x58>
 80056fc:	462a      	mov	r2, r5
 80056fe:	f000 fb6f 	bl	8005de0 <_realloc_r>
 8005702:	4606      	mov	r6, r0
 8005704:	2800      	cmp	r0, #0
 8005706:	d1e1      	bne.n	80056cc <__ssputs_r+0x70>
 8005708:	6921      	ldr	r1, [r4, #16]
 800570a:	4650      	mov	r0, sl
 800570c:	f000 fabe 	bl	8005c8c <_free_r>
 8005710:	e7c7      	b.n	80056a2 <__ssputs_r+0x46>
	...

08005714 <_svfiprintf_r>:
 8005714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005718:	4698      	mov	r8, r3
 800571a:	898b      	ldrh	r3, [r1, #12]
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	b09d      	sub	sp, #116	; 0x74
 8005720:	4607      	mov	r7, r0
 8005722:	460d      	mov	r5, r1
 8005724:	4614      	mov	r4, r2
 8005726:	d50e      	bpl.n	8005746 <_svfiprintf_r+0x32>
 8005728:	690b      	ldr	r3, [r1, #16]
 800572a:	b963      	cbnz	r3, 8005746 <_svfiprintf_r+0x32>
 800572c:	2140      	movs	r1, #64	; 0x40
 800572e:	f000 fafd 	bl	8005d2c <_malloc_r>
 8005732:	6028      	str	r0, [r5, #0]
 8005734:	6128      	str	r0, [r5, #16]
 8005736:	b920      	cbnz	r0, 8005742 <_svfiprintf_r+0x2e>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	f04f 30ff 	mov.w	r0, #4294967295
 8005740:	e0d1      	b.n	80058e6 <_svfiprintf_r+0x1d2>
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	616b      	str	r3, [r5, #20]
 8005746:	2300      	movs	r3, #0
 8005748:	9309      	str	r3, [sp, #36]	; 0x24
 800574a:	2320      	movs	r3, #32
 800574c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005750:	f8cd 800c 	str.w	r8, [sp, #12]
 8005754:	2330      	movs	r3, #48	; 0x30
 8005756:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005900 <_svfiprintf_r+0x1ec>
 800575a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800575e:	f04f 0901 	mov.w	r9, #1
 8005762:	4623      	mov	r3, r4
 8005764:	469a      	mov	sl, r3
 8005766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800576a:	b10a      	cbz	r2, 8005770 <_svfiprintf_r+0x5c>
 800576c:	2a25      	cmp	r2, #37	; 0x25
 800576e:	d1f9      	bne.n	8005764 <_svfiprintf_r+0x50>
 8005770:	ebba 0b04 	subs.w	fp, sl, r4
 8005774:	d00b      	beq.n	800578e <_svfiprintf_r+0x7a>
 8005776:	465b      	mov	r3, fp
 8005778:	4622      	mov	r2, r4
 800577a:	4629      	mov	r1, r5
 800577c:	4638      	mov	r0, r7
 800577e:	f7ff ff6d 	bl	800565c <__ssputs_r>
 8005782:	3001      	adds	r0, #1
 8005784:	f000 80aa 	beq.w	80058dc <_svfiprintf_r+0x1c8>
 8005788:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800578a:	445a      	add	r2, fp
 800578c:	9209      	str	r2, [sp, #36]	; 0x24
 800578e:	f89a 3000 	ldrb.w	r3, [sl]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80a2 	beq.w	80058dc <_svfiprintf_r+0x1c8>
 8005798:	2300      	movs	r3, #0
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a2:	f10a 0a01 	add.w	sl, sl, #1
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	9307      	str	r3, [sp, #28]
 80057aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057ae:	931a      	str	r3, [sp, #104]	; 0x68
 80057b0:	4654      	mov	r4, sl
 80057b2:	2205      	movs	r2, #5
 80057b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b8:	4851      	ldr	r0, [pc, #324]	; (8005900 <_svfiprintf_r+0x1ec>)
 80057ba:	f7fa fd19 	bl	80001f0 <memchr>
 80057be:	9a04      	ldr	r2, [sp, #16]
 80057c0:	b9d8      	cbnz	r0, 80057fa <_svfiprintf_r+0xe6>
 80057c2:	06d0      	lsls	r0, r2, #27
 80057c4:	bf44      	itt	mi
 80057c6:	2320      	movmi	r3, #32
 80057c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057cc:	0711      	lsls	r1, r2, #28
 80057ce:	bf44      	itt	mi
 80057d0:	232b      	movmi	r3, #43	; 0x2b
 80057d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057d6:	f89a 3000 	ldrb.w	r3, [sl]
 80057da:	2b2a      	cmp	r3, #42	; 0x2a
 80057dc:	d015      	beq.n	800580a <_svfiprintf_r+0xf6>
 80057de:	9a07      	ldr	r2, [sp, #28]
 80057e0:	4654      	mov	r4, sl
 80057e2:	2000      	movs	r0, #0
 80057e4:	f04f 0c0a 	mov.w	ip, #10
 80057e8:	4621      	mov	r1, r4
 80057ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ee:	3b30      	subs	r3, #48	; 0x30
 80057f0:	2b09      	cmp	r3, #9
 80057f2:	d94e      	bls.n	8005892 <_svfiprintf_r+0x17e>
 80057f4:	b1b0      	cbz	r0, 8005824 <_svfiprintf_r+0x110>
 80057f6:	9207      	str	r2, [sp, #28]
 80057f8:	e014      	b.n	8005824 <_svfiprintf_r+0x110>
 80057fa:	eba0 0308 	sub.w	r3, r0, r8
 80057fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005802:	4313      	orrs	r3, r2
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	46a2      	mov	sl, r4
 8005808:	e7d2      	b.n	80057b0 <_svfiprintf_r+0x9c>
 800580a:	9b03      	ldr	r3, [sp, #12]
 800580c:	1d19      	adds	r1, r3, #4
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	9103      	str	r1, [sp, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	bfbb      	ittet	lt
 8005816:	425b      	neglt	r3, r3
 8005818:	f042 0202 	orrlt.w	r2, r2, #2
 800581c:	9307      	strge	r3, [sp, #28]
 800581e:	9307      	strlt	r3, [sp, #28]
 8005820:	bfb8      	it	lt
 8005822:	9204      	strlt	r2, [sp, #16]
 8005824:	7823      	ldrb	r3, [r4, #0]
 8005826:	2b2e      	cmp	r3, #46	; 0x2e
 8005828:	d10c      	bne.n	8005844 <_svfiprintf_r+0x130>
 800582a:	7863      	ldrb	r3, [r4, #1]
 800582c:	2b2a      	cmp	r3, #42	; 0x2a
 800582e:	d135      	bne.n	800589c <_svfiprintf_r+0x188>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	1d1a      	adds	r2, r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	9203      	str	r2, [sp, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	bfb8      	it	lt
 800583c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005840:	3402      	adds	r4, #2
 8005842:	9305      	str	r3, [sp, #20]
 8005844:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005910 <_svfiprintf_r+0x1fc>
 8005848:	7821      	ldrb	r1, [r4, #0]
 800584a:	2203      	movs	r2, #3
 800584c:	4650      	mov	r0, sl
 800584e:	f7fa fccf 	bl	80001f0 <memchr>
 8005852:	b140      	cbz	r0, 8005866 <_svfiprintf_r+0x152>
 8005854:	2340      	movs	r3, #64	; 0x40
 8005856:	eba0 000a 	sub.w	r0, r0, sl
 800585a:	fa03 f000 	lsl.w	r0, r3, r0
 800585e:	9b04      	ldr	r3, [sp, #16]
 8005860:	4303      	orrs	r3, r0
 8005862:	3401      	adds	r4, #1
 8005864:	9304      	str	r3, [sp, #16]
 8005866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586a:	4826      	ldr	r0, [pc, #152]	; (8005904 <_svfiprintf_r+0x1f0>)
 800586c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005870:	2206      	movs	r2, #6
 8005872:	f7fa fcbd 	bl	80001f0 <memchr>
 8005876:	2800      	cmp	r0, #0
 8005878:	d038      	beq.n	80058ec <_svfiprintf_r+0x1d8>
 800587a:	4b23      	ldr	r3, [pc, #140]	; (8005908 <_svfiprintf_r+0x1f4>)
 800587c:	bb1b      	cbnz	r3, 80058c6 <_svfiprintf_r+0x1b2>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	3307      	adds	r3, #7
 8005882:	f023 0307 	bic.w	r3, r3, #7
 8005886:	3308      	adds	r3, #8
 8005888:	9303      	str	r3, [sp, #12]
 800588a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588c:	4433      	add	r3, r6
 800588e:	9309      	str	r3, [sp, #36]	; 0x24
 8005890:	e767      	b.n	8005762 <_svfiprintf_r+0x4e>
 8005892:	fb0c 3202 	mla	r2, ip, r2, r3
 8005896:	460c      	mov	r4, r1
 8005898:	2001      	movs	r0, #1
 800589a:	e7a5      	b.n	80057e8 <_svfiprintf_r+0xd4>
 800589c:	2300      	movs	r3, #0
 800589e:	3401      	adds	r4, #1
 80058a0:	9305      	str	r3, [sp, #20]
 80058a2:	4619      	mov	r1, r3
 80058a4:	f04f 0c0a 	mov.w	ip, #10
 80058a8:	4620      	mov	r0, r4
 80058aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ae:	3a30      	subs	r2, #48	; 0x30
 80058b0:	2a09      	cmp	r2, #9
 80058b2:	d903      	bls.n	80058bc <_svfiprintf_r+0x1a8>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0c5      	beq.n	8005844 <_svfiprintf_r+0x130>
 80058b8:	9105      	str	r1, [sp, #20]
 80058ba:	e7c3      	b.n	8005844 <_svfiprintf_r+0x130>
 80058bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80058c0:	4604      	mov	r4, r0
 80058c2:	2301      	movs	r3, #1
 80058c4:	e7f0      	b.n	80058a8 <_svfiprintf_r+0x194>
 80058c6:	ab03      	add	r3, sp, #12
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	462a      	mov	r2, r5
 80058cc:	4b0f      	ldr	r3, [pc, #60]	; (800590c <_svfiprintf_r+0x1f8>)
 80058ce:	a904      	add	r1, sp, #16
 80058d0:	4638      	mov	r0, r7
 80058d2:	f3af 8000 	nop.w
 80058d6:	1c42      	adds	r2, r0, #1
 80058d8:	4606      	mov	r6, r0
 80058da:	d1d6      	bne.n	800588a <_svfiprintf_r+0x176>
 80058dc:	89ab      	ldrh	r3, [r5, #12]
 80058de:	065b      	lsls	r3, r3, #25
 80058e0:	f53f af2c 	bmi.w	800573c <_svfiprintf_r+0x28>
 80058e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058e6:	b01d      	add	sp, #116	; 0x74
 80058e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ec:	ab03      	add	r3, sp, #12
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	462a      	mov	r2, r5
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <_svfiprintf_r+0x1f8>)
 80058f4:	a904      	add	r1, sp, #16
 80058f6:	4638      	mov	r0, r7
 80058f8:	f000 f87a 	bl	80059f0 <_printf_i>
 80058fc:	e7eb      	b.n	80058d6 <_svfiprintf_r+0x1c2>
 80058fe:	bf00      	nop
 8005900:	08005f04 	.word	0x08005f04
 8005904:	08005f0e 	.word	0x08005f0e
 8005908:	00000000 	.word	0x00000000
 800590c:	0800565d 	.word	0x0800565d
 8005910:	08005f0a 	.word	0x08005f0a

08005914 <_printf_common>:
 8005914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005918:	4616      	mov	r6, r2
 800591a:	4699      	mov	r9, r3
 800591c:	688a      	ldr	r2, [r1, #8]
 800591e:	690b      	ldr	r3, [r1, #16]
 8005920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005924:	4293      	cmp	r3, r2
 8005926:	bfb8      	it	lt
 8005928:	4613      	movlt	r3, r2
 800592a:	6033      	str	r3, [r6, #0]
 800592c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005930:	4607      	mov	r7, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b10a      	cbz	r2, 800593a <_printf_common+0x26>
 8005936:	3301      	adds	r3, #1
 8005938:	6033      	str	r3, [r6, #0]
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	0699      	lsls	r1, r3, #26
 800593e:	bf42      	ittt	mi
 8005940:	6833      	ldrmi	r3, [r6, #0]
 8005942:	3302      	addmi	r3, #2
 8005944:	6033      	strmi	r3, [r6, #0]
 8005946:	6825      	ldr	r5, [r4, #0]
 8005948:	f015 0506 	ands.w	r5, r5, #6
 800594c:	d106      	bne.n	800595c <_printf_common+0x48>
 800594e:	f104 0a19 	add.w	sl, r4, #25
 8005952:	68e3      	ldr	r3, [r4, #12]
 8005954:	6832      	ldr	r2, [r6, #0]
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	42ab      	cmp	r3, r5
 800595a:	dc26      	bgt.n	80059aa <_printf_common+0x96>
 800595c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005960:	1e13      	subs	r3, r2, #0
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	bf18      	it	ne
 8005966:	2301      	movne	r3, #1
 8005968:	0692      	lsls	r2, r2, #26
 800596a:	d42b      	bmi.n	80059c4 <_printf_common+0xb0>
 800596c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005970:	4649      	mov	r1, r9
 8005972:	4638      	mov	r0, r7
 8005974:	47c0      	blx	r8
 8005976:	3001      	adds	r0, #1
 8005978:	d01e      	beq.n	80059b8 <_printf_common+0xa4>
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	68e5      	ldr	r5, [r4, #12]
 800597e:	6832      	ldr	r2, [r6, #0]
 8005980:	f003 0306 	and.w	r3, r3, #6
 8005984:	2b04      	cmp	r3, #4
 8005986:	bf08      	it	eq
 8005988:	1aad      	subeq	r5, r5, r2
 800598a:	68a3      	ldr	r3, [r4, #8]
 800598c:	6922      	ldr	r2, [r4, #16]
 800598e:	bf0c      	ite	eq
 8005990:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005994:	2500      	movne	r5, #0
 8005996:	4293      	cmp	r3, r2
 8005998:	bfc4      	itt	gt
 800599a:	1a9b      	subgt	r3, r3, r2
 800599c:	18ed      	addgt	r5, r5, r3
 800599e:	2600      	movs	r6, #0
 80059a0:	341a      	adds	r4, #26
 80059a2:	42b5      	cmp	r5, r6
 80059a4:	d11a      	bne.n	80059dc <_printf_common+0xc8>
 80059a6:	2000      	movs	r0, #0
 80059a8:	e008      	b.n	80059bc <_printf_common+0xa8>
 80059aa:	2301      	movs	r3, #1
 80059ac:	4652      	mov	r2, sl
 80059ae:	4649      	mov	r1, r9
 80059b0:	4638      	mov	r0, r7
 80059b2:	47c0      	blx	r8
 80059b4:	3001      	adds	r0, #1
 80059b6:	d103      	bne.n	80059c0 <_printf_common+0xac>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c0:	3501      	adds	r5, #1
 80059c2:	e7c6      	b.n	8005952 <_printf_common+0x3e>
 80059c4:	18e1      	adds	r1, r4, r3
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	2030      	movs	r0, #48	; 0x30
 80059ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059ce:	4422      	add	r2, r4
 80059d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059d8:	3302      	adds	r3, #2
 80059da:	e7c7      	b.n	800596c <_printf_common+0x58>
 80059dc:	2301      	movs	r3, #1
 80059de:	4622      	mov	r2, r4
 80059e0:	4649      	mov	r1, r9
 80059e2:	4638      	mov	r0, r7
 80059e4:	47c0      	blx	r8
 80059e6:	3001      	adds	r0, #1
 80059e8:	d0e6      	beq.n	80059b8 <_printf_common+0xa4>
 80059ea:	3601      	adds	r6, #1
 80059ec:	e7d9      	b.n	80059a2 <_printf_common+0x8e>
	...

080059f0 <_printf_i>:
 80059f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	460c      	mov	r4, r1
 80059f6:	4691      	mov	r9, r2
 80059f8:	7e27      	ldrb	r7, [r4, #24]
 80059fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059fc:	2f78      	cmp	r7, #120	; 0x78
 80059fe:	4680      	mov	r8, r0
 8005a00:	469a      	mov	sl, r3
 8005a02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a06:	d807      	bhi.n	8005a18 <_printf_i+0x28>
 8005a08:	2f62      	cmp	r7, #98	; 0x62
 8005a0a:	d80a      	bhi.n	8005a22 <_printf_i+0x32>
 8005a0c:	2f00      	cmp	r7, #0
 8005a0e:	f000 80d8 	beq.w	8005bc2 <_printf_i+0x1d2>
 8005a12:	2f58      	cmp	r7, #88	; 0x58
 8005a14:	f000 80a3 	beq.w	8005b5e <_printf_i+0x16e>
 8005a18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a20:	e03a      	b.n	8005a98 <_printf_i+0xa8>
 8005a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a26:	2b15      	cmp	r3, #21
 8005a28:	d8f6      	bhi.n	8005a18 <_printf_i+0x28>
 8005a2a:	a001      	add	r0, pc, #4	; (adr r0, 8005a30 <_printf_i+0x40>)
 8005a2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a30:	08005a89 	.word	0x08005a89
 8005a34:	08005a9d 	.word	0x08005a9d
 8005a38:	08005a19 	.word	0x08005a19
 8005a3c:	08005a19 	.word	0x08005a19
 8005a40:	08005a19 	.word	0x08005a19
 8005a44:	08005a19 	.word	0x08005a19
 8005a48:	08005a9d 	.word	0x08005a9d
 8005a4c:	08005a19 	.word	0x08005a19
 8005a50:	08005a19 	.word	0x08005a19
 8005a54:	08005a19 	.word	0x08005a19
 8005a58:	08005a19 	.word	0x08005a19
 8005a5c:	08005ba9 	.word	0x08005ba9
 8005a60:	08005acd 	.word	0x08005acd
 8005a64:	08005b8b 	.word	0x08005b8b
 8005a68:	08005a19 	.word	0x08005a19
 8005a6c:	08005a19 	.word	0x08005a19
 8005a70:	08005bcb 	.word	0x08005bcb
 8005a74:	08005a19 	.word	0x08005a19
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005a19 	.word	0x08005a19
 8005a80:	08005a19 	.word	0x08005a19
 8005a84:	08005b93 	.word	0x08005b93
 8005a88:	680b      	ldr	r3, [r1, #0]
 8005a8a:	1d1a      	adds	r2, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	600a      	str	r2, [r1, #0]
 8005a90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0a3      	b.n	8005be4 <_printf_i+0x1f4>
 8005a9c:	6825      	ldr	r5, [r4, #0]
 8005a9e:	6808      	ldr	r0, [r1, #0]
 8005aa0:	062e      	lsls	r6, r5, #24
 8005aa2:	f100 0304 	add.w	r3, r0, #4
 8005aa6:	d50a      	bpl.n	8005abe <_printf_i+0xce>
 8005aa8:	6805      	ldr	r5, [r0, #0]
 8005aaa:	600b      	str	r3, [r1, #0]
 8005aac:	2d00      	cmp	r5, #0
 8005aae:	da03      	bge.n	8005ab8 <_printf_i+0xc8>
 8005ab0:	232d      	movs	r3, #45	; 0x2d
 8005ab2:	426d      	negs	r5, r5
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	485e      	ldr	r0, [pc, #376]	; (8005c34 <_printf_i+0x244>)
 8005aba:	230a      	movs	r3, #10
 8005abc:	e019      	b.n	8005af2 <_printf_i+0x102>
 8005abe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ac2:	6805      	ldr	r5, [r0, #0]
 8005ac4:	600b      	str	r3, [r1, #0]
 8005ac6:	bf18      	it	ne
 8005ac8:	b22d      	sxthne	r5, r5
 8005aca:	e7ef      	b.n	8005aac <_printf_i+0xbc>
 8005acc:	680b      	ldr	r3, [r1, #0]
 8005ace:	6825      	ldr	r5, [r4, #0]
 8005ad0:	1d18      	adds	r0, r3, #4
 8005ad2:	6008      	str	r0, [r1, #0]
 8005ad4:	0628      	lsls	r0, r5, #24
 8005ad6:	d501      	bpl.n	8005adc <_printf_i+0xec>
 8005ad8:	681d      	ldr	r5, [r3, #0]
 8005ada:	e002      	b.n	8005ae2 <_printf_i+0xf2>
 8005adc:	0669      	lsls	r1, r5, #25
 8005ade:	d5fb      	bpl.n	8005ad8 <_printf_i+0xe8>
 8005ae0:	881d      	ldrh	r5, [r3, #0]
 8005ae2:	4854      	ldr	r0, [pc, #336]	; (8005c34 <_printf_i+0x244>)
 8005ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ae6:	bf0c      	ite	eq
 8005ae8:	2308      	moveq	r3, #8
 8005aea:	230a      	movne	r3, #10
 8005aec:	2100      	movs	r1, #0
 8005aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005af2:	6866      	ldr	r6, [r4, #4]
 8005af4:	60a6      	str	r6, [r4, #8]
 8005af6:	2e00      	cmp	r6, #0
 8005af8:	bfa2      	ittt	ge
 8005afa:	6821      	ldrge	r1, [r4, #0]
 8005afc:	f021 0104 	bicge.w	r1, r1, #4
 8005b00:	6021      	strge	r1, [r4, #0]
 8005b02:	b90d      	cbnz	r5, 8005b08 <_printf_i+0x118>
 8005b04:	2e00      	cmp	r6, #0
 8005b06:	d04d      	beq.n	8005ba4 <_printf_i+0x1b4>
 8005b08:	4616      	mov	r6, r2
 8005b0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b0e:	fb03 5711 	mls	r7, r3, r1, r5
 8005b12:	5dc7      	ldrb	r7, [r0, r7]
 8005b14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b18:	462f      	mov	r7, r5
 8005b1a:	42bb      	cmp	r3, r7
 8005b1c:	460d      	mov	r5, r1
 8005b1e:	d9f4      	bls.n	8005b0a <_printf_i+0x11a>
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d10b      	bne.n	8005b3c <_printf_i+0x14c>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	07df      	lsls	r7, r3, #31
 8005b28:	d508      	bpl.n	8005b3c <_printf_i+0x14c>
 8005b2a:	6923      	ldr	r3, [r4, #16]
 8005b2c:	6861      	ldr	r1, [r4, #4]
 8005b2e:	4299      	cmp	r1, r3
 8005b30:	bfde      	ittt	le
 8005b32:	2330      	movle	r3, #48	; 0x30
 8005b34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b3c:	1b92      	subs	r2, r2, r6
 8005b3e:	6122      	str	r2, [r4, #16]
 8005b40:	f8cd a000 	str.w	sl, [sp]
 8005b44:	464b      	mov	r3, r9
 8005b46:	aa03      	add	r2, sp, #12
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	f7ff fee2 	bl	8005914 <_printf_common>
 8005b50:	3001      	adds	r0, #1
 8005b52:	d14c      	bne.n	8005bee <_printf_i+0x1fe>
 8005b54:	f04f 30ff 	mov.w	r0, #4294967295
 8005b58:	b004      	add	sp, #16
 8005b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5e:	4835      	ldr	r0, [pc, #212]	; (8005c34 <_printf_i+0x244>)
 8005b60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	680e      	ldr	r6, [r1, #0]
 8005b68:	061f      	lsls	r7, r3, #24
 8005b6a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b6e:	600e      	str	r6, [r1, #0]
 8005b70:	d514      	bpl.n	8005b9c <_printf_i+0x1ac>
 8005b72:	07d9      	lsls	r1, r3, #31
 8005b74:	bf44      	itt	mi
 8005b76:	f043 0320 	orrmi.w	r3, r3, #32
 8005b7a:	6023      	strmi	r3, [r4, #0]
 8005b7c:	b91d      	cbnz	r5, 8005b86 <_printf_i+0x196>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	f023 0320 	bic.w	r3, r3, #32
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	2310      	movs	r3, #16
 8005b88:	e7b0      	b.n	8005aec <_printf_i+0xfc>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f043 0320 	orr.w	r3, r3, #32
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	2378      	movs	r3, #120	; 0x78
 8005b94:	4828      	ldr	r0, [pc, #160]	; (8005c38 <_printf_i+0x248>)
 8005b96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b9a:	e7e3      	b.n	8005b64 <_printf_i+0x174>
 8005b9c:	065e      	lsls	r6, r3, #25
 8005b9e:	bf48      	it	mi
 8005ba0:	b2ad      	uxthmi	r5, r5
 8005ba2:	e7e6      	b.n	8005b72 <_printf_i+0x182>
 8005ba4:	4616      	mov	r6, r2
 8005ba6:	e7bb      	b.n	8005b20 <_printf_i+0x130>
 8005ba8:	680b      	ldr	r3, [r1, #0]
 8005baa:	6826      	ldr	r6, [r4, #0]
 8005bac:	6960      	ldr	r0, [r4, #20]
 8005bae:	1d1d      	adds	r5, r3, #4
 8005bb0:	600d      	str	r5, [r1, #0]
 8005bb2:	0635      	lsls	r5, r6, #24
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0x1cc>
 8005bb8:	6018      	str	r0, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0x1d2>
 8005bbc:	0671      	lsls	r1, r6, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0x1c8>
 8005bc0:	8018      	strh	r0, [r3, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	4616      	mov	r6, r2
 8005bc8:	e7ba      	b.n	8005b40 <_printf_i+0x150>
 8005bca:	680b      	ldr	r3, [r1, #0]
 8005bcc:	1d1a      	adds	r2, r3, #4
 8005bce:	600a      	str	r2, [r1, #0]
 8005bd0:	681e      	ldr	r6, [r3, #0]
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f7fa fb0a 	bl	80001f0 <memchr>
 8005bdc:	b108      	cbz	r0, 8005be2 <_printf_i+0x1f2>
 8005bde:	1b80      	subs	r0, r0, r6
 8005be0:	6060      	str	r0, [r4, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	2300      	movs	r3, #0
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bec:	e7a8      	b.n	8005b40 <_printf_i+0x150>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	47d0      	blx	sl
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d0ab      	beq.n	8005b54 <_printf_i+0x164>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	079b      	lsls	r3, r3, #30
 8005c00:	d413      	bmi.n	8005c2a <_printf_i+0x23a>
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	4298      	cmp	r0, r3
 8005c08:	bfb8      	it	lt
 8005c0a:	4618      	movlt	r0, r3
 8005c0c:	e7a4      	b.n	8005b58 <_printf_i+0x168>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4632      	mov	r2, r6
 8005c12:	4649      	mov	r1, r9
 8005c14:	4640      	mov	r0, r8
 8005c16:	47d0      	blx	sl
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d09b      	beq.n	8005b54 <_printf_i+0x164>
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	9903      	ldr	r1, [sp, #12]
 8005c22:	1a5b      	subs	r3, r3, r1
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dcf2      	bgt.n	8005c0e <_printf_i+0x21e>
 8005c28:	e7eb      	b.n	8005c02 <_printf_i+0x212>
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	f104 0619 	add.w	r6, r4, #25
 8005c30:	e7f5      	b.n	8005c1e <_printf_i+0x22e>
 8005c32:	bf00      	nop
 8005c34:	08005f15 	.word	0x08005f15
 8005c38:	08005f26 	.word	0x08005f26

08005c3c <memcpy>:
 8005c3c:	440a      	add	r2, r1
 8005c3e:	4291      	cmp	r1, r2
 8005c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c44:	d100      	bne.n	8005c48 <memcpy+0xc>
 8005c46:	4770      	bx	lr
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c52:	4291      	cmp	r1, r2
 8005c54:	d1f9      	bne.n	8005c4a <memcpy+0xe>
 8005c56:	bd10      	pop	{r4, pc}

08005c58 <memmove>:
 8005c58:	4288      	cmp	r0, r1
 8005c5a:	b510      	push	{r4, lr}
 8005c5c:	eb01 0402 	add.w	r4, r1, r2
 8005c60:	d902      	bls.n	8005c68 <memmove+0x10>
 8005c62:	4284      	cmp	r4, r0
 8005c64:	4623      	mov	r3, r4
 8005c66:	d807      	bhi.n	8005c78 <memmove+0x20>
 8005c68:	1e43      	subs	r3, r0, #1
 8005c6a:	42a1      	cmp	r1, r4
 8005c6c:	d008      	beq.n	8005c80 <memmove+0x28>
 8005c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c76:	e7f8      	b.n	8005c6a <memmove+0x12>
 8005c78:	4402      	add	r2, r0
 8005c7a:	4601      	mov	r1, r0
 8005c7c:	428a      	cmp	r2, r1
 8005c7e:	d100      	bne.n	8005c82 <memmove+0x2a>
 8005c80:	bd10      	pop	{r4, pc}
 8005c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c8a:	e7f7      	b.n	8005c7c <memmove+0x24>

08005c8c <_free_r>:
 8005c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c8e:	2900      	cmp	r1, #0
 8005c90:	d048      	beq.n	8005d24 <_free_r+0x98>
 8005c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c96:	9001      	str	r0, [sp, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c9e:	bfb8      	it	lt
 8005ca0:	18e4      	addlt	r4, r4, r3
 8005ca2:	f000 f8d3 	bl	8005e4c <__malloc_lock>
 8005ca6:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <_free_r+0x9c>)
 8005ca8:	9801      	ldr	r0, [sp, #4]
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	4615      	mov	r5, r2
 8005cae:	b933      	cbnz	r3, 8005cbe <_free_r+0x32>
 8005cb0:	6063      	str	r3, [r4, #4]
 8005cb2:	6014      	str	r4, [r2, #0]
 8005cb4:	b003      	add	sp, #12
 8005cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cba:	f000 b8cd 	b.w	8005e58 <__malloc_unlock>
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	d90b      	bls.n	8005cda <_free_r+0x4e>
 8005cc2:	6821      	ldr	r1, [r4, #0]
 8005cc4:	1862      	adds	r2, r4, r1
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	bf04      	itt	eq
 8005cca:	681a      	ldreq	r2, [r3, #0]
 8005ccc:	685b      	ldreq	r3, [r3, #4]
 8005cce:	6063      	str	r3, [r4, #4]
 8005cd0:	bf04      	itt	eq
 8005cd2:	1852      	addeq	r2, r2, r1
 8005cd4:	6022      	streq	r2, [r4, #0]
 8005cd6:	602c      	str	r4, [r5, #0]
 8005cd8:	e7ec      	b.n	8005cb4 <_free_r+0x28>
 8005cda:	461a      	mov	r2, r3
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b10b      	cbz	r3, 8005ce4 <_free_r+0x58>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d9fa      	bls.n	8005cda <_free_r+0x4e>
 8005ce4:	6811      	ldr	r1, [r2, #0]
 8005ce6:	1855      	adds	r5, r2, r1
 8005ce8:	42a5      	cmp	r5, r4
 8005cea:	d10b      	bne.n	8005d04 <_free_r+0x78>
 8005cec:	6824      	ldr	r4, [r4, #0]
 8005cee:	4421      	add	r1, r4
 8005cf0:	1854      	adds	r4, r2, r1
 8005cf2:	42a3      	cmp	r3, r4
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	d1dd      	bne.n	8005cb4 <_free_r+0x28>
 8005cf8:	681c      	ldr	r4, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	6053      	str	r3, [r2, #4]
 8005cfe:	4421      	add	r1, r4
 8005d00:	6011      	str	r1, [r2, #0]
 8005d02:	e7d7      	b.n	8005cb4 <_free_r+0x28>
 8005d04:	d902      	bls.n	8005d0c <_free_r+0x80>
 8005d06:	230c      	movs	r3, #12
 8005d08:	6003      	str	r3, [r0, #0]
 8005d0a:	e7d3      	b.n	8005cb4 <_free_r+0x28>
 8005d0c:	6825      	ldr	r5, [r4, #0]
 8005d0e:	1961      	adds	r1, r4, r5
 8005d10:	428b      	cmp	r3, r1
 8005d12:	bf04      	itt	eq
 8005d14:	6819      	ldreq	r1, [r3, #0]
 8005d16:	685b      	ldreq	r3, [r3, #4]
 8005d18:	6063      	str	r3, [r4, #4]
 8005d1a:	bf04      	itt	eq
 8005d1c:	1949      	addeq	r1, r1, r5
 8005d1e:	6021      	streq	r1, [r4, #0]
 8005d20:	6054      	str	r4, [r2, #4]
 8005d22:	e7c7      	b.n	8005cb4 <_free_r+0x28>
 8005d24:	b003      	add	sp, #12
 8005d26:	bd30      	pop	{r4, r5, pc}
 8005d28:	20000120 	.word	0x20000120

08005d2c <_malloc_r>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	1ccd      	adds	r5, r1, #3
 8005d30:	f025 0503 	bic.w	r5, r5, #3
 8005d34:	3508      	adds	r5, #8
 8005d36:	2d0c      	cmp	r5, #12
 8005d38:	bf38      	it	cc
 8005d3a:	250c      	movcc	r5, #12
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	4606      	mov	r6, r0
 8005d40:	db01      	blt.n	8005d46 <_malloc_r+0x1a>
 8005d42:	42a9      	cmp	r1, r5
 8005d44:	d903      	bls.n	8005d4e <_malloc_r+0x22>
 8005d46:	230c      	movs	r3, #12
 8005d48:	6033      	str	r3, [r6, #0]
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d4e:	f000 f87d 	bl	8005e4c <__malloc_lock>
 8005d52:	4921      	ldr	r1, [pc, #132]	; (8005dd8 <_malloc_r+0xac>)
 8005d54:	680a      	ldr	r2, [r1, #0]
 8005d56:	4614      	mov	r4, r2
 8005d58:	b99c      	cbnz	r4, 8005d82 <_malloc_r+0x56>
 8005d5a:	4f20      	ldr	r7, [pc, #128]	; (8005ddc <_malloc_r+0xb0>)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	b923      	cbnz	r3, 8005d6a <_malloc_r+0x3e>
 8005d60:	4621      	mov	r1, r4
 8005d62:	4630      	mov	r0, r6
 8005d64:	f000 f862 	bl	8005e2c <_sbrk_r>
 8005d68:	6038      	str	r0, [r7, #0]
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	4630      	mov	r0, r6
 8005d6e:	f000 f85d 	bl	8005e2c <_sbrk_r>
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	d123      	bne.n	8005dbe <_malloc_r+0x92>
 8005d76:	230c      	movs	r3, #12
 8005d78:	6033      	str	r3, [r6, #0]
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	f000 f86c 	bl	8005e58 <__malloc_unlock>
 8005d80:	e7e3      	b.n	8005d4a <_malloc_r+0x1e>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	1b5b      	subs	r3, r3, r5
 8005d86:	d417      	bmi.n	8005db8 <_malloc_r+0x8c>
 8005d88:	2b0b      	cmp	r3, #11
 8005d8a:	d903      	bls.n	8005d94 <_malloc_r+0x68>
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	441c      	add	r4, r3
 8005d90:	6025      	str	r5, [r4, #0]
 8005d92:	e004      	b.n	8005d9e <_malloc_r+0x72>
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	42a2      	cmp	r2, r4
 8005d98:	bf0c      	ite	eq
 8005d9a:	600b      	streq	r3, [r1, #0]
 8005d9c:	6053      	strne	r3, [r2, #4]
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f000 f85a 	bl	8005e58 <__malloc_unlock>
 8005da4:	f104 000b 	add.w	r0, r4, #11
 8005da8:	1d23      	adds	r3, r4, #4
 8005daa:	f020 0007 	bic.w	r0, r0, #7
 8005dae:	1ac2      	subs	r2, r0, r3
 8005db0:	d0cc      	beq.n	8005d4c <_malloc_r+0x20>
 8005db2:	1a1b      	subs	r3, r3, r0
 8005db4:	50a3      	str	r3, [r4, r2]
 8005db6:	e7c9      	b.n	8005d4c <_malloc_r+0x20>
 8005db8:	4622      	mov	r2, r4
 8005dba:	6864      	ldr	r4, [r4, #4]
 8005dbc:	e7cc      	b.n	8005d58 <_malloc_r+0x2c>
 8005dbe:	1cc4      	adds	r4, r0, #3
 8005dc0:	f024 0403 	bic.w	r4, r4, #3
 8005dc4:	42a0      	cmp	r0, r4
 8005dc6:	d0e3      	beq.n	8005d90 <_malloc_r+0x64>
 8005dc8:	1a21      	subs	r1, r4, r0
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f000 f82e 	bl	8005e2c <_sbrk_r>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d1dd      	bne.n	8005d90 <_malloc_r+0x64>
 8005dd4:	e7cf      	b.n	8005d76 <_malloc_r+0x4a>
 8005dd6:	bf00      	nop
 8005dd8:	20000120 	.word	0x20000120
 8005ddc:	20000124 	.word	0x20000124

08005de0 <_realloc_r>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	4607      	mov	r7, r0
 8005de4:	4614      	mov	r4, r2
 8005de6:	460e      	mov	r6, r1
 8005de8:	b921      	cbnz	r1, 8005df4 <_realloc_r+0x14>
 8005dea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005dee:	4611      	mov	r1, r2
 8005df0:	f7ff bf9c 	b.w	8005d2c <_malloc_r>
 8005df4:	b922      	cbnz	r2, 8005e00 <_realloc_r+0x20>
 8005df6:	f7ff ff49 	bl	8005c8c <_free_r>
 8005dfa:	4625      	mov	r5, r4
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e00:	f000 f830 	bl	8005e64 <_malloc_usable_size_r>
 8005e04:	42a0      	cmp	r0, r4
 8005e06:	d20f      	bcs.n	8005e28 <_realloc_r+0x48>
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f7ff ff8e 	bl	8005d2c <_malloc_r>
 8005e10:	4605      	mov	r5, r0
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d0f2      	beq.n	8005dfc <_realloc_r+0x1c>
 8005e16:	4631      	mov	r1, r6
 8005e18:	4622      	mov	r2, r4
 8005e1a:	f7ff ff0f 	bl	8005c3c <memcpy>
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4638      	mov	r0, r7
 8005e22:	f7ff ff33 	bl	8005c8c <_free_r>
 8005e26:	e7e9      	b.n	8005dfc <_realloc_r+0x1c>
 8005e28:	4635      	mov	r5, r6
 8005e2a:	e7e7      	b.n	8005dfc <_realloc_r+0x1c>

08005e2c <_sbrk_r>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	4d06      	ldr	r5, [pc, #24]	; (8005e48 <_sbrk_r+0x1c>)
 8005e30:	2300      	movs	r3, #0
 8005e32:	4604      	mov	r4, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	602b      	str	r3, [r5, #0]
 8005e38:	f7fb fc96 	bl	8001768 <_sbrk>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_sbrk_r+0x1a>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_sbrk_r+0x1a>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	20000310 	.word	0x20000310

08005e4c <__malloc_lock>:
 8005e4c:	4801      	ldr	r0, [pc, #4]	; (8005e54 <__malloc_lock+0x8>)
 8005e4e:	f000 b811 	b.w	8005e74 <__retarget_lock_acquire_recursive>
 8005e52:	bf00      	nop
 8005e54:	20000318 	.word	0x20000318

08005e58 <__malloc_unlock>:
 8005e58:	4801      	ldr	r0, [pc, #4]	; (8005e60 <__malloc_unlock+0x8>)
 8005e5a:	f000 b80c 	b.w	8005e76 <__retarget_lock_release_recursive>
 8005e5e:	bf00      	nop
 8005e60:	20000318 	.word	0x20000318

08005e64 <_malloc_usable_size_r>:
 8005e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e68:	1f18      	subs	r0, r3, #4
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bfbc      	itt	lt
 8005e6e:	580b      	ldrlt	r3, [r1, r0]
 8005e70:	18c0      	addlt	r0, r0, r3
 8005e72:	4770      	bx	lr

08005e74 <__retarget_lock_acquire_recursive>:
 8005e74:	4770      	bx	lr

08005e76 <__retarget_lock_release_recursive>:
 8005e76:	4770      	bx	lr

08005e78 <_init>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr

08005e84 <_fini>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr
