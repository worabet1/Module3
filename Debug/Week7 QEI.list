
Week7 QEI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a928  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800aac8  0800aac8  0001aac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab6c  0800ab6c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab6c  0800ab6c  0001ab6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab74  0800ab74  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab74  0800ab74  0001ab74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab78  0800ab78  0001ab78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ab7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000090  0800ac0c  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  0800ac0c  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bd3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241a  00000000  00000000  00032c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  000350b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  000361c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184e4  00000000  00000000  00037230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001393d  00000000  00000000  0004f714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d221  00000000  00000000  00063051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100272  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005024  00000000  00000000  001002c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aab0 	.word	0x0800aab0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800aab0 	.word	0x0800aab0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	; 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_uldivmod>:
 8000e14:	b953      	cbnz	r3, 8000e2c <__aeabi_uldivmod+0x18>
 8000e16:	b94a      	cbnz	r2, 8000e2c <__aeabi_uldivmod+0x18>
 8000e18:	2900      	cmp	r1, #0
 8000e1a:	bf08      	it	eq
 8000e1c:	2800      	cmpeq	r0, #0
 8000e1e:	bf1c      	itt	ne
 8000e20:	f04f 31ff 	movne.w	r1, #4294967295
 8000e24:	f04f 30ff 	movne.w	r0, #4294967295
 8000e28:	f000 b96e 	b.w	8001108 <__aeabi_idiv0>
 8000e2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e34:	f000 f806 	bl	8000e44 <__udivmoddi4>
 8000e38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e40:	b004      	add	sp, #16
 8000e42:	4770      	bx	lr

08000e44 <__udivmoddi4>:
 8000e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e48:	9d08      	ldr	r5, [sp, #32]
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	468c      	mov	ip, r1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8083 	bne.w	8000f5a <__udivmoddi4+0x116>
 8000e54:	428a      	cmp	r2, r1
 8000e56:	4617      	mov	r7, r2
 8000e58:	d947      	bls.n	8000eea <__udivmoddi4+0xa6>
 8000e5a:	fab2 f282 	clz	r2, r2
 8000e5e:	b142      	cbz	r2, 8000e72 <__udivmoddi4+0x2e>
 8000e60:	f1c2 0020 	rsb	r0, r2, #32
 8000e64:	fa24 f000 	lsr.w	r0, r4, r0
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	4097      	lsls	r7, r2
 8000e6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e70:	4094      	lsls	r4, r2
 8000e72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e76:	0c23      	lsrs	r3, r4, #16
 8000e78:	fbbc f6f8 	udiv	r6, ip, r8
 8000e7c:	fa1f fe87 	uxth.w	lr, r7
 8000e80:	fb08 c116 	mls	r1, r8, r6, ip
 8000e84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e88:	fb06 f10e 	mul.w	r1, r6, lr
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x60>
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e96:	f080 8119 	bcs.w	80010cc <__udivmoddi4+0x288>
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f240 8116 	bls.w	80010cc <__udivmoddi4+0x288>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	443b      	add	r3, r7
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eac:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x8c>
 8000ebc:	193c      	adds	r4, r7, r4
 8000ebe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec2:	f080 8105 	bcs.w	80010d0 <__udivmoddi4+0x28c>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	f240 8102 	bls.w	80010d0 <__udivmoddi4+0x28c>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	443c      	add	r4, r7
 8000ed0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	2600      	movs	r6, #0
 8000eda:	b11d      	cbz	r5, 8000ee4 <__udivmoddi4+0xa0>
 8000edc:	40d4      	lsrs	r4, r2
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ee4:	4631      	mov	r1, r6
 8000ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eea:	b902      	cbnz	r2, 8000eee <__udivmoddi4+0xaa>
 8000eec:	deff      	udf	#255	; 0xff
 8000eee:	fab2 f282 	clz	r2, r2
 8000ef2:	2a00      	cmp	r2, #0
 8000ef4:	d150      	bne.n	8000f98 <__udivmoddi4+0x154>
 8000ef6:	1bcb      	subs	r3, r1, r7
 8000ef8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000efc:	fa1f f887 	uxth.w	r8, r7
 8000f00:	2601      	movs	r6, #1
 8000f02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000f06:	0c21      	lsrs	r1, r4, #16
 8000f08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb08 f30c 	mul.w	r3, r8, ip
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0xe4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0xe2>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	f200 80e9 	bhi.w	80010f8 <__udivmoddi4+0x2b4>
 8000f26:	4684      	mov	ip, r0
 8000f28:	1ac9      	subs	r1, r1, r3
 8000f2a:	b2a3      	uxth	r3, r4
 8000f2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000f38:	fb08 f800 	mul.w	r8, r8, r0
 8000f3c:	45a0      	cmp	r8, r4
 8000f3e:	d907      	bls.n	8000f50 <__udivmoddi4+0x10c>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f46:	d202      	bcs.n	8000f4e <__udivmoddi4+0x10a>
 8000f48:	45a0      	cmp	r8, r4
 8000f4a:	f200 80d9 	bhi.w	8001100 <__udivmoddi4+0x2bc>
 8000f4e:	4618      	mov	r0, r3
 8000f50:	eba4 0408 	sub.w	r4, r4, r8
 8000f54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f58:	e7bf      	b.n	8000eda <__udivmoddi4+0x96>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d909      	bls.n	8000f72 <__udivmoddi4+0x12e>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	f000 80b1 	beq.w	80010c6 <__udivmoddi4+0x282>
 8000f64:	2600      	movs	r6, #0
 8000f66:	e9c5 0100 	strd	r0, r1, [r5]
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	fab3 f683 	clz	r6, r3
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d14a      	bne.n	8001010 <__udivmoddi4+0x1cc>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d302      	bcc.n	8000f84 <__udivmoddi4+0x140>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	f200 80b8 	bhi.w	80010f4 <__udivmoddi4+0x2b0>
 8000f84:	1a84      	subs	r4, r0, r2
 8000f86:	eb61 0103 	sbc.w	r1, r1, r3
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	468c      	mov	ip, r1
 8000f8e:	2d00      	cmp	r5, #0
 8000f90:	d0a8      	beq.n	8000ee4 <__udivmoddi4+0xa0>
 8000f92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f96:	e7a5      	b.n	8000ee4 <__udivmoddi4+0xa0>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000fa0:	4097      	lsls	r7, r2
 8000fa2:	fa01 f002 	lsl.w	r0, r1, r2
 8000fa6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000faa:	40d9      	lsrs	r1, r3
 8000fac:	4330      	orrs	r0, r6
 8000fae:	0c03      	lsrs	r3, r0, #16
 8000fb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000fb4:	fa1f f887 	uxth.w	r8, r7
 8000fb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000fbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc0:	fb06 f108 	mul.w	r1, r6, r8
 8000fc4:	4299      	cmp	r1, r3
 8000fc6:	fa04 f402 	lsl.w	r4, r4, r2
 8000fca:	d909      	bls.n	8000fe0 <__udivmoddi4+0x19c>
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	f106 3cff 	add.w	ip, r6, #4294967295
 8000fd2:	f080 808d 	bcs.w	80010f0 <__udivmoddi4+0x2ac>
 8000fd6:	4299      	cmp	r1, r3
 8000fd8:	f240 808a 	bls.w	80010f0 <__udivmoddi4+0x2ac>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	443b      	add	r3, r7
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b281      	uxth	r1, r0
 8000fe4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fe8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ff0:	fb00 f308 	mul.w	r3, r0, r8
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	d907      	bls.n	8001008 <__udivmoddi4+0x1c4>
 8000ff8:	1879      	adds	r1, r7, r1
 8000ffa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ffe:	d273      	bcs.n	80010e8 <__udivmoddi4+0x2a4>
 8001000:	428b      	cmp	r3, r1
 8001002:	d971      	bls.n	80010e8 <__udivmoddi4+0x2a4>
 8001004:	3802      	subs	r0, #2
 8001006:	4439      	add	r1, r7
 8001008:	1acb      	subs	r3, r1, r3
 800100a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800100e:	e778      	b.n	8000f02 <__udivmoddi4+0xbe>
 8001010:	f1c6 0c20 	rsb	ip, r6, #32
 8001014:	fa03 f406 	lsl.w	r4, r3, r6
 8001018:	fa22 f30c 	lsr.w	r3, r2, ip
 800101c:	431c      	orrs	r4, r3
 800101e:	fa20 f70c 	lsr.w	r7, r0, ip
 8001022:	fa01 f306 	lsl.w	r3, r1, r6
 8001026:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800102a:	fa21 f10c 	lsr.w	r1, r1, ip
 800102e:	431f      	orrs	r7, r3
 8001030:	0c3b      	lsrs	r3, r7, #16
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fa1f f884 	uxth.w	r8, r4
 800103a:	fb0e 1119 	mls	r1, lr, r9, r1
 800103e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001042:	fb09 fa08 	mul.w	sl, r9, r8
 8001046:	458a      	cmp	sl, r1
 8001048:	fa02 f206 	lsl.w	r2, r2, r6
 800104c:	fa00 f306 	lsl.w	r3, r0, r6
 8001050:	d908      	bls.n	8001064 <__udivmoddi4+0x220>
 8001052:	1861      	adds	r1, r4, r1
 8001054:	f109 30ff 	add.w	r0, r9, #4294967295
 8001058:	d248      	bcs.n	80010ec <__udivmoddi4+0x2a8>
 800105a:	458a      	cmp	sl, r1
 800105c:	d946      	bls.n	80010ec <__udivmoddi4+0x2a8>
 800105e:	f1a9 0902 	sub.w	r9, r9, #2
 8001062:	4421      	add	r1, r4
 8001064:	eba1 010a 	sub.w	r1, r1, sl
 8001068:	b2bf      	uxth	r7, r7
 800106a:	fbb1 f0fe 	udiv	r0, r1, lr
 800106e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001072:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001076:	fb00 f808 	mul.w	r8, r0, r8
 800107a:	45b8      	cmp	r8, r7
 800107c:	d907      	bls.n	800108e <__udivmoddi4+0x24a>
 800107e:	19e7      	adds	r7, r4, r7
 8001080:	f100 31ff 	add.w	r1, r0, #4294967295
 8001084:	d22e      	bcs.n	80010e4 <__udivmoddi4+0x2a0>
 8001086:	45b8      	cmp	r8, r7
 8001088:	d92c      	bls.n	80010e4 <__udivmoddi4+0x2a0>
 800108a:	3802      	subs	r0, #2
 800108c:	4427      	add	r7, r4
 800108e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001092:	eba7 0708 	sub.w	r7, r7, r8
 8001096:	fba0 8902 	umull	r8, r9, r0, r2
 800109a:	454f      	cmp	r7, r9
 800109c:	46c6      	mov	lr, r8
 800109e:	4649      	mov	r1, r9
 80010a0:	d31a      	bcc.n	80010d8 <__udivmoddi4+0x294>
 80010a2:	d017      	beq.n	80010d4 <__udivmoddi4+0x290>
 80010a4:	b15d      	cbz	r5, 80010be <__udivmoddi4+0x27a>
 80010a6:	ebb3 020e 	subs.w	r2, r3, lr
 80010aa:	eb67 0701 	sbc.w	r7, r7, r1
 80010ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80010b2:	40f2      	lsrs	r2, r6
 80010b4:	ea4c 0202 	orr.w	r2, ip, r2
 80010b8:	40f7      	lsrs	r7, r6
 80010ba:	e9c5 2700 	strd	r2, r7, [r5]
 80010be:	2600      	movs	r6, #0
 80010c0:	4631      	mov	r1, r6
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	462e      	mov	r6, r5
 80010c8:	4628      	mov	r0, r5
 80010ca:	e70b      	b.n	8000ee4 <__udivmoddi4+0xa0>
 80010cc:	4606      	mov	r6, r0
 80010ce:	e6e9      	b.n	8000ea4 <__udivmoddi4+0x60>
 80010d0:	4618      	mov	r0, r3
 80010d2:	e6fd      	b.n	8000ed0 <__udivmoddi4+0x8c>
 80010d4:	4543      	cmp	r3, r8
 80010d6:	d2e5      	bcs.n	80010a4 <__udivmoddi4+0x260>
 80010d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80010dc:	eb69 0104 	sbc.w	r1, r9, r4
 80010e0:	3801      	subs	r0, #1
 80010e2:	e7df      	b.n	80010a4 <__udivmoddi4+0x260>
 80010e4:	4608      	mov	r0, r1
 80010e6:	e7d2      	b.n	800108e <__udivmoddi4+0x24a>
 80010e8:	4660      	mov	r0, ip
 80010ea:	e78d      	b.n	8001008 <__udivmoddi4+0x1c4>
 80010ec:	4681      	mov	r9, r0
 80010ee:	e7b9      	b.n	8001064 <__udivmoddi4+0x220>
 80010f0:	4666      	mov	r6, ip
 80010f2:	e775      	b.n	8000fe0 <__udivmoddi4+0x19c>
 80010f4:	4630      	mov	r0, r6
 80010f6:	e74a      	b.n	8000f8e <__udivmoddi4+0x14a>
 80010f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010fc:	4439      	add	r1, r7
 80010fe:	e713      	b.n	8000f28 <__udivmoddi4+0xe4>
 8001100:	3802      	subs	r0, #2
 8001102:	443c      	add	r4, r7
 8001104:	e724      	b.n	8000f50 <__udivmoddi4+0x10c>
 8001106:	bf00      	nop

08001108 <__aeabi_idiv0>:
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800110c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001110:	ed2d 8b02 	vpush	{d8}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001118:	f002 fd80 	bl	8003c1c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800111c:	f000 f9a2 	bl	8001464 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001120:	f000 fc36 	bl	8001990 <MX_GPIO_Init>
	MX_DMA_Init();
 8001124:	f000 fc14 	bl	8001950 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001128:	f000 fbe8 	bl	80018fc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800112c:	f000 fa82 	bl	8001634 <MX_TIM2_Init>
	MX_ADC1_Init();
 8001130:	f000 fa00 	bl	8001534 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001134:	f000 faca 	bl	80016cc <MX_TIM3_Init>
	MX_TIM4_Init();
 8001138:	f000 fb3e 	bl	80017b8 <MX_TIM4_Init>
	MX_TIM5_Init();
 800113c:	f000 fb8a 	bl	8001854 <MX_TIM5_Init>
	MX_I2C1_Init();
 8001140:	f000 fa4a 	bl	80015d8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001144:	48a8      	ldr	r0, [pc, #672]	; (80013e8 <main+0x2dc>)
 8001146:	f007 f863 	bl	8008210 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 800114a:	48a8      	ldr	r0, [pc, #672]	; (80013ec <main+0x2e0>)
 800114c:	f007 f806 	bl	800815c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001150:	2100      	movs	r1, #0
 8001152:	48a6      	ldr	r0, [pc, #664]	; (80013ec <main+0x2e0>)
 8001154:	f007 f918 	bl	8008388 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8001158:	48a5      	ldr	r0, [pc, #660]	; (80013f0 <main+0x2e4>)
 800115a:	f007 f859 	bl	8008210 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800115e:	48a5      	ldr	r0, [pc, #660]	; (80013f4 <main+0x2e8>)
 8001160:	f007 f856 	bl	8008210 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, ADCData, 4);
 8001164:	2204      	movs	r2, #4
 8001166:	49a4      	ldr	r1, [pc, #656]	; (80013f8 <main+0x2ec>)
 8001168:	48a4      	ldr	r0, [pc, #656]	; (80013fc <main+0x2f0>)
 800116a:	f002 ff71 	bl	8004050 <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800116e:	213c      	movs	r1, #60	; 0x3c
 8001170:	48a0      	ldr	r0, [pc, #640]	; (80013f4 <main+0x2e8>)
 8001172:	f007 fa5f 	bl	8008634 <HAL_TIM_Encoder_Start>
	{
//		char temp[] = "Hello world\r\n please type something\r\n";
		uint8_t ack[] = { 0x58, 0x75 };
 8001176:	f247 5358 	movw	r3, #30040	; 0x7558
 800117a:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 800117c:	1d39      	adds	r1, r7, #4
 800117e:	230a      	movs	r3, #10
 8001180:	2202      	movs	r2, #2
 8001182:	489f      	ldr	r0, [pc, #636]	; (8001400 <main+0x2f4>)
 8001184:	f008 f931 	bl	80093ea <HAL_UART_Transmit>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//I2C
		Laser();
 8001188:	f001 fcca 	bl	8002b20 <Laser>
		//UART Part
		HAL_UART_Receive_IT(&huart2, (uint8_t*) RxDataBuffer, 4);
 800118c:	2204      	movs	r2, #4
 800118e:	499d      	ldr	r1, [pc, #628]	; (8001404 <main+0x2f8>)
 8001190:	489b      	ldr	r0, [pc, #620]	; (8001400 <main+0x2f4>)
 8001192:	f008 f9bc 	bl	800950e <HAL_UART_Receive_IT>
		inputchar = UARTRecieveIT();
 8001196:	f001 fb79 	bl	800288c <UARTRecieveIT>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	4b9a      	ldr	r3, [pc, #616]	; (8001408 <main+0x2fc>)
 80011a0:	601a      	str	r2, [r3, #0]
		if (inputchar != -1) {
 80011a2:	4b99      	ldr	r3, [pc, #612]	; (8001408 <main+0x2fc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011aa:	d001      	beq.n	80011b0 <main+0xa4>
//			HAL_Delay(3000);
			UARTMode();
 80011ac:	f000 fc84 	bl	8001ab8 <UARTMode>
//			sprintf(TxDataBuffer, "\x58\x75");
//			HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer,
//					strlen(TxDataBuffer), 1000);
		}
		//PWM set
		if (emergency == 0) {
 80011b0:	4b96      	ldr	r3, [pc, #600]	; (800140c <main+0x300>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1e7      	bne.n	8001188 <main+0x7c>
			if (require == 9988) {
 80011b8:	4b95      	ldr	r3, [pc, #596]	; (8001410 <main+0x304>)
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8001414 <main+0x308>
 80011c2:	eef4 7a47 	vcmp.f32	s15, s14
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	d10c      	bne.n	80011e6 <main+0xda>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d2:	4891      	ldr	r0, [pc, #580]	; (8001418 <main+0x30c>)
 80011d4:	f004 f9cc 	bl	8005570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011de:	488e      	ldr	r0, [pc, #568]	; (8001418 <main+0x30c>)
 80011e0:	f004 f9c6 	bl	8005570 <HAL_GPIO_WritePin>
 80011e4:	e028      	b.n	8001238 <main+0x12c>
			} else if (require >= 0) {
 80011e6:	4b8a      	ldr	r3, [pc, #552]	; (8001410 <main+0x304>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	db0c      	blt.n	8001210 <main+0x104>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fc:	4886      	ldr	r0, [pc, #536]	; (8001418 <main+0x30c>)
 80011fe:	f004 f9b7 	bl	8005570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001208:	4883      	ldr	r0, [pc, #524]	; (8001418 <main+0x30c>)
 800120a:	f004 f9b1 	bl	8005570 <HAL_GPIO_WritePin>
 800120e:	e013      	b.n	8001238 <main+0x12c>
			} else if (require < 0) {
 8001210:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <main+0x304>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	d50b      	bpl.n	8001238 <main+0x12c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001226:	487c      	ldr	r0, [pc, #496]	; (8001418 <main+0x30c>)
 8001228:	f004 f9a2 	bl	8005570 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001232:	4879      	ldr	r0, [pc, #484]	; (8001418 <main+0x30c>)
 8001234:	f004 f99c 	bl	8005570 <HAL_GPIO_WritePin>
			}
			if (micros() - Timestamp_Encoder >= 100) {
 8001238:	f002 f9b6 	bl	80035a8 <micros>
 800123c:	4b77      	ldr	r3, [pc, #476]	; (800141c <main+0x310>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	1a84      	subs	r4, r0, r2
 8001244:	eb61 0503 	sbc.w	r5, r1, r3
 8001248:	2d00      	cmp	r5, #0
 800124a:	bf08      	it	eq
 800124c:	2c64      	cmpeq	r4, #100	; 0x64
 800124e:	d32b      	bcc.n	80012a8 <main+0x19c>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 8001250:	4b73      	ldr	r3, [pc, #460]	; (8001420 <main+0x314>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b65      	ldr	r3, [pc, #404]	; (80013ec <main+0x2e0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
				Timestamp_Encoder = micros();
 800125a:	f002 f9a5 	bl	80035a8 <micros>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	496e      	ldr	r1, [pc, #440]	; (800141c <main+0x310>)
 8001264:	e9c1 2300 	strd	r2, r3, [r1]
				EncoderVel = ((2 * EncoderVel + EncoderVelocity_Update()) / 3);
 8001268:	4b6e      	ldr	r3, [pc, #440]	; (8001424 <main+0x318>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8001272:	f001 fbef 	bl	8002a54 <EncoderVelocity_Update>
 8001276:	eef0 7a40 	vmov.f32	s15, s0
 800127a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800127e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001286:	4b67      	ldr	r3, [pc, #412]	; (8001424 <main+0x318>)
 8001288:	edc3 7a00 	vstr	s15, [r3]
				vrpm = EncoderVel / 524288 * 60;
 800128c:	4b65      	ldr	r3, [pc, #404]	; (8001424 <main+0x318>)
 800128e:	ed93 7a00 	vldr	s14, [r3]
 8001292:	eddf 6a65 	vldr	s13, [pc, #404]	; 8001428 <main+0x31c>
 8001296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800142c <main+0x320>
 800129e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a2:	4b63      	ldr	r3, [pc, #396]	; (8001430 <main+0x324>)
 80012a4:	edc3 7a00 	vstr	s15, [r3]
			}
			sclk[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	485b      	ldr	r0, [pc, #364]	; (8001418 <main+0x30c>)
 80012ac:	f004 f948 	bl	8005540 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	461a      	mov	r2, r3
 80012b4:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <main+0x328>)
 80012b6:	601a      	str	r2, [r3, #0]
			if (zerostate == 1) {
 80012b8:	4b5f      	ldr	r3, [pc, #380]	; (8001438 <main+0x32c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d122      	bne.n	8001306 <main+0x1fa>
				require = 0.2;
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <main+0x304>)
 80012c2:	4a5e      	ldr	r2, [pc, #376]	; (800143c <main+0x330>)
 80012c4:	601a      	str	r2, [r3, #0]
				if (sclk[0] == 0 && sclk[1] == 1) {
 80012c6:	4b5b      	ldr	r3, [pc, #364]	; (8001434 <main+0x328>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d11b      	bne.n	8001306 <main+0x1fa>
 80012ce:	4b59      	ldr	r3, [pc, #356]	; (8001434 <main+0x328>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d117      	bne.n	8001306 <main+0x1fa>
					pwm = 1200;
 80012d6:	4b52      	ldr	r3, [pc, #328]	; (8001420 <main+0x314>)
 80012d8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80012dc:	601a      	str	r2, [r3, #0]
					position = 0;
 80012de:	4b58      	ldr	r3, [pc, #352]	; (8001440 <main+0x334>)
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
					require = 0;
 80012e6:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <main+0x304>)
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
					zerostate = 0;
 80012ee:	4b52      	ldr	r3, [pc, #328]	; (8001438 <main+0x32c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
					error = (TIM5->CNT);
 80012f4:	4b53      	ldr	r3, [pc, #332]	; (8001444 <main+0x338>)
 80012f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001300:	4b51      	ldr	r3, [pc, #324]	; (8001448 <main+0x33c>)
 8001302:	edc3 7a00 	vstr	s15, [r3]
				}
			}
			sclk[1] = sclk[0];
 8001306:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <main+0x328>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <main+0x328>)
 800130c:	6053      	str	r3, [r2, #4]
			position = ((TIM5->CNT) - error) / 524288 * 360;
 800130e:	4b4d      	ldr	r3, [pc, #308]	; (8001444 <main+0x338>)
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001312:	ee07 3a90 	vmov	s15, r3
 8001316:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800131a:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <main+0x33c>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001324:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001428 <main+0x31c>
 8001328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800144c <main+0x340>
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	4b42      	ldr	r3, [pc, #264]	; (8001440 <main+0x334>)
 8001336:	edc3 7a00 	vstr	s15, [r3]
			if (position < 0) {
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <main+0x334>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	d509      	bpl.n	800135e <main+0x252>
				position = 360 + position;
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <main+0x334>)
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800144c <main+0x340>
 8001354:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001358:	4b39      	ldr	r3, [pc, #228]	; (8001440 <main+0x334>)
 800135a:	edc3 7a00 	vstr	s15, [r3]
			}
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 1) {
 800135e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001362:	482d      	ldr	r0, [pc, #180]	; (8001418 <main+0x30c>)
 8001364:	f004 f8ec 	bl	8005540 <HAL_GPIO_ReadPin>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <main+0x274>
				indexpos = position;
 800136e:	4b34      	ldr	r3, [pc, #208]	; (8001440 <main+0x334>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001378:	ee17 2a90 	vmov	r2, s15
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <main+0x344>)
 800137e:	601a      	str	r2, [r3, #0]
			}
			if (micros() - Timestamp_Encoder2 >= 100000) {
 8001380:	f002 f912 	bl	80035a8 <micros>
 8001384:	4b33      	ldr	r3, [pc, #204]	; (8001454 <main+0x348>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	ebb0 0802 	subs.w	r8, r0, r2
 800138e:	eb61 0903 	sbc.w	r9, r1, r3
 8001392:	4a31      	ldr	r2, [pc, #196]	; (8001458 <main+0x34c>)
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	454b      	cmp	r3, r9
 800139a:	bf08      	it	eq
 800139c:	4542      	cmpeq	r2, r8
 800139e:	f4bf aef3 	bcs.w	8001188 <main+0x7c>
				int st1 = position;
 80013a2:	4b27      	ldr	r3, [pc, #156]	; (8001440 <main+0x334>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ac:	ee17 3a90 	vmov	r3, s15
 80013b0:	60fb      	str	r3, [r7, #12]
				int st2 = vrpm * 6;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <main+0x324>)
 80013b4:	edd3 7a00 	vldr	s15, [r3]
 80013b8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c4:	ee17 3a90 	vmov	r3, s15
 80013c8:	60bb      	str	r3, [r7, #8]
				sprintf(status,
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	4923      	ldr	r1, [pc, #140]	; (800145c <main+0x350>)
 80013d0:	4823      	ldr	r0, [pc, #140]	; (8001460 <main+0x354>)
 80013d2:	f008 fe57 	bl	800a084 <siprintf>
						"Position is %d degree Velocity is %d degree/second \r\n",
						st1, st2);
//				HAL_UART_Transmit(&huart2, (uint8_t*) status, strlen(status),
//						10);
				Timestamp_Encoder2 = micros();
 80013d6:	f002 f8e7 	bl	80035a8 <micros>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	491d      	ldr	r1, [pc, #116]	; (8001454 <main+0x348>)
 80013e0:	e9c1 2300 	strd	r2, r3, [r1]
		Laser();
 80013e4:	e6d0      	b.n	8001188 <main+0x7c>
 80013e6:	bf00      	nop
 80013e8:	2000044c 	.word	0x2000044c
 80013ec:	20000354 	.word	0x20000354
 80013f0:	20000260 	.word	0x20000260
 80013f4:	20000308 	.word	0x20000308
 80013f8:	200000ac 	.word	0x200000ac
 80013fc:	2000039c 	.word	0x2000039c
 8001400:	20000494 	.word	0x20000494
 8001404:	20000108 	.word	0x20000108
 8001408:	200002fc 	.word	0x200002fc
 800140c:	20000170 	.word	0x20000170
 8001410:	200000e4 	.word	0x200000e4
 8001414:	461c1000 	.word	0x461c1000
 8001418:	40020000 	.word	0x40020000
 800141c:	200000d0 	.word	0x200000d0
 8001420:	2000016c 	.word	0x2000016c
 8001424:	200000c8 	.word	0x200000c8
 8001428:	49000000 	.word	0x49000000
 800142c:	42700000 	.word	0x42700000
 8001430:	200000e0 	.word	0x200000e0
 8001434:	2000012c 	.word	0x2000012c
 8001438:	20000128 	.word	0x20000128
 800143c:	3e4ccccd 	.word	0x3e4ccccd
 8001440:	20000134 	.word	0x20000134
 8001444:	40000c00 	.word	0x40000c00
 8001448:	20000138 	.word	0x20000138
 800144c:	43b40000 	.word	0x43b40000
 8001450:	20000234 	.word	0x20000234
 8001454:	200000d8 	.word	0x200000d8
 8001458:	0001869f 	.word	0x0001869f
 800145c:	0800aac8 	.word	0x0800aac8
 8001460:	200004e4 	.word	0x200004e4

08001464 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	; 0x50
 8001468:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2230      	movs	r2, #48	; 0x30
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f008 fdfe 	bl	800a074 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <SystemClock_Config+0xc8>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a26      	ldr	r2, [pc, #152]	; (800152c <SystemClock_Config+0xc8>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <SystemClock_Config+0xc8>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <SystemClock_Config+0xcc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a20      	ldr	r2, [pc, #128]	; (8001530 <SystemClock_Config+0xcc>)
 80014ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <SystemClock_Config+0xcc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c0:	2302      	movs	r3, #2
 80014c2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c8:	2310      	movs	r3, #16
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	2302      	movs	r3, #2
 80014ce:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014d0:	2300      	movs	r3, #0
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80014d4:	2308      	movs	r3, #8
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80014d8:	2364      	movs	r3, #100	; 0x64
 80014da:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014dc:	2302      	movs	r3, #2
 80014de:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80014e0:	2304      	movs	r3, #4
 80014e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	4618      	mov	r0, r3
 80014ea:	f006 f973 	bl	80077d4 <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x94>
		Error_Handler();
 80014f4:	f002 f872 	bl	80035dc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2302      	movs	r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2103      	movs	r1, #3
 8001514:	4618      	mov	r0, r3
 8001516:	f006 fbd5 	bl	8007cc4 <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xc0>
		Error_Handler();
 8001520:	f002 f85c 	bl	80035dc <Error_Handler>
	}
}
 8001524:	bf00      	nop
 8001526:	3750      	adds	r7, #80	; 0x50
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800153a:	463b      	mov	r3, r7
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001546:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <MX_ADC1_Init+0x9c>)
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <MX_ADC1_Init+0xa0>)
 800154a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <MX_ADC1_Init+0x9c>)
 800154e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001552:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MX_ADC1_Init+0x9c>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_ADC1_Init+0x9c>)
 800155c:	2201      	movs	r2, #1
 800155e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_ADC1_Init+0x9c>)
 8001562:	2201      	movs	r2, #1
 8001564:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_ADC1_Init+0x9c>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_ADC1_Init+0x9c>)
 8001570:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_ADC1_Init+0x9c>)
 8001578:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_ADC1_Init+0x9c>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_ADC1_Init+0x9c>)
 8001586:	2201      	movs	r2, #1
 8001588:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_ADC1_Init+0x9c>)
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_ADC1_Init+0x9c>)
 8001594:	2201      	movs	r2, #1
 8001596:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_ADC1_Init+0x9c>)
 800159a:	f002 fbd5 	bl	8003d48 <HAL_ADC_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0x74>
		Error_Handler();
 80015a4:	f002 f81a 	bl	80035dc <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015a8:	2311      	movs	r3, #17
 80015aa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80015b0:	2305      	movs	r3, #5
 80015b2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_ADC1_Init+0x9c>)
 80015ba:	f002 fe61 	bl	8004280 <HAL_ADC_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC1_Init+0x94>
		Error_Handler();
 80015c4:	f002 f80a 	bl	80035dc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000039c 	.word	0x2000039c
 80015d4:	40012000 	.word	0x40012000

080015d8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_I2C1_Init+0x50>)
 80015de:	4a13      	ldr	r2, [pc, #76]	; (800162c <MX_I2C1_Init+0x54>)
 80015e0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_I2C1_Init+0x50>)
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <MX_I2C1_Init+0x58>)
 80015e6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_I2C1_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_I2C1_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_I2C1_Init+0x50>)
 80015f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_I2C1_Init+0x50>)
 8001616:	f003 ffdd 	bl	80055d4 <HAL_I2C_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001620:	f001 ffdc 	bl	80035dc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200002a8 	.word	0x200002a8
 800162c:	40005400 	.word	0x40005400
 8001630:	000186a0 	.word	0x000186a0

08001634 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001648:	463b      	mov	r3, r7
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001650:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <MX_TIM2_Init+0x94>)
 8001652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001656:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_TIM2_Init+0x94>)
 800165a:	2263      	movs	r2, #99	; 0x63
 800165c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_TIM2_Init+0x94>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MX_TIM2_Init+0x94>)
 8001666:	f04f 32ff 	mov.w	r2, #4294967295
 800166a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_TIM2_Init+0x94>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_TIM2_Init+0x94>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001678:	4813      	ldr	r0, [pc, #76]	; (80016c8 <MX_TIM2_Init+0x94>)
 800167a:	f006 fd1f 	bl	80080bc <HAL_TIM_Base_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x54>
		Error_Handler();
 8001684:	f001 ffaa 	bl	80035dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	4619      	mov	r1, r3
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MX_TIM2_Init+0x94>)
 8001696:	f007 fa21 	bl	8008adc <HAL_TIM_ConfigClockSource>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM2_Init+0x70>
		Error_Handler();
 80016a0:	f001 ff9c 	bl	80035dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80016ac:	463b      	mov	r3, r7
 80016ae:	4619      	mov	r1, r3
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_TIM2_Init+0x94>)
 80016b2:	f007 fdcb 	bl	800924c <HAL_TIMEx_MasterConfigSynchronization>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80016bc:	f001 ff8e 	bl	80035dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80016c0:	bf00      	nop
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	2000044c 	.word	0x2000044c

080016cc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	; 0x38
 80016d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80016d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016e0:	f107 0320 	add.w	r3, r7, #32
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <MX_TIM3_Init+0xe4>)
 80016fe:	4a2d      	ldr	r2, [pc, #180]	; (80017b4 <MX_TIM3_Init+0xe8>)
 8001700:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <MX_TIM3_Init+0xe4>)
 8001704:	2200      	movs	r2, #0
 8001706:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <MX_TIM3_Init+0xe4>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000;
 800170e:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <MX_TIM3_Init+0xe4>)
 8001710:	f242 7210 	movw	r2, #10000	; 0x2710
 8001714:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <MX_TIM3_Init+0xe4>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <MX_TIM3_Init+0xe4>)
 800171e:	2280      	movs	r2, #128	; 0x80
 8001720:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001722:	4823      	ldr	r0, [pc, #140]	; (80017b0 <MX_TIM3_Init+0xe4>)
 8001724:	f006 fcca 	bl	80080bc <HAL_TIM_Base_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0x66>
		Error_Handler();
 800172e:	f001 ff55 	bl	80035dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173c:	4619      	mov	r1, r3
 800173e:	481c      	ldr	r0, [pc, #112]	; (80017b0 <MX_TIM3_Init+0xe4>)
 8001740:	f007 f9cc 	bl	8008adc <HAL_TIM_ConfigClockSource>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM3_Init+0x82>
		Error_Handler();
 800174a:	f001 ff47 	bl	80035dc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800174e:	4818      	ldr	r0, [pc, #96]	; (80017b0 <MX_TIM3_Init+0xe4>)
 8001750:	f006 fdc0 	bl	80082d4 <HAL_TIM_PWM_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM3_Init+0x92>
		Error_Handler();
 800175a:	f001 ff3f 	bl	80035dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800175e:	2320      	movs	r3, #32
 8001760:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001766:	f107 0320 	add.w	r3, r7, #32
 800176a:	4619      	mov	r1, r3
 800176c:	4810      	ldr	r0, [pc, #64]	; (80017b0 <MX_TIM3_Init+0xe4>)
 800176e:	f007 fd6d 	bl	800924c <HAL_TIMEx_MasterConfigSynchronization>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001778:	f001 ff30 	bl	80035dc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800177c:	2360      	movs	r3, #96	; 0x60
 800177e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	2200      	movs	r2, #0
 8001790:	4619      	mov	r1, r3
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <MX_TIM3_Init+0xe4>)
 8001794:	f007 f8e4 	bl	8008960 <HAL_TIM_PWM_ConfigChannel>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 800179e:	f001 ff1d 	bl	80035dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80017a2:	4803      	ldr	r0, [pc, #12]	; (80017b0 <MX_TIM3_Init+0xe4>)
 80017a4:	f002 f8ae 	bl	8003904 <HAL_TIM_MspPostInit>

}
 80017a8:	bf00      	nop
 80017aa:	3738      	adds	r7, #56	; 0x38
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000354 	.word	0x20000354
 80017b4:	40000400 	.word	0x40000400

080017b8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017cc:	463b      	mov	r3, r7
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <MX_TIM4_Init+0x94>)
 80017d6:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <MX_TIM4_Init+0x98>)
 80017d8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 99;
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_TIM4_Init+0x94>)
 80017dc:	2263      	movs	r2, #99	; 0x63
 80017de:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_TIM4_Init+0x94>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_TIM4_Init+0x94>)
 80017e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017ec:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_TIM4_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_TIM4_Init+0x94>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80017fa:	4814      	ldr	r0, [pc, #80]	; (800184c <MX_TIM4_Init+0x94>)
 80017fc:	f006 fc5e 	bl	80080bc <HAL_TIM_Base_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM4_Init+0x52>
		Error_Handler();
 8001806:	f001 fee9 	bl	80035dc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4619      	mov	r1, r3
 8001816:	480d      	ldr	r0, [pc, #52]	; (800184c <MX_TIM4_Init+0x94>)
 8001818:	f007 f960 	bl	8008adc <HAL_TIM_ConfigClockSource>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8001822:	f001 fedb 	bl	80035dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800182e:	463b      	mov	r3, r7
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <MX_TIM4_Init+0x94>)
 8001834:	f007 fd0a 	bl	800924c <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800183e:	f001 fecd 	bl	80035dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000260 	.word	0x20000260
 8001850:	40000800 	.word	0x40000800

08001854 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b08c      	sub	sp, #48	; 0x30
 8001858:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	2224      	movs	r2, #36	; 0x24
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f008 fc06 	bl	800a074 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <MX_TIM5_Init+0xa0>)
 8001872:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <MX_TIM5_Init+0xa4>)
 8001874:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <MX_TIM5_Init+0xa0>)
 8001878:	2200      	movs	r2, #0
 800187a:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_TIM5_Init+0xa0>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 524288;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_TIM5_Init+0xa0>)
 8001884:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001888:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_TIM5_Init+0xa0>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <MX_TIM5_Init+0xa0>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001896:	2303      	movs	r3, #3
 8001898:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800189e:	2301      	movs	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ae:	2301      	movs	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	4619      	mov	r1, r3
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <MX_TIM5_Init+0xa0>)
 80018c2:	f006 fe11 	bl	80084e8 <HAL_TIM_Encoder_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM5_Init+0x7c>
		Error_Handler();
 80018cc:	f001 fe86 	bl	80035dc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_TIM5_Init+0xa0>)
 80018de:	f007 fcb5 	bl	800924c <HAL_TIMEx_MasterConfigSynchronization>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 80018e8:	f001 fe78 	bl	80035dc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3730      	adds	r7, #48	; 0x30
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000308 	.word	0x20000308
 80018f8:	40000c00 	.word	0x40000c00

080018fc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <MX_USART2_UART_Init+0x50>)
 8001904:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800190c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001934:	f007 fd0c 	bl	8009350 <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800193e:	f001 fe4d 	bl	80035dc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000494 	.word	0x20000494
 800194c:	40004400 	.word	0x40004400

08001950 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_DMA_Init+0x3c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <MX_DMA_Init+0x3c>)
 8001960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_DMA_Init+0x3c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2038      	movs	r0, #56	; 0x38
 8001978:	f003 f817 	bl	80049aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800197c:	2038      	movs	r0, #56	; 0x38
 800197e:	f003 f830 	bl	80049e2 <HAL_NVIC_EnableIRQ>

}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <MX_GPIO_Init+0x118>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a3e      	ldr	r2, [pc, #248]	; (8001aa8 <MX_GPIO_Init+0x118>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b3c      	ldr	r3, [pc, #240]	; (8001aa8 <MX_GPIO_Init+0x118>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <MX_GPIO_Init+0x118>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a37      	ldr	r2, [pc, #220]	; (8001aa8 <MX_GPIO_Init+0x118>)
 80019cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <MX_GPIO_Init+0x118>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <MX_GPIO_Init+0x118>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a30      	ldr	r2, [pc, #192]	; (8001aa8 <MX_GPIO_Init+0x118>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <MX_GPIO_Init+0x118>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <MX_GPIO_Init+0x118>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <MX_GPIO_Init+0x118>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <MX_GPIO_Init+0x118>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001a1c:	4823      	ldr	r0, [pc, #140]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a1e:	f003 fda7 	bl	8005570 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <MX_GPIO_Init+0x120>)
 8001a2a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	481f      	ldr	r0, [pc, #124]	; (8001ab4 <MX_GPIO_Init+0x124>)
 8001a38:	f003 fbfe 	bl	8005238 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin PA8 PA9 */
	GPIO_InitStruct.Pin = LD2_Pin | GPIO_PIN_8 | GPIO_PIN_9;
 8001a3c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0314 	add.w	r3, r7, #20
 8001a52:	4619      	mov	r1, r3
 8001a54:	4815      	ldr	r0, [pc, #84]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a56:	f003 fbef 	bl	8005238 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA7 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_10;
 8001a5a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001a5e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480f      	ldr	r0, [pc, #60]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a70:	f003 fbe2 	bl	8005238 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <MX_GPIO_Init+0x120>)
 8001a7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4808      	ldr	r0, [pc, #32]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a8a:	f003 fbd5 	bl	8005238 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2028      	movs	r0, #40	; 0x28
 8001a94:	f002 ff89 	bl	80049aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a98:	2028      	movs	r0, #40	; 0x28
 8001a9a:	f002 ffa2 	bl	80049e2 <HAL_NVIC_EnableIRQ>

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	10310000 	.word	0x10310000
 8001ab4:	40020800 	.word	0x40020800

08001ab8 <UARTMode>:

/* USER CODE BEGIN 4 */
void UARTMode() {
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0
	buffer[pointer] = inputchar;
 8001abe:	4ba9      	ldr	r3, [pc, #676]	; (8001d64 <UARTMode+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4aa9      	ldr	r2, [pc, #676]	; (8001d68 <UARTMode+0x2b0>)
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	49a9      	ldr	r1, [pc, #676]	; (8001d6c <UARTMode+0x2b4>)
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	buf = buffer[pointer];
 8001acc:	4ba5      	ldr	r3, [pc, #660]	; (8001d64 <UARTMode+0x2ac>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4aa6      	ldr	r2, [pc, #664]	; (8001d6c <UARTMode+0x2b4>)
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	4aa6      	ldr	r2, [pc, #664]	; (8001d70 <UARTMode+0x2b8>)
 8001ad8:	6013      	str	r3, [r2, #0]
	if (bytecount == 0) {
 8001ada:	4ba6      	ldr	r3, [pc, #664]	; (8001d74 <UARTMode+0x2bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 80c4 	bne.w	8001c6c <UARTMode+0x1b4>
		if (inputchar >= 145 && inputchar <= 158) {
 8001ae4:	4ba0      	ldr	r3, [pc, #640]	; (8001d68 <UARTMode+0x2b0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b90      	cmp	r3, #144	; 0x90
 8001aea:	dd0d      	ble.n	8001b08 <UARTMode+0x50>
 8001aec:	4b9e      	ldr	r3, [pc, #632]	; (8001d68 <UARTMode+0x2b0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b9e      	cmp	r3, #158	; 0x9e
 8001af2:	dc09      	bgt.n	8001b08 <UARTMode+0x50>
			pointer = 0;
 8001af4:	4b9b      	ldr	r3, [pc, #620]	; (8001d64 <UARTMode+0x2ac>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
			buffer[pointer] = inputchar;
 8001afa:	4b9a      	ldr	r3, [pc, #616]	; (8001d64 <UARTMode+0x2ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a9a      	ldr	r2, [pc, #616]	; (8001d68 <UARTMode+0x2b0>)
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	499a      	ldr	r1, [pc, #616]	; (8001d6c <UARTMode+0x2b4>)
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		switch (inputchar) {
 8001b08:	4b97      	ldr	r3, [pc, #604]	; (8001d68 <UARTMode+0x2b0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3b91      	subs	r3, #145	; 0x91
 8001b0e:	2b0d      	cmp	r3, #13
 8001b10:	f200 8642 	bhi.w	8002798 <UARTMode+0xce0>
 8001b14:	a201      	add	r2, pc, #4	; (adr r2, 8001b1c <UARTMode+0x64>)
 8001b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1a:	bf00      	nop
 8001b1c:	08001b55 	.word	0x08001b55
 8001b20:	08001b69 	.word	0x08001b69
 8001b24:	08001b7d 	.word	0x08001b7d
 8001b28:	08001b91 	.word	0x08001b91
 8001b2c:	08001ba5 	.word	0x08001ba5
 8001b30:	08001bb9 	.word	0x08001bb9
 8001b34:	08001bcd 	.word	0x08001bcd
 8001b38:	08001be1 	.word	0x08001be1
 8001b3c:	08001bf5 	.word	0x08001bf5
 8001b40:	08001c09 	.word	0x08001c09
 8001b44:	08001c1d 	.word	0x08001c1d
 8001b48:	08001c31 	.word	0x08001c31
 8001b4c:	08001c45 	.word	0x08001c45
 8001b50:	08001c59 	.word	0x08001c59
		case 145:
			mode = 1;
 8001b54:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <UARTMode+0x2c0>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001b5a:	4b86      	ldr	r3, [pc, #536]	; (8001d74 <UARTMode+0x2bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	4a84      	ldr	r2, [pc, #528]	; (8001d74 <UARTMode+0x2bc>)
 8001b62:	6013      	str	r3, [r2, #0]
			break;
 8001b64:	f000 be19 	b.w	800279a <UARTMode+0xce2>
		case 146:
			mode = 2;
 8001b68:	4b83      	ldr	r3, [pc, #524]	; (8001d78 <UARTMode+0x2c0>)
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001b6e:	4b81      	ldr	r3, [pc, #516]	; (8001d74 <UARTMode+0x2bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	4a7f      	ldr	r2, [pc, #508]	; (8001d74 <UARTMode+0x2bc>)
 8001b76:	6013      	str	r3, [r2, #0]
			break;
 8001b78:	f000 be0f 	b.w	800279a <UARTMode+0xce2>
		case 147:
			mode = 3;
 8001b7c:	4b7e      	ldr	r3, [pc, #504]	; (8001d78 <UARTMode+0x2c0>)
 8001b7e:	2203      	movs	r2, #3
 8001b80:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001b82:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <UARTMode+0x2bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	4a7a      	ldr	r2, [pc, #488]	; (8001d74 <UARTMode+0x2bc>)
 8001b8a:	6013      	str	r3, [r2, #0]
			break;
 8001b8c:	f000 be05 	b.w	800279a <UARTMode+0xce2>
		case 148:
			mode = 4;
 8001b90:	4b79      	ldr	r3, [pc, #484]	; (8001d78 <UARTMode+0x2c0>)
 8001b92:	2204      	movs	r2, #4
 8001b94:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001b96:	4b77      	ldr	r3, [pc, #476]	; (8001d74 <UARTMode+0x2bc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4a75      	ldr	r2, [pc, #468]	; (8001d74 <UARTMode+0x2bc>)
 8001b9e:	6013      	str	r3, [r2, #0]
			break;
 8001ba0:	f000 bdfb 	b.w	800279a <UARTMode+0xce2>
		case 149:
			mode = 5;
 8001ba4:	4b74      	ldr	r3, [pc, #464]	; (8001d78 <UARTMode+0x2c0>)
 8001ba6:	2205      	movs	r2, #5
 8001ba8:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001baa:	4b72      	ldr	r3, [pc, #456]	; (8001d74 <UARTMode+0x2bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	4a70      	ldr	r2, [pc, #448]	; (8001d74 <UARTMode+0x2bc>)
 8001bb2:	6013      	str	r3, [r2, #0]
			break;
 8001bb4:	f000 bdf1 	b.w	800279a <UARTMode+0xce2>
		case 150:
			mode = 6;
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <UARTMode+0x2c0>)
 8001bba:	2206      	movs	r2, #6
 8001bbc:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <UARTMode+0x2bc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	4a6b      	ldr	r2, [pc, #428]	; (8001d74 <UARTMode+0x2bc>)
 8001bc6:	6013      	str	r3, [r2, #0]
			break;
 8001bc8:	f000 bde7 	b.w	800279a <UARTMode+0xce2>
		case 151:
			mode = 7;
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <UARTMode+0x2c0>)
 8001bce:	2207      	movs	r2, #7
 8001bd0:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001bd2:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <UARTMode+0x2bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a66      	ldr	r2, [pc, #408]	; (8001d74 <UARTMode+0x2bc>)
 8001bda:	6013      	str	r3, [r2, #0]
			break;
 8001bdc:	f000 bddd 	b.w	800279a <UARTMode+0xce2>
		case 152:
			mode = 8;
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <UARTMode+0x2c0>)
 8001be2:	2208      	movs	r2, #8
 8001be4:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001be6:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <UARTMode+0x2bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3301      	adds	r3, #1
 8001bec:	4a61      	ldr	r2, [pc, #388]	; (8001d74 <UARTMode+0x2bc>)
 8001bee:	6013      	str	r3, [r2, #0]
			break;
 8001bf0:	f000 bdd3 	b.w	800279a <UARTMode+0xce2>
		case 153:
			mode = 9;
 8001bf4:	4b60      	ldr	r3, [pc, #384]	; (8001d78 <UARTMode+0x2c0>)
 8001bf6:	2209      	movs	r2, #9
 8001bf8:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <UARTMode+0x2bc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	4a5c      	ldr	r2, [pc, #368]	; (8001d74 <UARTMode+0x2bc>)
 8001c02:	6013      	str	r3, [r2, #0]
			break;
 8001c04:	f000 bdc9 	b.w	800279a <UARTMode+0xce2>
		case 154:
			mode = 10;
 8001c08:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <UARTMode+0x2c0>)
 8001c0a:	220a      	movs	r2, #10
 8001c0c:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001c0e:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <UARTMode+0x2bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a57      	ldr	r2, [pc, #348]	; (8001d74 <UARTMode+0x2bc>)
 8001c16:	6013      	str	r3, [r2, #0]
			break;
 8001c18:	f000 bdbf 	b.w	800279a <UARTMode+0xce2>
		case 155:
			mode = 11;
 8001c1c:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <UARTMode+0x2c0>)
 8001c1e:	220b      	movs	r2, #11
 8001c20:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001c22:	4b54      	ldr	r3, [pc, #336]	; (8001d74 <UARTMode+0x2bc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <UARTMode+0x2bc>)
 8001c2a:	6013      	str	r3, [r2, #0]
			break;
 8001c2c:	f000 bdb5 	b.w	800279a <UARTMode+0xce2>
		case 156:
			mode = 12;
 8001c30:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <UARTMode+0x2c0>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001c36:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <UARTMode+0x2bc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	4a4d      	ldr	r2, [pc, #308]	; (8001d74 <UARTMode+0x2bc>)
 8001c3e:	6013      	str	r3, [r2, #0]
			break;
 8001c40:	f000 bdab 	b.w	800279a <UARTMode+0xce2>
		case 157:
			mode = 13;
 8001c44:	4b4c      	ldr	r3, [pc, #304]	; (8001d78 <UARTMode+0x2c0>)
 8001c46:	220d      	movs	r2, #13
 8001c48:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <UARTMode+0x2bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	4a48      	ldr	r2, [pc, #288]	; (8001d74 <UARTMode+0x2bc>)
 8001c52:	6013      	str	r3, [r2, #0]
			break;
 8001c54:	f000 bda1 	b.w	800279a <UARTMode+0xce2>
		case 158:
			mode = 14;
 8001c58:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <UARTMode+0x2c0>)
 8001c5a:	220e      	movs	r2, #14
 8001c5c:	601a      	str	r2, [r3, #0]
			bytecount += 1;
 8001c5e:	4b45      	ldr	r3, [pc, #276]	; (8001d74 <UARTMode+0x2bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	4a43      	ldr	r2, [pc, #268]	; (8001d74 <UARTMode+0x2bc>)
 8001c66:	6013      	str	r3, [r2, #0]
			break;
 8001c68:	f000 bd97 	b.w	800279a <UARTMode+0xce2>
		default:
			break;
		}
	} else if (mode == 2) {
 8001c6c:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <UARTMode+0x2c0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d147      	bne.n	8001d04 <UARTMode+0x24c>
		if (bytecount == 1
 8001c74:	4b3f      	ldr	r3, [pc, #252]	; (8001d74 <UARTMode+0x2bc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d126      	bne.n	8001cca <UARTMode+0x212>
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 8001c7c:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <UARTMode+0x2ac>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a3a      	ldr	r2, [pc, #232]	; (8001d6c <UARTMode+0x2b4>)
 8001c82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c86:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <UARTMode+0x2ac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	4937      	ldr	r1, [pc, #220]	; (8001d6c <UARTMode+0x2b4>)
 8001c8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c92:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d117      	bne.n	8001cca <UARTMode+0x212>
			enable = 1;
 8001c9a:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <UARTMode+0x2c4>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
			uint8_t ack[] = { 0x58, 0x75 };
 8001ca0:	f247 5358 	movw	r3, #30040	; 0x7558
 8001ca4:	853b      	strh	r3, [r7, #40]	; 0x28
			HAL_Delay(100);
 8001ca6:	2064      	movs	r0, #100	; 0x64
 8001ca8:	f002 f82a 	bl	8003d00 <HAL_Delay>
			HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 8001cac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001cb0:	230a      	movs	r3, #10
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	4832      	ldr	r0, [pc, #200]	; (8001d80 <UARTMode+0x2c8>)
 8001cb6:	f007 fb98 	bl	80093ea <HAL_UART_Transmit>
			mode = 0;
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <UARTMode+0x2c0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <UARTMode+0x2bc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 8001cc6:	f000 bd68 	b.w	800279a <UARTMode+0xce2>
		} else if (bytecount == 1
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <UARTMode+0x2bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	f040 8563 	bne.w	800279a <UARTMode+0xce2>
				&& (buffer[pointer] != (buffer[pointer - 1] ^ 0b11111111))) {
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <UARTMode+0x2ac>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a24      	ldr	r2, [pc, #144]	; (8001d6c <UARTMode+0x2b4>)
 8001cda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <UARTMode+0x2ac>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	4921      	ldr	r1, [pc, #132]	; (8001d6c <UARTMode+0x2b4>)
 8001ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cea:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	f000 8553 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 8001cf4:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <UARTMode+0x2c0>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8001cfa:	4b1e      	ldr	r3, [pc, #120]	; (8001d74 <UARTMode+0x2bc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f000 bd4b 	b.w	800279a <UARTMode+0xce2>
		}
	} else if (mode == 3) {
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <UARTMode+0x2c0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d158      	bne.n	8001dbe <UARTMode+0x306>
		if (bytecount == 1
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <UARTMode+0x2bc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d137      	bne.n	8001d84 <UARTMode+0x2cc>
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 8001d14:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <UARTMode+0x2ac>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a14      	ldr	r2, [pc, #80]	; (8001d6c <UARTMode+0x2b4>)
 8001d1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <UARTMode+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	4911      	ldr	r1, [pc, #68]	; (8001d6c <UARTMode+0x2b4>)
 8001d26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d2a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d128      	bne.n	8001d84 <UARTMode+0x2cc>
			enable = 0;
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <UARTMode+0x2c4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
			uint8_t ack[] = { 0x58, 0x75 };
 8001d38:	f247 5358 	movw	r3, #30040	; 0x7558
 8001d3c:	84bb      	strh	r3, [r7, #36]	; 0x24
			HAL_Delay(100);
 8001d3e:	2064      	movs	r0, #100	; 0x64
 8001d40:	f001 ffde 	bl	8003d00 <HAL_Delay>
			HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 8001d44:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001d48:	230a      	movs	r3, #10
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	480c      	ldr	r0, [pc, #48]	; (8001d80 <UARTMode+0x2c8>)
 8001d4e:	f007 fb4c 	bl	80093ea <HAL_UART_Transmit>
			mode = 0;
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <UARTMode+0x2c0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <UARTMode+0x2bc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 8001d5e:	f000 bd1c 	b.w	800279a <UARTMode+0xce2>
 8001d62:	bf00      	nop
 8001d64:	200001f4 	.word	0x200001f4
 8001d68:	200002fc 	.word	0x200002fc
 8001d6c:	20000174 	.word	0x20000174
 8001d70:	2000023c 	.word	0x2000023c
 8001d74:	200001f8 	.word	0x200001f8
 8001d78:	200001fc 	.word	0x200001fc
 8001d7c:	20000200 	.word	0x20000200
 8001d80:	20000494 	.word	0x20000494
		} else if (bytecount == 1
 8001d84:	4bac      	ldr	r3, [pc, #688]	; (8002038 <UARTMode+0x580>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	f040 8506 	bne.w	800279a <UARTMode+0xce2>
				&& (buffer[pointer] != (buffer[pointer - 1] ^ 0b11111111))) {
 8001d8e:	4bab      	ldr	r3, [pc, #684]	; (800203c <UARTMode+0x584>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4aab      	ldr	r2, [pc, #684]	; (8002040 <UARTMode+0x588>)
 8001d94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d98:	4ba8      	ldr	r3, [pc, #672]	; (800203c <UARTMode+0x584>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	49a8      	ldr	r1, [pc, #672]	; (8002040 <UARTMode+0x588>)
 8001da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001da4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f000 84f6 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 8001dae:	4ba5      	ldr	r3, [pc, #660]	; (8002044 <UARTMode+0x58c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8001db4:	4ba0      	ldr	r3, [pc, #640]	; (8002038 <UARTMode+0x580>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f000 bcee 	b.w	800279a <UARTMode+0xce2>
		}
	} else if (mode == 4) {
 8001dbe:	4ba1      	ldr	r3, [pc, #644]	; (8002044 <UARTMode+0x58c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	f040 80a9 	bne.w	8001f1a <UARTMode+0x462>
		if (bytecount == 1) {
 8001dc8:	4b9b      	ldr	r3, [pc, #620]	; (8002038 <UARTMode+0x580>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d104      	bne.n	8001dda <UARTMode+0x322>
			bytecount = 2;
 8001dd0:	4b99      	ldr	r3, [pc, #612]	; (8002038 <UARTMode+0x580>)
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	f000 bce0 	b.w	800279a <UARTMode+0xce2>
		} else if (bytecount == 2) {
 8001dda:	4b97      	ldr	r3, [pc, #604]	; (8002038 <UARTMode+0x580>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d104      	bne.n	8001dec <UARTMode+0x334>
			bytecount = 3;
 8001de2:	4b95      	ldr	r3, [pc, #596]	; (8002038 <UARTMode+0x580>)
 8001de4:	2203      	movs	r2, #3
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	f000 bcd7 	b.w	800279a <UARTMode+0xce2>
		} else if (bytecount == 3
 8001dec:	4b92      	ldr	r3, [pc, #584]	; (8002038 <UARTMode+0x580>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d162      	bne.n	8001eba <UARTMode+0x402>
				&& buffer[pointer]
 8001df4:	4b91      	ldr	r3, [pc, #580]	; (800203c <UARTMode+0x584>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a91      	ldr	r2, [pc, #580]	; (8002040 <UARTMode+0x588>)
 8001dfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						== (((buffer[pointer - 1] + buffer[pointer - 2]
 8001dfe:	4b8f      	ldr	r3, [pc, #572]	; (800203c <UARTMode+0x584>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	498e      	ldr	r1, [pc, #568]	; (8002040 <UARTMode+0x588>)
 8001e06:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001e0a:	4b8c      	ldr	r3, [pc, #560]	; (800203c <UARTMode+0x584>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3b02      	subs	r3, #2
 8001e10:	488b      	ldr	r0, [pc, #556]	; (8002040 <UARTMode+0x588>)
 8001e12:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e16:	4419      	add	r1, r3
								+ buffer[pointer - 3]) % 256) ^ 0b11111111)) {
 8001e18:	4b88      	ldr	r3, [pc, #544]	; (800203c <UARTMode+0x584>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	4888      	ldr	r0, [pc, #544]	; (8002040 <UARTMode+0x588>)
 8001e20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001e24:	440b      	add	r3, r1
 8001e26:	4259      	negs	r1, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	b2c9      	uxtb	r1, r1
 8001e2c:	bf58      	it	pl
 8001e2e:	424b      	negpl	r3, r1
 8001e30:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
				&& buffer[pointer]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d140      	bne.n	8001eba <UARTMode+0x402>
			uint8_t ack[] = { 0x58, 0x75 };
 8001e38:	f247 5358 	movw	r3, #30040	; 0x7558
 8001e3c:	843b      	strh	r3, [r7, #32]
			HAL_Delay(100);
 8001e3e:	2064      	movs	r0, #100	; 0x64
 8001e40:	f001 ff5e 	bl	8003d00 <HAL_Delay>
			HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 8001e44:	f107 0120 	add.w	r1, r7, #32
 8001e48:	230a      	movs	r3, #10
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	487e      	ldr	r0, [pc, #504]	; (8002048 <UARTMode+0x590>)
 8001e4e:	f007 facc 	bl	80093ea <HAL_UART_Transmit>
			vmax = buffer[pointer - 1] / 60.0 * 2.0 * 3.141;
 8001e52:	4b7a      	ldr	r3, [pc, #488]	; (800203c <UARTMode+0x584>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	4a79      	ldr	r2, [pc, #484]	; (8002040 <UARTMode+0x588>)
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb60 	bl	8000524 <__aeabi_i2d>
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b78      	ldr	r3, [pc, #480]	; (800204c <UARTMode+0x594>)
 8001e6a:	f7fe fcef 	bl	800084c <__aeabi_ddiv>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	f7fe fa07 	bl	800028c <__adddf3>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	a368      	add	r3, pc, #416	; (adr r3, 8002028 <UARTMode+0x570>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fbb4 	bl	80005f8 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7fe fe5e 	bl	8000b58 <__aeabi_d2f>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a6c      	ldr	r2, [pc, #432]	; (8002050 <UARTMode+0x598>)
 8001ea0:	6013      	str	r3, [r2, #0]
			dumpvmax = vmax;
 8001ea2:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <UARTMode+0x598>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6b      	ldr	r2, [pc, #428]	; (8002054 <UARTMode+0x59c>)
 8001ea8:	6013      	str	r3, [r2, #0]
			mode = 0;
 8001eaa:	4b66      	ldr	r3, [pc, #408]	; (8002044 <UARTMode+0x58c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8001eb0:	4b61      	ldr	r3, [pc, #388]	; (8002038 <UARTMode+0x580>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
								+ buffer[pointer - 3]) % 256) ^ 0b11111111)) {
 8001eb6:	f000 bc70 	b.w	800279a <UARTMode+0xce2>
		} else if (bytecount == 3
 8001eba:	4b5f      	ldr	r3, [pc, #380]	; (8002038 <UARTMode+0x580>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	f040 846b 	bne.w	800279a <UARTMode+0xce2>
				&& buffer[pointer]
 8001ec4:	4b5d      	ldr	r3, [pc, #372]	; (800203c <UARTMode+0x584>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a5d      	ldr	r2, [pc, #372]	; (8002040 <UARTMode+0x588>)
 8001eca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						!= (((buffer[pointer - 1] + buffer[pointer - 2]
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <UARTMode+0x584>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	495a      	ldr	r1, [pc, #360]	; (8002040 <UARTMode+0x588>)
 8001ed6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001eda:	4b58      	ldr	r3, [pc, #352]	; (800203c <UARTMode+0x584>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3b02      	subs	r3, #2
 8001ee0:	4857      	ldr	r0, [pc, #348]	; (8002040 <UARTMode+0x588>)
 8001ee2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ee6:	4419      	add	r1, r3
								+ buffer[pointer - 3]) % 256) ^ 0b11111111)) {
 8001ee8:	4b54      	ldr	r3, [pc, #336]	; (800203c <UARTMode+0x584>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	4854      	ldr	r0, [pc, #336]	; (8002040 <UARTMode+0x588>)
 8001ef0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001ef4:	440b      	add	r3, r1
 8001ef6:	4259      	negs	r1, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	b2c9      	uxtb	r1, r1
 8001efc:	bf58      	it	pl
 8001efe:	424b      	negpl	r3, r1
 8001f00:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
				&& buffer[pointer]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f000 8448 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 8001f0a:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <UARTMode+0x58c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8001f10:	4b49      	ldr	r3, [pc, #292]	; (8002038 <UARTMode+0x580>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	f000 bc40 	b.w	800279a <UARTMode+0xce2>
		}
	} else if (mode == 5) {
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <UARTMode+0x58c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	f040 80cd 	bne.w	80020be <UARTMode+0x606>
		if (bytecount == 1) {
 8001f24:	4b44      	ldr	r3, [pc, #272]	; (8002038 <UARTMode+0x580>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d104      	bne.n	8001f36 <UARTMode+0x47e>
			bytecount = 2;
 8001f2c:	4b42      	ldr	r3, [pc, #264]	; (8002038 <UARTMode+0x580>)
 8001f2e:	2202      	movs	r2, #2
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f000 bc32 	b.w	800279a <UARTMode+0xce2>
		} else if (bytecount == 2) {
 8001f36:	4b40      	ldr	r3, [pc, #256]	; (8002038 <UARTMode+0x580>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d104      	bne.n	8001f48 <UARTMode+0x490>
			bytecount = 3;
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <UARTMode+0x580>)
 8001f40:	2203      	movs	r2, #3
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	f000 bc29 	b.w	800279a <UARTMode+0xce2>
		} else if (bytecount == 3
 8001f48:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <UARTMode+0x580>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	f040 8087 	bne.w	8002060 <UARTMode+0x5a8>
				&& buffer[pointer]
 8001f52:	4b3a      	ldr	r3, [pc, #232]	; (800203c <UARTMode+0x584>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <UARTMode+0x588>)
 8001f58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						== (((buffer[pointer - 1] + buffer[pointer - 2]
 8001f5c:	4b37      	ldr	r3, [pc, #220]	; (800203c <UARTMode+0x584>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	4937      	ldr	r1, [pc, #220]	; (8002040 <UARTMode+0x588>)
 8001f64:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001f68:	4b34      	ldr	r3, [pc, #208]	; (800203c <UARTMode+0x584>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3b02      	subs	r3, #2
 8001f6e:	4834      	ldr	r0, [pc, #208]	; (8002040 <UARTMode+0x588>)
 8001f70:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001f74:	4419      	add	r1, r3
								+ buffer[pointer - 3]) % 256) ^ 0b11111111)) {
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <UARTMode+0x584>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3b03      	subs	r3, #3
 8001f7c:	4830      	ldr	r0, [pc, #192]	; (8002040 <UARTMode+0x588>)
 8001f7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001f82:	440b      	add	r3, r1
 8001f84:	4259      	negs	r1, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	b2c9      	uxtb	r1, r1
 8001f8a:	bf58      	it	pl
 8001f8c:	424b      	negpl	r3, r1
 8001f8e:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
				&& buffer[pointer]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d164      	bne.n	8002060 <UARTMode+0x5a8>
			uint8_t ack[] = { 0x58, 0x75 };
 8001f96:	f247 5358 	movw	r3, #30040	; 0x7558
 8001f9a:	83bb      	strh	r3, [r7, #28]
			HAL_Delay(100);
 8001f9c:	2064      	movs	r0, #100	; 0x64
 8001f9e:	f001 feaf 	bl	8003d00 <HAL_Delay>
			HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 8001fa2:	f107 011c 	add.w	r1, r7, #28
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4827      	ldr	r0, [pc, #156]	; (8002048 <UARTMode+0x590>)
 8001fac:	f007 fa1d 	bl	80093ea <HAL_UART_Transmit>
			ptg = ((256.0 * buffer[pointer - 2]) + buffer[pointer - 1])
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <UARTMode+0x584>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3b02      	subs	r3, #2
 8001fb6:	4a22      	ldr	r2, [pc, #136]	; (8002040 <UARTMode+0x588>)
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fab1 	bl	8000524 <__aeabi_i2d>
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <UARTMode+0x5a0>)
 8001fc8:	f7fe fb16 	bl	80005f8 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4614      	mov	r4, r2
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <UARTMode+0x584>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	4a19      	ldr	r2, [pc, #100]	; (8002040 <UARTMode+0x588>)
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fa9f 	bl	8000524 <__aeabi_i2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe f94d 	bl	800028c <__adddf3>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
					/ 10000.0;
 8001ffa:	a30d      	add	r3, pc, #52	; (adr r3, 8002030 <UARTMode+0x578>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe fc24 	bl	800084c <__aeabi_ddiv>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f7fe fda4 	bl	8000b58 <__aeabi_d2f>
 8002010:	4603      	mov	r3, r0
			ptg = ((256.0 * buffer[pointer - 2]) + buffer[pointer - 1])
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <UARTMode+0x5a4>)
 8002014:	6013      	str	r3, [r2, #0]
			mode = 0;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <UARTMode+0x58c>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <UARTMode+0x580>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
								+ buffer[pointer - 3]) % 256) ^ 0b11111111)) {
 8002022:	e3ba      	b.n	800279a <UARTMode+0xce2>
 8002024:	f3af 8000 	nop.w
 8002028:	9ba5e354 	.word	0x9ba5e354
 800202c:	400920c4 	.word	0x400920c4
 8002030:	00000000 	.word	0x00000000
 8002034:	40c38800 	.word	0x40c38800
 8002038:	200001f8 	.word	0x200001f8
 800203c:	200001f4 	.word	0x200001f4
 8002040:	20000174 	.word	0x20000174
 8002044:	200001fc 	.word	0x200001fc
 8002048:	20000494 	.word	0x20000494
 800204c:	404e0000 	.word	0x404e0000
 8002050:	20000010 	.word	0x20000010
 8002054:	20000014 	.word	0x20000014
 8002058:	40700000 	.word	0x40700000
 800205c:	2000014c 	.word	0x2000014c
		} else if (bytecount == 3
 8002060:	4b93      	ldr	r3, [pc, #588]	; (80022b0 <UARTMode+0x7f8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b03      	cmp	r3, #3
 8002066:	f040 8398 	bne.w	800279a <UARTMode+0xce2>
				&& buffer[pointer]
 800206a:	4b92      	ldr	r3, [pc, #584]	; (80022b4 <UARTMode+0x7fc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a92      	ldr	r2, [pc, #584]	; (80022b8 <UARTMode+0x800>)
 8002070:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						!= (((buffer[pointer - 1] + buffer[pointer - 2]
 8002074:	4b8f      	ldr	r3, [pc, #572]	; (80022b4 <UARTMode+0x7fc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	498f      	ldr	r1, [pc, #572]	; (80022b8 <UARTMode+0x800>)
 800207c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002080:	4b8c      	ldr	r3, [pc, #560]	; (80022b4 <UARTMode+0x7fc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	3b02      	subs	r3, #2
 8002086:	488c      	ldr	r0, [pc, #560]	; (80022b8 <UARTMode+0x800>)
 8002088:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800208c:	4419      	add	r1, r3
								+ buffer[pointer - 3]) % 256) ^ 0b11111111)) {
 800208e:	4b89      	ldr	r3, [pc, #548]	; (80022b4 <UARTMode+0x7fc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3b03      	subs	r3, #3
 8002094:	4888      	ldr	r0, [pc, #544]	; (80022b8 <UARTMode+0x800>)
 8002096:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800209a:	440b      	add	r3, r1
 800209c:	4259      	negs	r1, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	b2c9      	uxtb	r1, r1
 80020a2:	bf58      	it	pl
 80020a4:	424b      	negpl	r3, r1
 80020a6:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
				&& buffer[pointer]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	f000 8375 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 80020b0:	4b82      	ldr	r3, [pc, #520]	; (80022bc <UARTMode+0x804>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 80020b6:	4b7e      	ldr	r3, [pc, #504]	; (80022b0 <UARTMode+0x7f8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e36d      	b.n	800279a <UARTMode+0xce2>
		}
	} else if (mode == 6) {
 80020be:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <UARTMode+0x804>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	f040 808a 	bne.w	80021dc <UARTMode+0x724>
		if (bytecount == 1) {
 80020c8:	4b79      	ldr	r3, [pc, #484]	; (80022b0 <UARTMode+0x7f8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d103      	bne.n	80020d8 <UARTMode+0x620>
			bytecount = 2;
 80020d0:	4b77      	ldr	r3, [pc, #476]	; (80022b0 <UARTMode+0x7f8>)
 80020d2:	2202      	movs	r2, #2
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e360      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 2) {
 80020d8:	4b75      	ldr	r3, [pc, #468]	; (80022b0 <UARTMode+0x7f8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d103      	bne.n	80020e8 <UARTMode+0x630>
			bytecount = 3;
 80020e0:	4b73      	ldr	r3, [pc, #460]	; (80022b0 <UARTMode+0x7f8>)
 80020e2:	2203      	movs	r2, #3
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e358      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 3
 80020e8:	4b71      	ldr	r3, [pc, #452]	; (80022b0 <UARTMode+0x7f8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d146      	bne.n	800217e <UARTMode+0x6c6>
				&& buffer[pointer]
 80020f0:	4b70      	ldr	r3, [pc, #448]	; (80022b4 <UARTMode+0x7fc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a70      	ldr	r2, [pc, #448]	; (80022b8 <UARTMode+0x800>)
 80020f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						== (((buffer[pointer - 1] + buffer[pointer - 2]
 80020fa:	4b6e      	ldr	r3, [pc, #440]	; (80022b4 <UARTMode+0x7fc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3b01      	subs	r3, #1
 8002100:	496d      	ldr	r1, [pc, #436]	; (80022b8 <UARTMode+0x800>)
 8002102:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002106:	4b6b      	ldr	r3, [pc, #428]	; (80022b4 <UARTMode+0x7fc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3b02      	subs	r3, #2
 800210c:	486a      	ldr	r0, [pc, #424]	; (80022b8 <UARTMode+0x800>)
 800210e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002112:	4419      	add	r1, r3
								+ buffer[pointer - 3]) % 256) ^ 0b11111111)) {
 8002114:	4b67      	ldr	r3, [pc, #412]	; (80022b4 <UARTMode+0x7fc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3b03      	subs	r3, #3
 800211a:	4867      	ldr	r0, [pc, #412]	; (80022b8 <UARTMode+0x800>)
 800211c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002120:	440b      	add	r3, r1
 8002122:	4259      	negs	r1, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	b2c9      	uxtb	r1, r1
 8002128:	bf58      	it	pl
 800212a:	424b      	negpl	r3, r1
 800212c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
				&& buffer[pointer]
 8002130:	429a      	cmp	r2, r3
 8002132:	d124      	bne.n	800217e <UARTMode+0x6c6>
			uint8_t ack[] = { 0x58, 0x75 };
 8002134:	f247 5358 	movw	r3, #30040	; 0x7558
 8002138:	833b      	strh	r3, [r7, #24]
			HAL_Delay(100);
 800213a:	2064      	movs	r0, #100	; 0x64
 800213c:	f001 fde0 	bl	8003d00 <HAL_Delay>
			HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 8002140:	f107 0118 	add.w	r1, r7, #24
 8002144:	230a      	movs	r3, #10
 8002146:	2202      	movs	r2, #2
 8002148:	485d      	ldr	r0, [pc, #372]	; (80022c0 <UARTMode+0x808>)
 800214a:	f007 f94e 	bl	80093ea <HAL_UART_Transmit>
			ptg = station[buffer[pointer - 1] - 1];
 800214e:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <UARTMode+0x7fc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3b01      	subs	r3, #1
 8002154:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <UARTMode+0x800>)
 8002156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215a:	3b01      	subs	r3, #1
 800215c:	4a59      	ldr	r2, [pc, #356]	; (80022c4 <UARTMode+0x80c>)
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216a:	4b57      	ldr	r3, [pc, #348]	; (80022c8 <UARTMode+0x810>)
 800216c:	edc3 7a00 	vstr	s15, [r3]
			mode = 0;
 8002170:	4b52      	ldr	r3, [pc, #328]	; (80022bc <UARTMode+0x804>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8002176:	4b4e      	ldr	r3, [pc, #312]	; (80022b0 <UARTMode+0x7f8>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
								+ buffer[pointer - 3]) % 256) ^ 0b11111111)) {
 800217c:	e30d      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 3
 800217e:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <UARTMode+0x7f8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b03      	cmp	r3, #3
 8002184:	f040 8309 	bne.w	800279a <UARTMode+0xce2>
				&& buffer[pointer]
 8002188:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <UARTMode+0x7fc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4a      	ldr	r2, [pc, #296]	; (80022b8 <UARTMode+0x800>)
 800218e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
						!= (((buffer[pointer - 1] + buffer[pointer - 2]
 8002192:	4b48      	ldr	r3, [pc, #288]	; (80022b4 <UARTMode+0x7fc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3b01      	subs	r3, #1
 8002198:	4947      	ldr	r1, [pc, #284]	; (80022b8 <UARTMode+0x800>)
 800219a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800219e:	4b45      	ldr	r3, [pc, #276]	; (80022b4 <UARTMode+0x7fc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3b02      	subs	r3, #2
 80021a4:	4844      	ldr	r0, [pc, #272]	; (80022b8 <UARTMode+0x800>)
 80021a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80021aa:	4419      	add	r1, r3
								+ buffer[pointer - 3]) % 256) ^ 0b11111111)) {
 80021ac:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <UARTMode+0x7fc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	4841      	ldr	r0, [pc, #260]	; (80022b8 <UARTMode+0x800>)
 80021b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80021b8:	440b      	add	r3, r1
 80021ba:	4259      	negs	r1, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	b2c9      	uxtb	r1, r1
 80021c0:	bf58      	it	pl
 80021c2:	424b      	negpl	r3, r1
 80021c4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
				&& buffer[pointer]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f000 82e6 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <UARTMode+0x804>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 80021d4:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <UARTMode+0x7f8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e2de      	b.n	800279a <UARTMode+0xce2>
		}
	} else if (mode == 7) {
 80021dc:	4b37      	ldr	r3, [pc, #220]	; (80022bc <UARTMode+0x804>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b07      	cmp	r3, #7
 80021e2:	f040 809a 	bne.w	800231a <UARTMode+0x862>
		if (bytecount == 1) {
 80021e6:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <UARTMode+0x7f8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d11b      	bne.n	8002226 <UARTMode+0x76e>
			stationnumber = buffer[pointer];
 80021ee:	4b31      	ldr	r3, [pc, #196]	; (80022b4 <UARTMode+0x7fc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a31      	ldr	r2, [pc, #196]	; (80022b8 <UARTMode+0x800>)
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	4a34      	ldr	r2, [pc, #208]	; (80022cc <UARTMode+0x814>)
 80021fa:	6013      	str	r3, [r2, #0]
			frame3check += (buffer[pointer] + buffer[pointer - 1]);
 80021fc:	4b2d      	ldr	r3, [pc, #180]	; (80022b4 <UARTMode+0x7fc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a2d      	ldr	r2, [pc, #180]	; (80022b8 <UARTMode+0x800>)
 8002202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002206:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <UARTMode+0x7fc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3b01      	subs	r3, #1
 800220c:	492a      	ldr	r1, [pc, #168]	; (80022b8 <UARTMode+0x800>)
 800220e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002212:	441a      	add	r2, r3
 8002214:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <UARTMode+0x818>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4413      	add	r3, r2
 800221a:	4a2d      	ldr	r2, [pc, #180]	; (80022d0 <UARTMode+0x818>)
 800221c:	6013      	str	r3, [r2, #0]
			bytecount = 2;
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <UARTMode+0x7f8>)
 8002220:	2202      	movs	r2, #2
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e2b9      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount < 2 + stationnumber) {
 8002226:	4b29      	ldr	r3, [pc, #164]	; (80022cc <UARTMode+0x814>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <UARTMode+0x7f8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	db0f      	blt.n	8002254 <UARTMode+0x79c>
			frame3check += buffer[pointer];
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <UARTMode+0x7fc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <UARTMode+0x800>)
 800223a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <UARTMode+0x818>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <UARTMode+0x818>)
 8002246:	6013      	str	r3, [r2, #0]
			bytecount += 1;
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <UARTMode+0x7f8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	4a18      	ldr	r2, [pc, #96]	; (80022b0 <UARTMode+0x7f8>)
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e2a2      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 2 + stationnumber
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <UARTMode+0x814>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	1c9a      	adds	r2, r3, #2
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <UARTMode+0x7f8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d138      	bne.n	80022d4 <UARTMode+0x81c>
				&& buffer[pointer] == ((frame3check % 256) ^ 0b11111111)) {
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <UARTMode+0x7fc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a14      	ldr	r2, [pc, #80]	; (80022b8 <UARTMode+0x800>)
 8002268:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <UARTMode+0x818>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4259      	negs	r1, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	b2c9      	uxtb	r1, r1
 8002276:	bf58      	it	pl
 8002278:	424b      	negpl	r3, r1
 800227a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800227e:	429a      	cmp	r2, r3
 8002280:	d128      	bne.n	80022d4 <UARTMode+0x81c>
			//set goal n station
			uint8_t ack[] = { 0x58, 0x75 };
 8002282:	f247 5358 	movw	r3, #30040	; 0x7558
 8002286:	82bb      	strh	r3, [r7, #20]
			HAL_Delay(100);
 8002288:	2064      	movs	r0, #100	; 0x64
 800228a:	f001 fd39 	bl	8003d00 <HAL_Delay>
			HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 800228e:	f107 0114 	add.w	r1, r7, #20
 8002292:	230a      	movs	r3, #10
 8002294:	2202      	movs	r2, #2
 8002296:	480a      	ldr	r0, [pc, #40]	; (80022c0 <UARTMode+0x808>)
 8002298:	f007 f8a7 	bl	80093ea <HAL_UART_Transmit>
			mode = 0;
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <UARTMode+0x804>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 80022a2:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <UARTMode+0x7f8>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
			frame3check = 0;
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <UARTMode+0x818>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
				&& buffer[pointer] == ((frame3check % 256) ^ 0b11111111)) {
 80022ae:	e274      	b.n	800279a <UARTMode+0xce2>
 80022b0:	200001f8 	.word	0x200001f8
 80022b4:	200001f4 	.word	0x200001f4
 80022b8:	20000174 	.word	0x20000174
 80022bc:	200001fc 	.word	0x200001fc
 80022c0:	20000494 	.word	0x20000494
 80022c4:	2000020c 	.word	0x2000020c
 80022c8:	2000014c 	.word	0x2000014c
 80022cc:	20000204 	.word	0x20000204
 80022d0:	20000208 	.word	0x20000208
		} else if (bytecount == 2 + stationnumber
 80022d4:	4b92      	ldr	r3, [pc, #584]	; (8002520 <UARTMode+0xa68>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	1c9a      	adds	r2, r3, #2
 80022da:	4b92      	ldr	r3, [pc, #584]	; (8002524 <UARTMode+0xa6c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	f040 825b 	bne.w	800279a <UARTMode+0xce2>
				&& buffer[pointer] != ((frame3check % 256) ^ 0b11111111)) {
 80022e4:	4b90      	ldr	r3, [pc, #576]	; (8002528 <UARTMode+0xa70>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a90      	ldr	r2, [pc, #576]	; (800252c <UARTMode+0xa74>)
 80022ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022ee:	4b90      	ldr	r3, [pc, #576]	; (8002530 <UARTMode+0xa78>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4259      	negs	r1, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	b2c9      	uxtb	r1, r1
 80022f8:	bf58      	it	pl
 80022fa:	424b      	negpl	r3, r1
 80022fc:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8002300:	429a      	cmp	r2, r3
 8002302:	f000 824a 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 8002306:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <UARTMode+0xa7c>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 800230c:	4b85      	ldr	r3, [pc, #532]	; (8002524 <UARTMode+0xa6c>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
			frame3check = 0;
 8002312:	4b87      	ldr	r3, [pc, #540]	; (8002530 <UARTMode+0xa78>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e23f      	b.n	800279a <UARTMode+0xce2>
		}
	} else if (mode == 8) {
 800231a:	4b86      	ldr	r3, [pc, #536]	; (8002534 <UARTMode+0xa7c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b08      	cmp	r3, #8
 8002320:	d145      	bne.n	80023ae <UARTMode+0x8f6>
		if (bytecount == 1
 8002322:	4b80      	ldr	r3, [pc, #512]	; (8002524 <UARTMode+0xa6c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d125      	bne.n	8002376 <UARTMode+0x8be>
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 800232a:	4b7f      	ldr	r3, [pc, #508]	; (8002528 <UARTMode+0xa70>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7f      	ldr	r2, [pc, #508]	; (800252c <UARTMode+0xa74>)
 8002330:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002334:	4b7c      	ldr	r3, [pc, #496]	; (8002528 <UARTMode+0xa70>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3b01      	subs	r3, #1
 800233a:	497c      	ldr	r1, [pc, #496]	; (800252c <UARTMode+0xa74>)
 800233c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002340:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8002344:	429a      	cmp	r2, r3
 8002346:	d116      	bne.n	8002376 <UARTMode+0x8be>
			activate = 1;
 8002348:	4b7b      	ldr	r3, [pc, #492]	; (8002538 <UARTMode+0xa80>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]
			uint8_t ack[] = { 0x58, 0x75 };
 800234e:	f247 5358 	movw	r3, #30040	; 0x7558
 8002352:	823b      	strh	r3, [r7, #16]
			HAL_Delay(100);
 8002354:	2064      	movs	r0, #100	; 0x64
 8002356:	f001 fcd3 	bl	8003d00 <HAL_Delay>
			HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 800235a:	f107 0110 	add.w	r1, r7, #16
 800235e:	230a      	movs	r3, #10
 8002360:	2202      	movs	r2, #2
 8002362:	4876      	ldr	r0, [pc, #472]	; (800253c <UARTMode+0xa84>)
 8002364:	f007 f841 	bl	80093ea <HAL_UART_Transmit>
			mode = 0;
 8002368:	4b72      	ldr	r3, [pc, #456]	; (8002534 <UARTMode+0xa7c>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 800236e:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <UARTMode+0xa6c>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 8002374:	e211      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 1
 8002376:	4b6b      	ldr	r3, [pc, #428]	; (8002524 <UARTMode+0xa6c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	f040 820d 	bne.w	800279a <UARTMode+0xce2>
				&& (buffer[pointer] != (buffer[pointer - 1] ^ 0b11111111))) {
 8002380:	4b69      	ldr	r3, [pc, #420]	; (8002528 <UARTMode+0xa70>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a69      	ldr	r2, [pc, #420]	; (800252c <UARTMode+0xa74>)
 8002386:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800238a:	4b67      	ldr	r3, [pc, #412]	; (8002528 <UARTMode+0xa70>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3b01      	subs	r3, #1
 8002390:	4966      	ldr	r1, [pc, #408]	; (800252c <UARTMode+0xa74>)
 8002392:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002396:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800239a:	429a      	cmp	r2, r3
 800239c:	f000 81fd 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 80023a0:	4b64      	ldr	r3, [pc, #400]	; (8002534 <UARTMode+0xa7c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 80023a6:	4b5f      	ldr	r3, [pc, #380]	; (8002524 <UARTMode+0xa6c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e1f5      	b.n	800279a <UARTMode+0xce2>
		}
	} else if (mode == 9) {
 80023ae:	4b61      	ldr	r3, [pc, #388]	; (8002534 <UARTMode+0xa7c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b09      	cmp	r3, #9
 80023b4:	d163      	bne.n	800247e <UARTMode+0x9c6>
		if (bytecount == 1
 80023b6:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <UARTMode+0xa6c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d143      	bne.n	8002446 <UARTMode+0x98e>
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 80023be:	4b5a      	ldr	r3, [pc, #360]	; (8002528 <UARTMode+0xa70>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a5a      	ldr	r2, [pc, #360]	; (800252c <UARTMode+0xa74>)
 80023c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023c8:	4b57      	ldr	r3, [pc, #348]	; (8002528 <UARTMode+0xa70>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	4957      	ldr	r1, [pc, #348]	; (800252c <UARTMode+0xa74>)
 80023d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023d4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80023d8:	429a      	cmp	r2, r3
 80023da:	d134      	bne.n	8002446 <UARTMode+0x98e>
			for (int i = 0; i < 10; ++i) {
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e0:	e027      	b.n	8002432 <UARTMode+0x97a>
				if (position - station[i] <= 0.01) {
 80023e2:	4b57      	ldr	r3, [pc, #348]	; (8002540 <UARTMode+0xa88>)
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	4a56      	ldr	r2, [pc, #344]	; (8002544 <UARTMode+0xa8c>)
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023fc:	ee17 0a90 	vmov	r0, s15
 8002400:	f7fe f8a2 	bl	8000548 <__aeabi_f2d>
 8002404:	a344      	add	r3, pc, #272	; (adr r3, 8002518 <UARTMode+0xa60>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	f7fe fb71 	bl	8000af0 <__aeabi_dcmple>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <UARTMode+0x974>
					sprintf(temp, 'Station %d', i);
 8002414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002416:	494c      	ldr	r1, [pc, #304]	; (8002548 <UARTMode+0xa90>)
 8002418:	484c      	ldr	r0, [pc, #304]	; (800254c <UARTMode+0xa94>)
 800241a:	f007 fe33 	bl	800a084 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp),
 800241e:	2300      	movs	r3, #0
 8002420:	b29a      	uxth	r2, r3
 8002422:	230a      	movs	r3, #10
 8002424:	4949      	ldr	r1, [pc, #292]	; (800254c <UARTMode+0xa94>)
 8002426:	4845      	ldr	r0, [pc, #276]	; (800253c <UARTMode+0xa84>)
 8002428:	f006 ffdf 	bl	80093ea <HAL_UART_Transmit>
			for (int i = 0; i < 10; ++i) {
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	3301      	adds	r3, #1
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	2b09      	cmp	r3, #9
 8002436:	ddd4      	ble.n	80023e2 <UARTMode+0x92a>
							10);
				}
			}
			mode = 0;
 8002438:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <UARTMode+0xa7c>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 800243e:	4b39      	ldr	r3, [pc, #228]	; (8002524 <UARTMode+0xa6c>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e1a9      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 1
 8002446:	4b37      	ldr	r3, [pc, #220]	; (8002524 <UARTMode+0xa6c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b01      	cmp	r3, #1
 800244c:	f040 81a5 	bne.w	800279a <UARTMode+0xce2>
				&& (buffer[pointer] != (buffer[pointer - 1] ^ 0b11111111))) {
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <UARTMode+0xa70>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a35      	ldr	r2, [pc, #212]	; (800252c <UARTMode+0xa74>)
 8002456:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800245a:	4b33      	ldr	r3, [pc, #204]	; (8002528 <UARTMode+0xa70>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3b01      	subs	r3, #1
 8002460:	4932      	ldr	r1, [pc, #200]	; (800252c <UARTMode+0xa74>)
 8002462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002466:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800246a:	429a      	cmp	r2, r3
 800246c:	f000 8195 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <UARTMode+0xa7c>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8002476:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <UARTMode+0xa6c>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e18d      	b.n	800279a <UARTMode+0xce2>
		}
	} else if (mode == 10) {
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <UARTMode+0xa7c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b0a      	cmp	r3, #10
 8002484:	d166      	bne.n	8002554 <UARTMode+0xa9c>
		if (bytecount == 1
 8002486:	4b27      	ldr	r3, [pc, #156]	; (8002524 <UARTMode+0xa6c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d127      	bne.n	80024de <UARTMode+0xa26>
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <UARTMode+0xa70>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a26      	ldr	r2, [pc, #152]	; (800252c <UARTMode+0xa74>)
 8002494:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002498:	4b23      	ldr	r3, [pc, #140]	; (8002528 <UARTMode+0xa70>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	3b01      	subs	r3, #1
 800249e:	4923      	ldr	r1, [pc, #140]	; (800252c <UARTMode+0xa74>)
 80024a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024a4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d118      	bne.n	80024de <UARTMode+0xa26>
			//request position
			sprintf(temp, '%d degree', position);
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <UARTMode+0xa88>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fe f849 	bl	8000548 <__aeabi_f2d>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4925      	ldr	r1, [pc, #148]	; (8002550 <UARTMode+0xa98>)
 80024bc:	4823      	ldr	r0, [pc, #140]	; (800254c <UARTMode+0xa94>)
 80024be:	f007 fde1 	bl	800a084 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 10);
 80024c2:	2300      	movs	r3, #0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	230a      	movs	r3, #10
 80024c8:	4920      	ldr	r1, [pc, #128]	; (800254c <UARTMode+0xa94>)
 80024ca:	481c      	ldr	r0, [pc, #112]	; (800253c <UARTMode+0xa84>)
 80024cc:	f006 ff8d 	bl	80093ea <HAL_UART_Transmit>
			mode = 0;
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <UARTMode+0xa7c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 80024d6:	4b13      	ldr	r3, [pc, #76]	; (8002524 <UARTMode+0xa6c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e15d      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 1
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <UARTMode+0xa6c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	f040 8159 	bne.w	800279a <UARTMode+0xce2>
				&& (buffer[pointer] != (buffer[pointer - 1] ^ 0b11111111))) {
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <UARTMode+0xa70>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0f      	ldr	r2, [pc, #60]	; (800252c <UARTMode+0xa74>)
 80024ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <UARTMode+0xa70>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <UARTMode+0xa74>)
 80024fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024fe:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8002502:	429a      	cmp	r2, r3
 8002504:	f000 8149 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <UARTMode+0xa7c>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <UARTMode+0xa6c>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e141      	b.n	800279a <UARTMode+0xce2>
 8002516:	bf00      	nop
 8002518:	47ae147b 	.word	0x47ae147b
 800251c:	3f847ae1 	.word	0x3f847ae1
 8002520:	20000204 	.word	0x20000204
 8002524:	200001f8 	.word	0x200001f8
 8002528:	200001f4 	.word	0x200001f4
 800252c:	20000174 	.word	0x20000174
 8002530:	20000208 	.word	0x20000208
 8002534:	200001fc 	.word	0x200001fc
 8002538:	20000168 	.word	0x20000168
 800253c:	20000494 	.word	0x20000494
 8002540:	20000134 	.word	0x20000134
 8002544:	2000020c 	.word	0x2000020c
 8002548:	6e202564 	.word	0x6e202564
 800254c:	20000304 	.word	0x20000304
 8002550:	67726565 	.word	0x67726565
		}
	} else if (mode == 11) {
 8002554:	4b99      	ldr	r3, [pc, #612]	; (80027bc <UARTMode+0xd04>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b0b      	cmp	r3, #11
 800255a:	d147      	bne.n	80025ec <UARTMode+0xb34>
		if (bytecount == 1
 800255c:	4b98      	ldr	r3, [pc, #608]	; (80027c0 <UARTMode+0xd08>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d127      	bne.n	80025b4 <UARTMode+0xafc>
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 8002564:	4b97      	ldr	r3, [pc, #604]	; (80027c4 <UARTMode+0xd0c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a97      	ldr	r2, [pc, #604]	; (80027c8 <UARTMode+0xd10>)
 800256a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800256e:	4b95      	ldr	r3, [pc, #596]	; (80027c4 <UARTMode+0xd0c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3b01      	subs	r3, #1
 8002574:	4994      	ldr	r1, [pc, #592]	; (80027c8 <UARTMode+0xd10>)
 8002576:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800257a:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800257e:	429a      	cmp	r2, r3
 8002580:	d118      	bne.n	80025b4 <UARTMode+0xafc>
			//request Max velocity
			sprintf(temp, '%d rad/s', vmax);
 8002582:	4b92      	ldr	r3, [pc, #584]	; (80027cc <UARTMode+0xd14>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ffde 	bl	8000548 <__aeabi_f2d>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	498f      	ldr	r1, [pc, #572]	; (80027d0 <UARTMode+0xd18>)
 8002592:	4890      	ldr	r0, [pc, #576]	; (80027d4 <UARTMode+0xd1c>)
 8002594:	f007 fd76 	bl	800a084 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 10);
 8002598:	2300      	movs	r3, #0
 800259a:	b29a      	uxth	r2, r3
 800259c:	230a      	movs	r3, #10
 800259e:	498d      	ldr	r1, [pc, #564]	; (80027d4 <UARTMode+0xd1c>)
 80025a0:	488d      	ldr	r0, [pc, #564]	; (80027d8 <UARTMode+0xd20>)
 80025a2:	f006 ff22 	bl	80093ea <HAL_UART_Transmit>
			mode = 0;
 80025a6:	4b85      	ldr	r3, [pc, #532]	; (80027bc <UARTMode+0xd04>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 80025ac:	4b84      	ldr	r3, [pc, #528]	; (80027c0 <UARTMode+0xd08>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e0f2      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 1
 80025b4:	4b82      	ldr	r3, [pc, #520]	; (80027c0 <UARTMode+0xd08>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f040 80ee 	bne.w	800279a <UARTMode+0xce2>
				&& (buffer[pointer] != (buffer[pointer - 1] ^ 0b11111111))) {
 80025be:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <UARTMode+0xd0c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a81      	ldr	r2, [pc, #516]	; (80027c8 <UARTMode+0xd10>)
 80025c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025c8:	4b7e      	ldr	r3, [pc, #504]	; (80027c4 <UARTMode+0xd0c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	497e      	ldr	r1, [pc, #504]	; (80027c8 <UARTMode+0xd10>)
 80025d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025d4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80025d8:	429a      	cmp	r2, r3
 80025da:	f000 80de 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 80025de:	4b77      	ldr	r3, [pc, #476]	; (80027bc <UARTMode+0xd04>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 80025e4:	4b76      	ldr	r3, [pc, #472]	; (80027c0 <UARTMode+0xd08>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e0d6      	b.n	800279a <UARTMode+0xce2>
		}
	} else if (mode == 12) {
 80025ec:	4b73      	ldr	r3, [pc, #460]	; (80027bc <UARTMode+0xd04>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b0c      	cmp	r3, #12
 80025f2:	d145      	bne.n	8002680 <UARTMode+0xbc8>
		if (bytecount == 1
 80025f4:	4b72      	ldr	r3, [pc, #456]	; (80027c0 <UARTMode+0xd08>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d125      	bne.n	8002648 <UARTMode+0xb90>
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 80025fc:	4b71      	ldr	r3, [pc, #452]	; (80027c4 <UARTMode+0xd0c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a71      	ldr	r2, [pc, #452]	; (80027c8 <UARTMode+0xd10>)
 8002602:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002606:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <UARTMode+0xd0c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3b01      	subs	r3, #1
 800260c:	496e      	ldr	r1, [pc, #440]	; (80027c8 <UARTMode+0xd10>)
 800260e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002612:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8002616:	429a      	cmp	r2, r3
 8002618:	d116      	bne.n	8002648 <UARTMode+0xb90>
			//enable gripper
			uint8_t ack[] = { 0x58, 0x75 };
 800261a:	f247 5358 	movw	r3, #30040	; 0x7558
 800261e:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(100);
 8002620:	2064      	movs	r0, #100	; 0x64
 8002622:	f001 fb6d 	bl	8003d00 <HAL_Delay>
			HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 8002626:	f107 010c 	add.w	r1, r7, #12
 800262a:	230a      	movs	r3, #10
 800262c:	2202      	movs	r2, #2
 800262e:	486a      	ldr	r0, [pc, #424]	; (80027d8 <UARTMode+0xd20>)
 8002630:	f006 fedb 	bl	80093ea <HAL_UART_Transmit>
			laserflag = 1;
 8002634:	4b69      	ldr	r3, [pc, #420]	; (80027dc <UARTMode+0xd24>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]
			mode = 0;
 800263a:	4b60      	ldr	r3, [pc, #384]	; (80027bc <UARTMode+0xd04>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8002640:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <UARTMode+0xd08>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 8002646:	e0a8      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 1
 8002648:	4b5d      	ldr	r3, [pc, #372]	; (80027c0 <UARTMode+0xd08>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	f040 80a4 	bne.w	800279a <UARTMode+0xce2>
				&& (buffer[pointer] != (buffer[pointer - 1] ^ 0b11111111))) {
 8002652:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <UARTMode+0xd0c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a5c      	ldr	r2, [pc, #368]	; (80027c8 <UARTMode+0xd10>)
 8002658:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <UARTMode+0xd0c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3b01      	subs	r3, #1
 8002662:	4959      	ldr	r1, [pc, #356]	; (80027c8 <UARTMode+0xd10>)
 8002664:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002668:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800266c:	429a      	cmp	r2, r3
 800266e:	f000 8094 	beq.w	800279a <UARTMode+0xce2>
			mode = 0;
 8002672:	4b52      	ldr	r3, [pc, #328]	; (80027bc <UARTMode+0xd04>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8002678:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <UARTMode+0xd08>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	e08c      	b.n	800279a <UARTMode+0xce2>
		}
	} else if (mode == 13) {
 8002680:	4b4e      	ldr	r3, [pc, #312]	; (80027bc <UARTMode+0xd04>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b0d      	cmp	r3, #13
 8002686:	d140      	bne.n	800270a <UARTMode+0xc52>
		if (bytecount == 1
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <UARTMode+0xd08>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d122      	bne.n	80026d6 <UARTMode+0xc1e>
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 8002690:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <UARTMode+0xd0c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4c      	ldr	r2, [pc, #304]	; (80027c8 <UARTMode+0xd10>)
 8002696:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800269a:	4b4a      	ldr	r3, [pc, #296]	; (80027c4 <UARTMode+0xd0c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3b01      	subs	r3, #1
 80026a0:	4949      	ldr	r1, [pc, #292]	; (80027c8 <UARTMode+0xd10>)
 80026a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026a6:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d113      	bne.n	80026d6 <UARTMode+0xc1e>
			//disable gripper
			uint8_t ack[] = { 0x58, 0x75 };
 80026ae:	f247 5358 	movw	r3, #30040	; 0x7558
 80026b2:	813b      	strh	r3, [r7, #8]
			HAL_Delay(100);
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	f001 fb23 	bl	8003d00 <HAL_Delay>
			HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 80026ba:	f107 0108 	add.w	r1, r7, #8
 80026be:	230a      	movs	r3, #10
 80026c0:	2202      	movs	r2, #2
 80026c2:	4845      	ldr	r0, [pc, #276]	; (80027d8 <UARTMode+0xd20>)
 80026c4:	f006 fe91 	bl	80093ea <HAL_UART_Transmit>
			mode = 0;
 80026c8:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <UARTMode+0xd04>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 80026ce:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <UARTMode+0xd08>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 80026d4:	e061      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 1
 80026d6:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <UARTMode+0xd08>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d15d      	bne.n	800279a <UARTMode+0xce2>
				&& (buffer[pointer] != (buffer[pointer - 1] ^ 0b11111111))) {
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <UARTMode+0xd0c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <UARTMode+0xd10>)
 80026e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026e8:	4b36      	ldr	r3, [pc, #216]	; (80027c4 <UARTMode+0xd0c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	4936      	ldr	r1, [pc, #216]	; (80027c8 <UARTMode+0xd10>)
 80026f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026f4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d04e      	beq.n	800279a <UARTMode+0xce2>
			mode = 0;
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <UARTMode+0xd04>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8002702:	4b2f      	ldr	r3, [pc, #188]	; (80027c0 <UARTMode+0xd08>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	e047      	b.n	800279a <UARTMode+0xce2>
		}
	} else if (mode == 14) {
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <UARTMode+0xd04>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b0e      	cmp	r3, #14
 8002710:	d143      	bne.n	800279a <UARTMode+0xce2>
		if (bytecount == 1
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <UARTMode+0xd08>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d124      	bne.n	8002764 <UARTMode+0xcac>
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 800271a:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <UARTMode+0xd0c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <UARTMode+0xd10>)
 8002720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002724:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <UARTMode+0xd0c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3b01      	subs	r3, #1
 800272a:	4927      	ldr	r1, [pc, #156]	; (80027c8 <UARTMode+0xd10>)
 800272c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002730:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8002734:	429a      	cmp	r2, r3
 8002736:	d115      	bne.n	8002764 <UARTMode+0xcac>
			uint8_t ack[] = { 0x58, 0x75 };
 8002738:	f247 5358 	movw	r3, #30040	; 0x7558
 800273c:	80bb      	strh	r3, [r7, #4]
			HAL_Delay(100);
 800273e:	2064      	movs	r0, #100	; 0x64
 8002740:	f001 fade 	bl	8003d00 <HAL_Delay>
			HAL_UART_Transmit(&huart2, (uint8_t*) ack, 2, 10);
 8002744:	1d39      	adds	r1, r7, #4
 8002746:	230a      	movs	r3, #10
 8002748:	2202      	movs	r2, #2
 800274a:	4823      	ldr	r0, [pc, #140]	; (80027d8 <UARTMode+0xd20>)
 800274c:	f006 fe4d 	bl	80093ea <HAL_UART_Transmit>
			zerostate = 1;
 8002750:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <UARTMode+0xd28>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]
			mode = 0;
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <UARTMode+0xd04>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <UARTMode+0xd08>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
				&& (buffer[pointer] == (buffer[pointer - 1] ^ 0b11111111))) {
 8002762:	e01a      	b.n	800279a <UARTMode+0xce2>
		} else if (bytecount == 1
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <UARTMode+0xd08>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d116      	bne.n	800279a <UARTMode+0xce2>
				&& (buffer[pointer] != (buffer[pointer - 1] ^ 0b11111111))) {
 800276c:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <UARTMode+0xd0c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <UARTMode+0xd10>)
 8002772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002776:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <UARTMode+0xd0c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3b01      	subs	r3, #1
 800277c:	4912      	ldr	r1, [pc, #72]	; (80027c8 <UARTMode+0xd10>)
 800277e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002782:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8002786:	429a      	cmp	r2, r3
 8002788:	d007      	beq.n	800279a <UARTMode+0xce2>
			mode = 0;
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <UARTMode+0xd04>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
			bytecount = 0;
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <UARTMode+0xd08>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e000      	b.n	800279a <UARTMode+0xce2>
			break;
 8002798:	bf00      	nop
		}
	}
	pointer += 1;
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <UARTMode+0xd0c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <UARTMode+0xd0c>)
 80027a2:	6013      	str	r3, [r2, #0]
	if (pointer > 32)
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <UARTMode+0xd0c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	dd02      	ble.n	80027b2 <UARTMode+0xcfa>
		pointer = 0;
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <UARTMode+0xd0c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	3730      	adds	r7, #48	; 0x30
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200001fc 	.word	0x200001fc
 80027c0:	200001f8 	.word	0x200001f8
 80027c4:	200001f4 	.word	0x200001f4
 80027c8:	20000174 	.word	0x20000174
 80027cc:	20000010 	.word	0x20000010
 80027d0:	61642f73 	.word	0x61642f73
 80027d4:	20000304 	.word	0x20000304
 80027d8:	20000494 	.word	0x20000494
 80027dc:	20000238 	.word	0x20000238
 80027e0:	20000128 	.word	0x20000128

080027e4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_11) {
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f4:	d136      	bne.n	8002864 <HAL_GPIO_EXTI_Callback+0x80>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0) {
 80027f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027fa:	481c      	ldr	r0, [pc, #112]	; (800286c <HAL_GPIO_EXTI_Callback+0x88>)
 80027fc:	f002 fea0 	bl	8005540 <HAL_GPIO_ReadPin>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d113      	bne.n	800282e <HAL_GPIO_EXTI_Callback+0x4a>
			emergency = 1;
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002812:	4816      	ldr	r0, [pc, #88]	; (800286c <HAL_GPIO_EXTI_Callback+0x88>)
 8002814:	f002 feac 	bl	8005570 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800281e:	4813      	ldr	r0, [pc, #76]	; (800286c <HAL_GPIO_EXTI_Callback+0x88>)
 8002820:	f002 fea6 	bl	8005570 <HAL_GPIO_WritePin>
			pwm = 9000;
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <HAL_GPIO_EXTI_Callback+0x90>)
 8002826:	f242 3228 	movw	r2, #9000	; 0x2328
 800282a:	601a      	str	r2, [r3, #0]
			sumpid = 0;
			zerostate = 0;
		}

	}
}
 800282c:	e01a      	b.n	8002864 <HAL_GPIO_EXTI_Callback+0x80>
			require = 0;
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_GPIO_EXTI_Callback+0x94>)
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
			ttrajec = rotationtime + 1;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <HAL_GPIO_EXTI_Callback+0x98>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002846:	edc3 7a00 	vstr	s15, [r3]
			pwm = 0;
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <HAL_GPIO_EXTI_Callback+0x90>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
			emergency = 0;
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
			sumpid = 0;
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
			zerostate = 0;
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40020000 	.word	0x40020000
 8002870:	20000170 	.word	0x20000170
 8002874:	2000016c 	.word	0x2000016c
 8002878:	200000e4 	.word	0x200000e4
 800287c:	20000150 	.word	0x20000150
 8002880:	2000015c 	.word	0x2000015c
 8002884:	20000144 	.word	0x20000144
 8002888:	20000128 	.word	0x20000128

0800288c <UARTRecieveIT>:
int16_t UARTRecieveIT() {
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
	static uint32_t dataPos = 0;
	int16_t data = -1;
 8002892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002896:	80fb      	strh	r3, [r7, #6]
	if (huart2.RxXferSize - huart2.RxXferCount != dataPos) {
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <UARTRecieveIT+0x54>)
 800289a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800289c:	461a      	mov	r2, r3
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <UARTRecieveIT+0x54>)
 80028a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	4a0f      	ldr	r2, [pc, #60]	; (80028e4 <UARTRecieveIT+0x58>)
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d010      	beq.n	80028d0 <UARTRecieveIT+0x44>
		data = RxDataBuffer[dataPos];
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <UARTRecieveIT+0x58>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <UARTRecieveIT+0x5c>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	80fb      	strh	r3, [r7, #6]
		dataPos = (dataPos + 1) % huart2.RxXferSize;
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <UARTRecieveIT+0x58>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3301      	adds	r3, #1
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <UARTRecieveIT+0x54>)
 80028c0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80028c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80028c6:	fb02 f201 	mul.w	r2, r2, r1
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <UARTRecieveIT+0x58>)
 80028ce:	6013      	str	r3, [r2, #0]
	}
	return data;
 80028d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	20000494 	.word	0x20000494
 80028e4:	20000240 	.word	0x20000240
 80028e8:	20000108 	.word	0x20000108

080028ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%d%d%d%d]\r\n", RxDataBuffer[0],
 80028f4:	4b4c      	ldr	r3, [pc, #304]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
			RxDataBuffer[1], RxDataBuffer[2], RxDataBuffer[3]);
 80028fa:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 80028fc:	785b      	ldrb	r3, [r3, #1]
	sprintf(TxDataBuffer, "Received:[%d%d%d%d]\r\n", RxDataBuffer[0],
 80028fe:	4618      	mov	r0, r3
			RxDataBuffer[1], RxDataBuffer[2], RxDataBuffer[3]);
 8002900:	4b49      	ldr	r3, [pc, #292]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 8002902:	789b      	ldrb	r3, [r3, #2]
	sprintf(TxDataBuffer, "Received:[%d%d%d%d]\r\n", RxDataBuffer[0],
 8002904:	461a      	mov	r2, r3
			RxDataBuffer[1], RxDataBuffer[2], RxDataBuffer[3]);
 8002906:	4b48      	ldr	r3, [pc, #288]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 8002908:	78db      	ldrb	r3, [r3, #3]
	sprintf(TxDataBuffer, "Received:[%d%d%d%d]\r\n", RxDataBuffer[0],
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	9200      	str	r2, [sp, #0]
 800290e:	4603      	mov	r3, r0
 8002910:	460a      	mov	r2, r1
 8002912:	4946      	ldr	r1, [pc, #280]	; (8002a2c <HAL_UART_RxCpltCallback+0x140>)
 8002914:	4846      	ldr	r0, [pc, #280]	; (8002a30 <HAL_UART_RxCpltCallback+0x144>)
 8002916:	f007 fbb5 	bl	800a084 <siprintf>
	a0 = RxDataBuffer[0];
 800291a:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	4b44      	ldr	r3, [pc, #272]	; (8002a34 <HAL_UART_RxCpltCallback+0x148>)
 8002922:	601a      	str	r2, [r3, #0]
	a1 = RxDataBuffer[1];
 8002924:	4b40      	ldr	r3, [pc, #256]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 8002926:	785b      	ldrb	r3, [r3, #1]
 8002928:	461a      	mov	r2, r3
 800292a:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_UART_RxCpltCallback+0x14c>)
 800292c:	601a      	str	r2, [r3, #0]
	a2 = RxDataBuffer[2];
 800292e:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 8002930:	789b      	ldrb	r3, [r3, #2]
 8002932:	461a      	mov	r2, r3
 8002934:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <HAL_UART_RxCpltCallback+0x150>)
 8002936:	601a      	str	r2, [r3, #0]
	a3 = RxDataBuffer[3];
 8002938:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 800293a:	78db      	ldrb	r3, [r3, #3]
 800293c:	461a      	mov	r2, r3
 800293e:	4b40      	ldr	r3, [pc, #256]	; (8002a40 <HAL_UART_RxCpltCallback+0x154>)
 8002940:	601a      	str	r2, [r3, #0]
	if (a0 == 115 && a1 == 116 && a2 == 111 && a3 == 112) { //stop
 8002942:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <HAL_UART_RxCpltCallback+0x148>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b73      	cmp	r3, #115	; 0x73
 8002948:	d110      	bne.n	800296c <HAL_UART_RxCpltCallback+0x80>
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_UART_RxCpltCallback+0x14c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b74      	cmp	r3, #116	; 0x74
 8002950:	d10c      	bne.n	800296c <HAL_UART_RxCpltCallback+0x80>
 8002952:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <HAL_UART_RxCpltCallback+0x150>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b6f      	cmp	r3, #111	; 0x6f
 8002958:	d108      	bne.n	800296c <HAL_UART_RxCpltCallback+0x80>
 800295a:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_UART_RxCpltCallback+0x154>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b70      	cmp	r3, #112	; 0x70
 8002960:	d104      	bne.n	800296c <HAL_UART_RxCpltCallback+0x80>
		require = 0;
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_UART_RxCpltCallback+0x158>)
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e059      	b.n	8002a20 <HAL_UART_RxCpltCallback+0x134>
	} else if (a0 == 115 && a1 == 101 && a2 == 116 && a3 == 48) { //set0
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_UART_RxCpltCallback+0x148>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b73      	cmp	r3, #115	; 0x73
 8002972:	d116      	bne.n	80029a2 <HAL_UART_RxCpltCallback+0xb6>
 8002974:	4b30      	ldr	r3, [pc, #192]	; (8002a38 <HAL_UART_RxCpltCallback+0x14c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b65      	cmp	r3, #101	; 0x65
 800297a:	d112      	bne.n	80029a2 <HAL_UART_RxCpltCallback+0xb6>
 800297c:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <HAL_UART_RxCpltCallback+0x150>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b74      	cmp	r3, #116	; 0x74
 8002982:	d10e      	bne.n	80029a2 <HAL_UART_RxCpltCallback+0xb6>
 8002984:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_UART_RxCpltCallback+0x154>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b30      	cmp	r3, #48	; 0x30
 800298a:	d10a      	bne.n	80029a2 <HAL_UART_RxCpltCallback+0xb6>
		require = 3;
 800298c:	4b2d      	ldr	r3, [pc, #180]	; (8002a44 <HAL_UART_RxCpltCallback+0x158>)
 800298e:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <HAL_UART_RxCpltCallback+0x15c>)
 8002990:	601a      	str	r2, [r3, #0]
		pwm = 1000;
 8002992:	4b2e      	ldr	r3, [pc, #184]	; (8002a4c <HAL_UART_RxCpltCallback+0x160>)
 8002994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002998:	601a      	str	r2, [r3, #0]
		zerostate = 1;
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <HAL_UART_RxCpltCallback+0x164>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e03e      	b.n	8002a20 <HAL_UART_RxCpltCallback+0x134>
	} else if (a0 == 43) { //+
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <HAL_UART_RxCpltCallback+0x148>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b2b      	cmp	r3, #43	; 0x2b
 80029a8:	d11a      	bne.n	80029e0 <HAL_UART_RxCpltCallback+0xf4>
		require = ((RxDataBuffer[1] - 48) * 100) + ((RxDataBuffer[2] - 48) * 10)
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	3b30      	subs	r3, #48	; 0x30
 80029b0:	2264      	movs	r2, #100	; 0x64
 80029b2:	fb02 f103 	mul.w	r1, r2, r3
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 80029b8:	789b      	ldrb	r3, [r3, #2]
 80029ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	18ca      	adds	r2, r1, r3
				+ ((RxDataBuffer[3] - 48) * 1);
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 80029ca:	78db      	ldrb	r3, [r3, #3]
 80029cc:	3b30      	subs	r3, #48	; 0x30
 80029ce:	4413      	add	r3, r2
		require = ((RxDataBuffer[1] - 48) * 100) + ((RxDataBuffer[2] - 48) * 10)
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_UART_RxCpltCallback+0x158>)
 80029da:	edc3 7a00 	vstr	s15, [r3]
						+ ((RxDataBuffer[2] - 48) * 10)
						+ ((RxDataBuffer[3] - 48) * 1));
	}
//	HAL_UART_Transmit(&huart2, (uint8_t*) TxDataBuffer, strlen(TxDataBuffer),
//			1000);
}
 80029de:	e01f      	b.n	8002a20 <HAL_UART_RxCpltCallback+0x134>
	} else if (a0 == 45) { //-
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_UART_RxCpltCallback+0x148>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b2d      	cmp	r3, #45	; 0x2d
 80029e6:	d11b      	bne.n	8002a20 <HAL_UART_RxCpltCallback+0x134>
				* (((RxDataBuffer[1] - 48) * 100)
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 80029ea:	785b      	ldrb	r3, [r3, #1]
 80029ec:	3b30      	subs	r3, #48	; 0x30
 80029ee:	2264      	movs	r2, #100	; 0x64
 80029f0:	fb02 f103 	mul.w	r1, r2, r3
						+ ((RxDataBuffer[2] - 48) * 10)
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 80029f6:	789b      	ldrb	r3, [r3, #2]
 80029f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	18ca      	adds	r2, r1, r3
						+ ((RxDataBuffer[3] - 48) * 1));
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_UART_RxCpltCallback+0x13c>)
 8002a08:	78db      	ldrb	r3, [r3, #3]
 8002a0a:	3b30      	subs	r3, #48	; 0x30
 8002a0c:	4413      	add	r3, r2
				* (((RxDataBuffer[1] - 48) * 100)
 8002a0e:	425b      	negs	r3, r3
		require = -1
 8002a10:	ee07 3a90 	vmov	s15, r3
 8002a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a18:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_UART_RxCpltCallback+0x158>)
 8002a1a:	edc3 7a00 	vstr	s15, [r3]
}
 8002a1e:	e7ff      	b.n	8002a20 <HAL_UART_RxCpltCallback+0x134>
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000108 	.word	0x20000108
 8002a2c:	0800ab00 	.word	0x0800ab00
 8002a30:	200000e8 	.word	0x200000e8
 8002a34:	200004e0 	.word	0x200004e0
 8002a38:	20000300 	.word	0x20000300
 8002a3c:	20000448 	.word	0x20000448
 8002a40:	20000350 	.word	0x20000350
 8002a44:	200000e4 	.word	0x200000e4
 8002a48:	40400000 	.word	0x40400000
 8002a4c:	2000016c 	.word	0x2000016c
 8002a50:	20000128 	.word	0x20000128

08002a54 <EncoderVelocity_Update>:

#define  HTIM_ENCODER htim5
#define  MAX_SUBPOSITION_OVERFLOW 262144
#define  MAX_ENCODER_PERIOD 524288

float EncoderVelocity_Update() {
 8002a54:	b5b0      	push	{r4, r5, r7, lr}
 8002a56:	ed2d 8b02 	vpush	{d8}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <EncoderVelocity_Update+0xb4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	60fb      	str	r3, [r7, #12]
	uint64_t EncoderNowTimestamp = micros();
 8002a66:	f000 fd9f 	bl	80035a8 <micros>
 8002a6a:	e9c7 0100 	strd	r0, r1, [r7]

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8002a6e:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <EncoderVelocity_Update+0xb8>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a78:	1a84      	subs	r4, r0, r2
 8002a7a:	eb61 0503 	sbc.w	r5, r1, r3
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <EncoderVelocity_Update+0xbc>)
 8002a80:	e9c3 4500 	strd	r4, r5, [r3]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8002a84:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <EncoderVelocity_Update+0xc0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <EncoderVelocity_Update+0xc4>)
 8002a90:	601a      	str	r2, [r3, #0]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW) {
 8002a92:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <EncoderVelocity_Update+0xc4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a9a:	db06      	blt.n	8002aaa <EncoderVelocity_Update+0x56>
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8002a9c:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <EncoderVelocity_Update+0xc4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <EncoderVelocity_Update+0xc4>)
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e00a      	b.n	8002ac0 <EncoderVelocity_Update+0x6c>
	} else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW) {
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <EncoderVelocity_Update+0xc4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f513 2f80 	cmn.w	r3, #262144	; 0x40000
 8002ab2:	dc05      	bgt.n	8002ac0 <EncoderVelocity_Update+0x6c>
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <EncoderVelocity_Update+0xc4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8002abc:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <EncoderVelocity_Update+0xc4>)
 8002abe:	6013      	str	r3, [r2, #0]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <EncoderVelocity_Update+0xc0>)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8002ac6:	4911      	ldr	r1, [pc, #68]	; (8002b0c <EncoderVelocity_Update+0xb8>)
 8002ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002acc:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <EncoderVelocity_Update+0xc4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <EncoderVelocity_Update+0xc8>)
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <EncoderVelocity_Update+0xbc>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7fe f94c 	bl	8000d88 <__aeabi_ul2f>
 8002af0:	ee07 0a10 	vmov	s14, r0
 8002af4:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 8002af8:	eeb0 0a67 	vmov.f32	s0, s15
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	ecbd 8b02 	vpop	{d8}
 8002b04:	bdb0      	pop	{r4, r5, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000308 	.word	0x20000308
 8002b0c:	20000248 	.word	0x20000248
 8002b10:	200004d8 	.word	0x200004d8
 8002b14:	20000250 	.word	0x20000250
 8002b18:	200003e4 	.word	0x200003e4
 8002b1c:	000f4240 	.word	0x000f4240

08002b20 <Laser>:
void Laser() {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af02      	add	r7, sp, #8
	if (laserflag == 1 && hi2c1.State == HAL_I2C_STATE_READY) {
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <Laser+0x38>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d111      	bne.n	8002b52 <Laser+0x32>
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <Laser+0x3c>)
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d10b      	bne.n	8002b52 <Laser+0x32>
		static uint8_t data[1] = { 0x45 };
		HAL_I2C_Master_Transmit(&hi2c1, END_ADDR << 1, data, 1, 1000);
 8002b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2301      	movs	r3, #1
 8002b42:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <Laser+0x40>)
 8002b44:	2146      	movs	r1, #70	; 0x46
 8002b46:	4805      	ldr	r0, [pc, #20]	; (8002b5c <Laser+0x3c>)
 8002b48:	f002 fe88 	bl	800585c <HAL_I2C_Master_Transmit>
		laserflag = 0;
 8002b4c:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <Laser+0x38>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
	}
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000238 	.word	0x20000238
 8002b5c:	200002a8 	.word	0x200002a8
 8002b60:	20000018 	.word	0x20000018
 8002b64:	00000000 	.word	0x00000000

08002b68 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4ac9      	ldr	r2, [pc, #804]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d109      	bne.n	8002b8e <HAL_TIM_PeriodElapsedCallback+0x26>
		_micros += 4294967295;
 8002b7a:	4bc9      	ldr	r3, [pc, #804]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f112 34ff 	adds.w	r4, r2, #4294967295
 8002b84:	f143 0500 	adc.w	r5, r3, #0
 8002b88:	4bc5      	ldr	r3, [pc, #788]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002b8a:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim4) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4ac4      	ldr	r2, [pc, #784]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f040 84d4 	bne.w	8003540 <HAL_TIM_PeriodElapsedCallback+0x9d8>
		if (emergency == 0) {
 8002b98:	4bc3      	ldr	r3, [pc, #780]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 84cf 	bne.w	8003540 <HAL_TIM_PeriodElapsedCallback+0x9d8>
			if (zerostate == 0) {
 8002ba2:	4bc2      	ldr	r3, [pc, #776]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 843e 	bne.w	8003428 <HAL_TIM_PeriodElapsedCallback+0x8c0>
				if (activate == 1) {
 8002bac:	4bc0      	ldr	r3, [pc, #768]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	f040 822d 	bne.w	8003010 <HAL_TIM_PeriodElapsedCallback+0x4a8>
					ttrajec = 0;
 8002bb6:	4bbf      	ldr	r3, [pc, #764]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
					if (ptg < (2 * pi / 360 * position)) {
 8002bbe:	4bbe      	ldr	r3, [pc, #760]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bc8:	eddf 6abc 	vldr	s13, [pc, #752]	; 8002ebc <HAL_TIM_PeriodElapsedCallback+0x354>
 8002bcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bd0:	4bbb      	ldr	r3, [pc, #748]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bda:	4bba      	ldr	r3, [pc, #744]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	dd66      	ble.n	8002cb8 <HAL_TIM_PeriodElapsedCallback+0x150>
						if (((2 * pi / 360 * position) - ptg)
 8002bea:	4bb3      	ldr	r3, [pc, #716]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002bec:	edd3 7a00 	vldr	s15, [r3]
 8002bf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bf4:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8002ebc <HAL_TIM_PeriodElapsedCallback+0x354>
 8002bf8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bfc:	4bb0      	ldr	r3, [pc, #704]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c06:	4baf      	ldr	r3, [pc, #700]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	ee37 7a67 	vsub.f32	s14, s14, s15
								<= (2 * pi - (2 * pi / 360 * position) + ptg)) {
 8002c10:	4ba9      	ldr	r3, [pc, #676]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c1a:	4ba7      	ldr	r3, [pc, #668]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c24:	eddf 5aa5 	vldr	s11, [pc, #660]	; 8002ebc <HAL_TIM_PeriodElapsedCallback+0x354>
 8002c28:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002c2c:	4ba4      	ldr	r3, [pc, #656]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c36:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c3a:	4ba2      	ldr	r3, [pc, #648]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002c3c:	edd3 7a00 	vldr	s15, [r3]
 8002c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
						if (((2 * pi / 360 * position) - ptg)
 8002c44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	d816      	bhi.n	8002c7c <HAL_TIM_PeriodElapsedCallback+0x114>
							distance = ptg - (2 * pi / 360 * position);
 8002c4e:	4b9d      	ldr	r3, [pc, #628]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002c50:	ed93 7a00 	vldr	s14, [r3]
 8002c54:	4b98      	ldr	r3, [pc, #608]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c5e:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8002ebc <HAL_TIM_PeriodElapsedCallback+0x354>
 8002c62:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002c66:	4b96      	ldr	r3, [pc, #600]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002c68:	edd3 7a00 	vldr	s15, [r3]
 8002c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c74:	4b94      	ldr	r3, [pc, #592]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002c76:	edc3 7a00 	vstr	s15, [r3]
 8002c7a:	e09b      	b.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x24c>
						} else {
							distance = 2 * pi - (2 * pi / 360 * position) + ptg;
 8002c7c:	4b8e      	ldr	r3, [pc, #568]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c86:	4b8c      	ldr	r3, [pc, #560]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c90:	ed9f 6a8a 	vldr	s12, [pc, #552]	; 8002ebc <HAL_TIM_PeriodElapsedCallback+0x354>
 8002c94:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002c98:	4b89      	ldr	r3, [pc, #548]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002c9a:	edd3 7a00 	vldr	s15, [r3]
 8002c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ca6:	4b87      	ldr	r3, [pc, #540]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb0:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002cb2:	edc3 7a00 	vstr	s15, [r3]
 8002cb6:	e07d      	b.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x24c>
						}
					} else if (ptg >= (2 * pi / 360 * position)) {
 8002cb8:	4b7f      	ldr	r3, [pc, #508]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002cba:	edd3 7a00 	vldr	s15, [r3]
 8002cbe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cc2:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8002ebc <HAL_TIM_PeriodElapsedCallback+0x354>
 8002cc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cca:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002ccc:	edd3 7a00 	vldr	s15, [r3]
 8002cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd4:	4b7b      	ldr	r3, [pc, #492]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002cd6:	edd3 7a00 	vldr	s15, [r3]
 8002cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	d867      	bhi.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x24c>
						if (ptg - (2 * pi / 360 * position)
 8002ce4:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002ce6:	ed93 7a00 	vldr	s14, [r3]
 8002cea:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002cf4:	ed9f 6a71 	vldr	s12, [pc, #452]	; 8002ebc <HAL_TIM_PeriodElapsedCallback+0x354>
 8002cf8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002cfc:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d06:	ee37 7a67 	vsub.f32	s14, s14, s15
								<= 2 * pi - ptg + (2 * pi / 360 * position)) {
 8002d0a:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d14:	4b6b      	ldr	r3, [pc, #428]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d1e:	4b66      	ldr	r3, [pc, #408]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d28:	eddf 5a64 	vldr	s11, [pc, #400]	; 8002ebc <HAL_TIM_PeriodElapsedCallback+0x354>
 8002d2c:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8002d30:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
						if (ptg - (2 * pi / 360 * position)
 8002d3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d46:	d816      	bhi.n	8002d76 <HAL_TIM_PeriodElapsedCallback+0x20e>
							distance = ptg - (2 * pi / 360 * position);
 8002d48:	4b5e      	ldr	r3, [pc, #376]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002d4a:	ed93 7a00 	vldr	s14, [r3]
 8002d4e:	4b5a      	ldr	r3, [pc, #360]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d58:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8002ebc <HAL_TIM_PeriodElapsedCallback+0x354>
 8002d5c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002d60:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6e:	4b56      	ldr	r3, [pc, #344]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002d70:	edc3 7a00 	vstr	s15, [r3]
 8002d74:	e01e      	b.n	8002db4 <HAL_TIM_PeriodElapsedCallback+0x24c>
						} else {
							distance = -(2 * pi - ptg
 8002d76:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002d80:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee37 7a67 	vsub.f32	s14, s14, s15
									+ (2 * pi / 360 * position));
 8002d8a:	4b4b      	ldr	r3, [pc, #300]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d94:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8002ebc <HAL_TIM_PeriodElapsedCallback+0x354>
 8002d98:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002d9c:	4b48      	ldr	r3, [pc, #288]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002d9e:	edd3 7a00 	vldr	s15, [r3]
 8002da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002da6:	ee77 7a27 	vadd.f32	s15, s14, s15
							distance = -(2 * pi - ptg
 8002daa:	eef1 7a67 	vneg.f32	s15, s15
 8002dae:	4b46      	ldr	r3, [pc, #280]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002db0:	edc3 7a00 	vstr	s15, [r3]
						}
					}
					if (distance >= 0) {
 8002db4:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002db6:	edd3 7a00 	vldr	s15, [r3]
 8002dba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	f2c0 808d 	blt.w	8002ee0 <HAL_TIM_PeriodElapsedCallback+0x378>
						if (8 / 5 * vmax * vmax / distance >= 0.5) {
 8002dc6:	4b41      	ldr	r3, [pc, #260]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002dc8:	ed93 7a00 	vldr	s14, [r3]
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002dd6:	4b3c      	ldr	r3, [pc, #240]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002dd8:	ed93 7a00 	vldr	s14, [r3]
 8002ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002de0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dec:	db2e      	blt.n	8002e4c <HAL_TIM_PeriodElapsedCallback+0x2e4>
							vmax = sqrt(0.5 * distance * 3 / 8);
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fba8 	bl	8000548 <__aeabi_f2d>
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002dfe:	f7fd fbfb 	bl	80005f8 <__aeabi_dmul>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8002e10:	f7fd fbf2 	bl	80005f8 <__aeabi_dmul>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002e22:	f7fd fd13 	bl	800084c <__aeabi_ddiv>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	ec43 2b17 	vmov	d7, r2, r3
 8002e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e32:	eef0 0a67 	vmov.f32	s1, s15
 8002e36:	f007 fd53 	bl	800a8e0 <sqrt>
 8002e3a:	ec53 2b10 	vmov	r2, r3, d0
 8002e3e:	4610      	mov	r0, r2
 8002e40:	4619      	mov	r1, r3
 8002e42:	f7fd fe89 	bl	8000b58 <__aeabi_d2f>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4a20      	ldr	r2, [pc, #128]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002e4a:	6013      	str	r3, [r2, #0]
						}
						rotationtime = (3.00 * distance) / (2 * vmax);
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd fb79 	bl	8000548 <__aeabi_f2d>
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8002e5c:	f7fd fbcc 	bl	80005f8 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4614      	mov	r4, r2
 8002e66:	461d      	mov	r5, r3
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e72:	ee17 0a90 	vmov	r0, s15
 8002e76:	f7fd fb67 	bl	8000548 <__aeabi_f2d>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4620      	mov	r0, r4
 8002e80:	4629      	mov	r1, r5
 8002e82:	f7fd fce3 	bl	800084c <__aeabi_ddiv>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f7fd fe63 	bl	8000b58 <__aeabi_d2f>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4a11      	ldr	r2, [pc, #68]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x374>)
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	e08e      	b.n	8002fb8 <HAL_TIM_PeriodElapsedCallback+0x450>
 8002e9a:	bf00      	nop
 8002e9c:	2000044c 	.word	0x2000044c
 8002ea0:	200000c0 	.word	0x200000c0
 8002ea4:	20000260 	.word	0x20000260
 8002ea8:	20000170 	.word	0x20000170
 8002eac:	20000128 	.word	0x20000128
 8002eb0:	20000168 	.word	0x20000168
 8002eb4:	2000015c 	.word	0x2000015c
 8002eb8:	2000000c 	.word	0x2000000c
 8002ebc:	43b40000 	.word	0x43b40000
 8002ec0:	20000134 	.word	0x20000134
 8002ec4:	2000014c 	.word	0x2000014c
 8002ec8:	20000158 	.word	0x20000158
 8002ecc:	20000010 	.word	0x20000010
 8002ed0:	3fe00000 	.word	0x3fe00000
 8002ed4:	40080000 	.word	0x40080000
 8002ed8:	40200000 	.word	0x40200000
 8002edc:	20000150 	.word	0x20000150
					} else {
						if (-8 / 5 * vmax * vmax / distance >= 0.5) {
 8002ee0:	4b7c      	ldr	r3, [pc, #496]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	eeb1 7a67 	vneg.f32	s14, s15
 8002eea:	4b7a      	ldr	r3, [pc, #488]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ef4:	4b78      	ldr	r3, [pc, #480]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002ef6:	ed93 7a00 	vldr	s14, [r3]
 8002efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002efe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0a:	db2e      	blt.n	8002f6a <HAL_TIM_PeriodElapsedCallback+0x402>
							vmax = sqrt(-0.5 * distance * 3 / 8);
 8002f0c:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd fb19 	bl	8000548 <__aeabi_f2d>
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	4b70      	ldr	r3, [pc, #448]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002f1c:	f7fd fb6c 	bl	80005f8 <__aeabi_dmul>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	4b6c      	ldr	r3, [pc, #432]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002f2e:	f7fd fb63 	bl	80005f8 <__aeabi_dmul>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	4b69      	ldr	r3, [pc, #420]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002f40:	f7fd fc84 	bl	800084c <__aeabi_ddiv>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	ec43 2b17 	vmov	d7, r2, r3
 8002f4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002f50:	eef0 0a67 	vmov.f32	s1, s15
 8002f54:	f007 fcc4 	bl	800a8e0 <sqrt>
 8002f58:	ec53 2b10 	vmov	r2, r3, d0
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f7fd fdfa 	bl	8000b58 <__aeabi_d2f>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4a5b      	ldr	r2, [pc, #364]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002f68:	6013      	str	r3, [r2, #0]
						}
						rotationtime = -(3.00 * distance) / (2 * vmax);
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd faea 	bl	8000548 <__aeabi_f2d>
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002f7a:	f7fd fb3d 	bl	80005f8 <__aeabi_dmul>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4690      	mov	r8, r2
 8002f84:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002f88:	4b52      	ldr	r3, [pc, #328]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
 8002f8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f92:	ee17 0a90 	vmov	r0, s15
 8002f96:	f7fd fad7 	bl	8000548 <__aeabi_f2d>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4640      	mov	r0, r8
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	f7fd fc53 	bl	800084c <__aeabi_ddiv>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4610      	mov	r0, r2
 8002fac:	4619      	mov	r1, r3
 8002fae:	f7fd fdd3 	bl	8000b58 <__aeabi_d2f>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4a4c      	ldr	r2, [pc, #304]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002fb6:	6013      	str	r3, [r2, #0]
					}
					a = 2 * sqrt(vmax) / rotationtime;
 8002fb8:	4b46      	ldr	r3, [pc, #280]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fac3 	bl	8000548 <__aeabi_f2d>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	ec43 2b10 	vmov	d0, r2, r3
 8002fca:	f007 fc89 	bl	800a8e0 <sqrt>
 8002fce:	ec51 0b10 	vmov	r0, r1, d0
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	f7fd f959 	bl	800028c <__adddf3>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4614      	mov	r4, r2
 8002fe0:	461d      	mov	r5, r3
 8002fe2:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd faae 	bl	8000548 <__aeabi_f2d>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	f7fd fc2a 	bl	800084c <__aeabi_ddiv>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	f7fd fdaa 	bl	8000b58 <__aeabi_d2f>
 8003004:	4603      	mov	r3, r0
 8003006:	4a39      	ldr	r2, [pc, #228]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003008:	6013      	str	r3, [r2, #0]
					activate = 0;
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
				}
				if (distance >= 0) {
 8003010:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8003012:	edd3 7a00 	vldr	s15, [r3]
 8003016:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301e:	db6d      	blt.n	80030fc <HAL_TIM_PeriodElapsedCallback+0x594>
					require = -(a * a * ttrajec * ttrajec)
 8003020:	4b32      	ldr	r3, [pc, #200]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003022:	ed93 7a00 	vldr	s14, [r3]
 8003026:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003030:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	ee27 7a27 	vmul.f32	s14, s14, s15
 800303a:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003044:	eef1 7a67 	vneg.f32	s15, s15
 8003048:	ee17 3a90 	vmov	r3, s15
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fa7b 	bl	8000548 <__aeabi_f2d>
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
							+ (2 * sqrt(vmax) * a * ttrajec);
 8003056:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa74 	bl	8000548 <__aeabi_f2d>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	ec43 2b10 	vmov	d0, r2, r3
 8003068:	f007 fc3a 	bl	800a8e0 <sqrt>
 800306c:	ec51 0b10 	vmov	r0, r1, d0
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	f7fd f90a 	bl	800028c <__adddf3>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4690      	mov	r8, r2
 800307e:	4699      	mov	r9, r3
 8003080:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x584>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd fa5f 	bl	8000548 <__aeabi_f2d>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4640      	mov	r0, r8
 8003090:	4649      	mov	r1, r9
 8003092:	f7fd fab1 	bl	80005f8 <__aeabi_dmul>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4690      	mov	r8, r2
 800309c:	4699      	mov	r9, r3
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fa50 	bl	8000548 <__aeabi_f2d>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4640      	mov	r0, r8
 80030ae:	4649      	mov	r1, r9
 80030b0:	f7fd faa2 	bl	80005f8 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4620      	mov	r0, r4
 80030ba:	4629      	mov	r1, r5
 80030bc:	f7fd f8e6 	bl	800028c <__adddf3>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	f7fd fd46 	bl	8000b58 <__aeabi_d2f>
 80030cc:	4603      	mov	r3, r0
					require = -(a * a * ttrajec * ttrajec)
 80030ce:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e069      	b.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x640>
 80030d4:	20000010 	.word	0x20000010
 80030d8:	20000158 	.word	0x20000158
 80030dc:	bfe00000 	.word	0xbfe00000
 80030e0:	40080000 	.word	0x40080000
 80030e4:	40200000 	.word	0x40200000
 80030e8:	20000150 	.word	0x20000150
 80030ec:	20000154 	.word	0x20000154
 80030f0:	20000168 	.word	0x20000168
 80030f4:	2000015c 	.word	0x2000015c
 80030f8:	200000e4 	.word	0x200000e4
				} else {
					require = (a * a * ttrajec * ttrajec)
 80030fc:	4b6b      	ldr	r3, [pc, #428]	; (80032ac <HAL_TIM_PeriodElapsedCallback+0x744>)
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	4b6a      	ldr	r3, [pc, #424]	; (80032ac <HAL_TIM_PeriodElapsedCallback+0x744>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800310c:	4b68      	ldr	r3, [pc, #416]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x748>)
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003116:	4b66      	ldr	r3, [pc, #408]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003120:	ee17 0a90 	vmov	r0, s15
 8003124:	f7fd fa10 	bl	8000548 <__aeabi_f2d>
 8003128:	4604      	mov	r4, r0
 800312a:	460d      	mov	r5, r1
							- (2 * sqrt(vmax) * a * ttrajec);
 800312c:	4b61      	ldr	r3, [pc, #388]	; (80032b4 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd fa09 	bl	8000548 <__aeabi_f2d>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	ec43 2b10 	vmov	d0, r2, r3
 800313e:	f007 fbcf 	bl	800a8e0 <sqrt>
 8003142:	ec51 0b10 	vmov	r0, r1, d0
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	f7fd f89f 	bl	800028c <__adddf3>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4690      	mov	r8, r2
 8003154:	4699      	mov	r9, r3
 8003156:	4b55      	ldr	r3, [pc, #340]	; (80032ac <HAL_TIM_PeriodElapsedCallback+0x744>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd f9f4 	bl	8000548 <__aeabi_f2d>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4640      	mov	r0, r8
 8003166:	4649      	mov	r1, r9
 8003168:	f7fd fa46 	bl	80005f8 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4690      	mov	r8, r2
 8003172:	4699      	mov	r9, r3
 8003174:	4b4e      	ldr	r3, [pc, #312]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f9e5 	bl	8000548 <__aeabi_f2d>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4640      	mov	r0, r8
 8003184:	4649      	mov	r1, r9
 8003186:	f7fd fa37 	bl	80005f8 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4620      	mov	r0, r4
 8003190:	4629      	mov	r1, r5
 8003192:	f7fd f879 	bl	8000288 <__aeabi_dsub>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f7fd fcdb 	bl	8000b58 <__aeabi_d2f>
 80031a2:	4603      	mov	r3, r0
					require = (a * a * ttrajec * ttrajec)
 80031a4:	4a44      	ldr	r2, [pc, #272]	; (80032b8 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80031a6:	6013      	str	r3, [r2, #0]
				}
				if (distance >= 0) {
 80031a8:	4b44      	ldr	r3, [pc, #272]	; (80032bc <HAL_TIM_PeriodElapsedCallback+0x754>)
 80031aa:	edd3 7a00 	vldr	s15, [r3]
 80031ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b6:	f2c0 8087 	blt.w	80032c8 <HAL_TIM_PeriodElapsedCallback+0x760>
					calculatedp = (-(a * a * ttrajec * ttrajec * ttrajec / 3)
 80031ba:	4b3c      	ldr	r3, [pc, #240]	; (80032ac <HAL_TIM_PeriodElapsedCallback+0x744>)
 80031bc:	ed93 7a00 	vldr	s14, [r3]
 80031c0:	4b3a      	ldr	r3, [pc, #232]	; (80032ac <HAL_TIM_PeriodElapsedCallback+0x744>)
 80031c2:	edd3 7a00 	vldr	s15, [r3]
 80031c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ca:	4b39      	ldr	r3, [pc, #228]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031d4:	4b36      	ldr	r3, [pc, #216]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031de:	4b34      	ldr	r3, [pc, #208]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80031e0:	edd3 7a00 	vldr	s15, [r3]
 80031e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80031ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031f0:	eef1 7a67 	vneg.f32	s15, s15
 80031f4:	ee17 3a90 	vmov	r3, s15
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fd f9a5 	bl	8000548 <__aeabi_f2d>
 80031fe:	4604      	mov	r4, r0
 8003200:	460d      	mov	r5, r1
							+ (sqrt(vmax) * a * ttrajec * ttrajec)) + previous;
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f99e 	bl	8000548 <__aeabi_f2d>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	ec43 2b10 	vmov	d0, r2, r3
 8003214:	f007 fb64 	bl	800a8e0 <sqrt>
 8003218:	ec59 8b10 	vmov	r8, r9, d0
 800321c:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_TIM_PeriodElapsedCallback+0x744>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd f991 	bl	8000548 <__aeabi_f2d>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4640      	mov	r0, r8
 800322c:	4649      	mov	r1, r9
 800322e:	f7fd f9e3 	bl	80005f8 <__aeabi_dmul>
 8003232:	4602      	mov	r2, r0
 8003234:	460b      	mov	r3, r1
 8003236:	4690      	mov	r8, r2
 8003238:	4699      	mov	r9, r3
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x748>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fd f982 	bl	8000548 <__aeabi_f2d>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4640      	mov	r0, r8
 800324a:	4649      	mov	r1, r9
 800324c:	f7fd f9d4 	bl	80005f8 <__aeabi_dmul>
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4690      	mov	r8, r2
 8003256:	4699      	mov	r9, r3
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <HAL_TIM_PeriodElapsedCallback+0x748>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f973 	bl	8000548 <__aeabi_f2d>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4640      	mov	r0, r8
 8003268:	4649      	mov	r1, r9
 800326a:	f7fd f9c5 	bl	80005f8 <__aeabi_dmul>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4620      	mov	r0, r4
 8003274:	4629      	mov	r1, r5
 8003276:	f7fd f809 	bl	800028c <__adddf3>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	4614      	mov	r4, r2
 8003280:	461d      	mov	r5, r3
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f95e 	bl	8000548 <__aeabi_f2d>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4620      	mov	r0, r4
 8003292:	4629      	mov	r1, r5
 8003294:	f7fc fffa 	bl	800028c <__adddf3>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	f7fd fc5a 	bl	8000b58 <__aeabi_d2f>
 80032a4:	4603      	mov	r3, r0
					calculatedp = (-(a * a * ttrajec * ttrajec * ttrajec / 3)
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e082      	b.n	80033b2 <HAL_TIM_PeriodElapsedCallback+0x84a>
 80032ac:	20000154 	.word	0x20000154
 80032b0:	2000015c 	.word	0x2000015c
 80032b4:	20000010 	.word	0x20000010
 80032b8:	200000e4 	.word	0x200000e4
 80032bc:	20000158 	.word	0x20000158
 80032c0:	20000164 	.word	0x20000164
 80032c4:	20000160 	.word	0x20000160
				} else {
					calculatedp = ((a * a * ttrajec * ttrajec * ttrajec / 3)
 80032c8:	4ba3      	ldr	r3, [pc, #652]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 80032ca:	ed93 7a00 	vldr	s14, [r3]
 80032ce:	4ba2      	ldr	r3, [pc, #648]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 80032d0:	edd3 7a00 	vldr	s15, [r3]
 80032d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d8:	4ba0      	ldr	r3, [pc, #640]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 80032da:	edd3 7a00 	vldr	s15, [r3]
 80032de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032e2:	4b9e      	ldr	r3, [pc, #632]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ec:	4b9b      	ldr	r3, [pc, #620]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80032fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032fe:	ee16 0a90 	vmov	r0, s13
 8003302:	f7fd f921 	bl	8000548 <__aeabi_f2d>
 8003306:	4604      	mov	r4, r0
 8003308:	460d      	mov	r5, r1
							- (sqrt(vmax) * a * ttrajec * ttrajec)) + previous;
 800330a:	4b95      	ldr	r3, [pc, #596]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd f91a 	bl	8000548 <__aeabi_f2d>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	ec43 2b10 	vmov	d0, r2, r3
 800331c:	f007 fae0 	bl	800a8e0 <sqrt>
 8003320:	ec59 8b10 	vmov	r8, r9, d0
 8003324:	4b8c      	ldr	r3, [pc, #560]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7fd f90d 	bl	8000548 <__aeabi_f2d>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4640      	mov	r0, r8
 8003334:	4649      	mov	r1, r9
 8003336:	f7fd f95f 	bl	80005f8 <__aeabi_dmul>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4690      	mov	r8, r2
 8003340:	4699      	mov	r9, r3
 8003342:	4b86      	ldr	r3, [pc, #536]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f8fe 	bl	8000548 <__aeabi_f2d>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4640      	mov	r0, r8
 8003352:	4649      	mov	r1, r9
 8003354:	f7fd f950 	bl	80005f8 <__aeabi_dmul>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4690      	mov	r8, r2
 800335e:	4699      	mov	r9, r3
 8003360:	4b7e      	ldr	r3, [pc, #504]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd f8ef 	bl	8000548 <__aeabi_f2d>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4640      	mov	r0, r8
 8003370:	4649      	mov	r1, r9
 8003372:	f7fd f941 	bl	80005f8 <__aeabi_dmul>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4620      	mov	r0, r4
 800337c:	4629      	mov	r1, r5
 800337e:	f7fc ff83 	bl	8000288 <__aeabi_dsub>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4614      	mov	r4, r2
 8003388:	461d      	mov	r5, r3
 800338a:	4b76      	ldr	r3, [pc, #472]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd f8da 	bl	8000548 <__aeabi_f2d>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4620      	mov	r0, r4
 800339a:	4629      	mov	r1, r5
 800339c:	f7fc ff76 	bl	800028c <__adddf3>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	f7fd fbd6 	bl	8000b58 <__aeabi_d2f>
 80033ac:	4603      	mov	r3, r0
					calculatedp = ((a * a * ttrajec * ttrajec * ttrajec / 3)
 80033ae:	4a6e      	ldr	r2, [pc, #440]	; (8003568 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80033b0:	6013      	str	r3, [r2, #0]
				}
				ttrajec += 0.001;
 80033b2:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f8c6 	bl	8000548 <__aeabi_f2d>
 80033bc:	a364      	add	r3, pc, #400	; (adr r3, 8003550 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fc ff63 	bl	800028c <__adddf3>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	f7fd fbc3 	bl	8000b58 <__aeabi_d2f>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4a61      	ldr	r2, [pc, #388]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 80033d6:	6013      	str	r3, [r2, #0]
				if (ttrajec >= rotationtime) {
 80033d8:	4b60      	ldr	r3, [pc, #384]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 80033da:	ed93 7a00 	vldr	s14, [r3]
 80033de:	4b63      	ldr	r3, [pc, #396]	; (800356c <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ec:	db1c      	blt.n	8003428 <HAL_TIM_PeriodElapsedCallback+0x8c0>
					a = 0;
 80033ee:	4b5a      	ldr	r3, [pc, #360]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
					previous = 2 * pi / 360 * position;
 80033f6:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003400:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8003574 <HAL_TIM_PeriodElapsedCallback+0xa0c>
 8003404:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003408:	4b5b      	ldr	r3, [pc, #364]	; (8003578 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800340a:	edd3 7a00 	vldr	s15, [r3]
 800340e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003412:	4b54      	ldr	r3, [pc, #336]	; (8003564 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8003414:	edc3 7a00 	vstr	s15, [r3]
					sumpid = 0;
 8003418:	4b58      	ldr	r3, [pc, #352]	; (800357c <HAL_TIM_PeriodElapsedCallback+0xa14>)
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
					vmax = dumpvmax;
 8003420:	4b57      	ldr	r3, [pc, #348]	; (8003580 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8003426:	6013      	str	r3, [r2, #0]
				}
			}
			// PID
			velocity = EncoderVel / 524288 * (2 * pi);
 8003428:	4b56      	ldr	r3, [pc, #344]	; (8003584 <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003588 <HAL_TIM_PeriodElapsedCallback+0xa20>
 8003432:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003436:	4b4e      	ldr	r3, [pc, #312]	; (8003570 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003444:	4b51      	ldr	r3, [pc, #324]	; (800358c <HAL_TIM_PeriodElapsedCallback+0xa24>)
 8003446:	edc3 7a00 	vstr	s15, [r3]
			if (require == 0)
 800344a:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	d103      	bne.n	8003462 <HAL_TIM_PeriodElapsedCallback+0x8fa>
				errorpid[0] = 0;
 800345a:	4b4e      	ldr	r3, [pc, #312]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
			if (require < 0) {
 8003462:	4b4b      	ldr	r3, [pc, #300]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 8003464:	edd3 7a00 	vldr	s15, [r3]
 8003468:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800346c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003470:	d50a      	bpl.n	8003488 <HAL_TIM_PeriodElapsedCallback+0x920>
				errorpid[0] = velocity - require;
 8003472:	4b46      	ldr	r3, [pc, #280]	; (800358c <HAL_TIM_PeriodElapsedCallback+0xa24>)
 8003474:	ed93 7a00 	vldr	s14, [r3]
 8003478:	4b45      	ldr	r3, [pc, #276]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003482:	4b44      	ldr	r3, [pc, #272]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 8003484:	edc3 7a00 	vstr	s15, [r3]
			}
			if (require > 0) {
 8003488:	4b41      	ldr	r3, [pc, #260]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	dd0a      	ble.n	80034ae <HAL_TIM_PeriodElapsedCallback+0x946>
				errorpid[0] = require - velocity;
 8003498:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 800349a:	ed93 7a00 	vldr	s14, [r3]
 800349e:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_TIM_PeriodElapsedCallback+0xa24>)
 80034a0:	edd3 7a00 	vldr	s15, [r3]
 80034a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 80034aa:	edc3 7a00 	vstr	s15, [r3]
			}
			sumpid = sumpid + errorpid[0];
 80034ae:	4b39      	ldr	r3, [pc, #228]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 80034b0:	ed93 7a00 	vldr	s14, [r3]
 80034b4:	4b31      	ldr	r3, [pc, #196]	; (800357c <HAL_TIM_PeriodElapsedCallback+0xa14>)
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034be:	4b2f      	ldr	r3, [pc, #188]	; (800357c <HAL_TIM_PeriodElapsedCallback+0xa14>)
 80034c0:	edc3 7a00 	vstr	s15, [r3]
			pwm = Kp * errorpid[0] + Ki * sumpid
 80034c4:	4b33      	ldr	r3, [pc, #204]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 80034c6:	ed93 7a00 	vldr	s14, [r3]
 80034ca:	4b33      	ldr	r3, [pc, #204]	; (8003598 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d4:	4b31      	ldr	r3, [pc, #196]	; (800359c <HAL_TIM_PeriodElapsedCallback+0xa34>)
 80034d6:	edd3 6a00 	vldr	s13, [r3]
 80034da:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_TIM_PeriodElapsedCallback+0xa14>)
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e4:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ Kd * (errorpid[0] - errorpid[1]);
 80034e8:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 80034ea:	edd3 6a00 	vldr	s13, [r3]
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 80034f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80034f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034f8:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80034fa:	edd3 7a00 	vldr	s15, [r3]
 80034fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003502:	ee77 7a27 	vadd.f32	s15, s14, s15
			pwm = Kp * errorpid[0] + Ki * sumpid
 8003506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800350a:	ee17 2a90 	vmov	r2, s15
 800350e:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8003510:	601a      	str	r2, [r3, #0]
			errorpid[1] = errorpid[0];
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1f      	ldr	r2, [pc, #124]	; (8003594 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 8003518:	6053      	str	r3, [r2, #4]
			if (pwm < 0) {
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	da04      	bge.n	800352c <HAL_TIM_PeriodElapsedCallback+0x9c4>
				pwm = -pwm;
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	425b      	negs	r3, r3
 8003528:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800352a:	6013      	str	r3, [r2, #0]
			}
			if (pwm > 9001)
 800352c:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f242 3229 	movw	r2, #9001	; 0x2329
 8003534:	4293      	cmp	r3, r2
 8003536:	dd03      	ble.n	8003540 <HAL_TIM_PeriodElapsedCallback+0x9d8>
				pwm = 9000;
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800353a:	f242 3228 	movw	r2, #9000	; 0x2328
 800353e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800354a:	bf00      	nop
 800354c:	f3af 8000 	nop.w
 8003550:	d2f1a9fc 	.word	0xd2f1a9fc
 8003554:	3f50624d 	.word	0x3f50624d
 8003558:	20000154 	.word	0x20000154
 800355c:	2000015c 	.word	0x2000015c
 8003560:	20000010 	.word	0x20000010
 8003564:	20000164 	.word	0x20000164
 8003568:	20000160 	.word	0x20000160
 800356c:	20000150 	.word	0x20000150
 8003570:	2000000c 	.word	0x2000000c
 8003574:	43b40000 	.word	0x43b40000
 8003578:	20000134 	.word	0x20000134
 800357c:	20000144 	.word	0x20000144
 8003580:	20000014 	.word	0x20000014
 8003584:	200000c8 	.word	0x200000c8
 8003588:	49000000 	.word	0x49000000
 800358c:	20000148 	.word	0x20000148
 8003590:	200000e4 	.word	0x200000e4
 8003594:	2000013c 	.word	0x2000013c
 8003598:	20000000 	.word	0x20000000
 800359c:	20000004 	.word	0x20000004
 80035a0:	20000008 	.word	0x20000008
 80035a4:	2000016c 	.word	0x2000016c

080035a8 <micros>:
uint64_t micros() {
 80035a8:	b4b0      	push	{r4, r5, r7}
 80035aa:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <micros+0x2c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	4618      	mov	r0, r3
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <micros+0x30>)
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	1884      	adds	r4, r0, r2
 80035c0:	eb41 0503 	adc.w	r5, r1, r3
 80035c4:	4622      	mov	r2, r4
 80035c6:	462b      	mov	r3, r5
}
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bcb0      	pop	{r4, r5, r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	2000044c 	.word	0x2000044c
 80035d8:	200000c0 	.word	0x200000c0

080035dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035e0:	b672      	cpsid	i
}
 80035e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80035e4:	e7fe      	b.n	80035e4 <Error_Handler+0x8>
	...

080035e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_MspInit+0x4c>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	4a0f      	ldr	r2, [pc, #60]	; (8003634 <HAL_MspInit+0x4c>)
 80035f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035fc:	6453      	str	r3, [r2, #68]	; 0x44
 80035fe:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <HAL_MspInit+0x4c>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <HAL_MspInit+0x4c>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	4a08      	ldr	r2, [pc, #32]	; (8003634 <HAL_MspInit+0x4c>)
 8003614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003618:	6413      	str	r3, [r2, #64]	; 0x40
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_MspInit+0x4c>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003626:	2007      	movs	r0, #7
 8003628:	f001 f9b4 	bl	8004994 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800

08003638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <HAL_ADC_MspInit+0xa8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d146      	bne.n	80036d8 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_ADC_MspInit+0xac>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	4a24      	ldr	r2, [pc, #144]	; (80036e4 <HAL_ADC_MspInit+0xac>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6453      	str	r3, [r2, #68]	; 0x44
 800365a:	4b22      	ldr	r3, [pc, #136]	; (80036e4 <HAL_ADC_MspInit+0xac>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 8003668:	4a20      	ldr	r2, [pc, #128]	; (80036ec <HAL_ADC_MspInit+0xb4>)
 800366a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 800366e:	2200      	movs	r2, #0
 8003670:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003678:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 800367a:	2200      	movs	r2, #0
 800367c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 8003680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003684:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 8003688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800368c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 8003690:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003694:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003696:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 8003698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800369c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 80036a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036a4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036ac:	480e      	ldr	r0, [pc, #56]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 80036ae:	f001 f9b3 	bl	8004a18 <HAL_DMA_Init>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 80036b8:	f7ff ff90 	bl	80035dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
 80036c2:	4a09      	ldr	r2, [pc, #36]	; (80036e8 <HAL_ADC_MspInit+0xb0>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036c8:	2200      	movs	r2, #0
 80036ca:	2100      	movs	r1, #0
 80036cc:	2012      	movs	r0, #18
 80036ce:	f001 f96c 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036d2:	2012      	movs	r0, #18
 80036d4:	f001 f985 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036d8:	bf00      	nop
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40012000 	.word	0x40012000
 80036e4:	40023800 	.word	0x40023800
 80036e8:	200003e8 	.word	0x200003e8
 80036ec:	40026410 	.word	0x40026410

080036f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a21      	ldr	r2, [pc, #132]	; (8003794 <HAL_I2C_MspInit+0xa4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d13c      	bne.n	800378c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_I2C_MspInit+0xa8>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_I2C_MspInit+0xa8>)
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_I2C_MspInit+0xa8>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800372e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003734:	2312      	movs	r3, #18
 8003736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003738:	2301      	movs	r3, #1
 800373a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003740:	2304      	movs	r3, #4
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	4814      	ldr	r0, [pc, #80]	; (800379c <HAL_I2C_MspInit+0xac>)
 800374c:	f001 fd74 	bl	8005238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_I2C_MspInit+0xa8>)
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <HAL_I2C_MspInit+0xa8>)
 800375a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800375e:	6413      	str	r3, [r2, #64]	; 0x40
 8003760:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_I2C_MspInit+0xa8>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800376c:	2200      	movs	r2, #0
 800376e:	2100      	movs	r1, #0
 8003770:	201f      	movs	r0, #31
 8003772:	f001 f91a 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003776:	201f      	movs	r0, #31
 8003778:	f001 f933 	bl	80049e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800377c:	2200      	movs	r2, #0
 800377e:	2100      	movs	r1, #0
 8003780:	2020      	movs	r0, #32
 8003782:	f001 f912 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003786:	2020      	movs	r0, #32
 8003788:	f001 f92b 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800378c:	bf00      	nop
 800378e:	3728      	adds	r7, #40	; 0x28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40005400 	.word	0x40005400
 8003798:	40023800 	.word	0x40023800
 800379c:	40020400 	.word	0x40020400

080037a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d116      	bne.n	80037e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	4b28      	ldr	r3, [pc, #160]	; (8003858 <HAL_TIM_Base_MspInit+0xb8>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	4a27      	ldr	r2, [pc, #156]	; (8003858 <HAL_TIM_Base_MspInit+0xb8>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	6413      	str	r3, [r2, #64]	; 0x40
 80037c2:	4b25      	ldr	r3, [pc, #148]	; (8003858 <HAL_TIM_Base_MspInit+0xb8>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	2100      	movs	r1, #0
 80037d2:	201c      	movs	r0, #28
 80037d4:	f001 f8e9 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037d8:	201c      	movs	r0, #28
 80037da:	f001 f902 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037de:	e036      	b.n	800384e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_TIM_Base_MspInit+0xbc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d116      	bne.n	8003818 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <HAL_TIM_Base_MspInit+0xb8>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_TIM_Base_MspInit+0xb8>)
 80037f4:	f043 0302 	orr.w	r3, r3, #2
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b17      	ldr	r3, [pc, #92]	; (8003858 <HAL_TIM_Base_MspInit+0xb8>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003806:	2200      	movs	r2, #0
 8003808:	2100      	movs	r1, #0
 800380a:	201d      	movs	r0, #29
 800380c:	f001 f8cd 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003810:	201d      	movs	r0, #29
 8003812:	f001 f8e6 	bl	80049e2 <HAL_NVIC_EnableIRQ>
}
 8003816:	e01a      	b.n	800384e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a10      	ldr	r2, [pc, #64]	; (8003860 <HAL_TIM_Base_MspInit+0xc0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d115      	bne.n	800384e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <HAL_TIM_Base_MspInit+0xb8>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	4a0b      	ldr	r2, [pc, #44]	; (8003858 <HAL_TIM_Base_MspInit+0xb8>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	6413      	str	r3, [r2, #64]	; 0x40
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_TIM_Base_MspInit+0xb8>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	201e      	movs	r0, #30
 8003844:	f001 f8b1 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003848:	201e      	movs	r0, #30
 800384a:	f001 f8ca 	bl	80049e2 <HAL_NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800
 800385c:	40000400 	.word	0x40000400
 8003860:	40000800 	.word	0x40000800

08003864 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <HAL_TIM_Encoder_MspInit+0x94>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d133      	bne.n	80038ee <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <HAL_TIM_Encoder_MspInit+0x98>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <HAL_TIM_Encoder_MspInit+0x98>)
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
 8003896:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_TIM_Encoder_MspInit+0x98>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <HAL_TIM_Encoder_MspInit+0x98>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a14      	ldr	r2, [pc, #80]	; (80038fc <HAL_TIM_Encoder_MspInit+0x98>)
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_TIM_Encoder_MspInit+0x98>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038be:	2303      	movs	r3, #3
 80038c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80038ce:	2302      	movs	r3, #2
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d2:	f107 0314 	add.w	r3, r7, #20
 80038d6:	4619      	mov	r1, r3
 80038d8:	4809      	ldr	r0, [pc, #36]	; (8003900 <HAL_TIM_Encoder_MspInit+0x9c>)
 80038da:	f001 fcad 	bl	8005238 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80038de:	2200      	movs	r2, #0
 80038e0:	2100      	movs	r1, #0
 80038e2:	2032      	movs	r0, #50	; 0x32
 80038e4:	f001 f861 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80038e8:	2032      	movs	r0, #50	; 0x32
 80038ea:	f001 f87a 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80038ee:	bf00      	nop
 80038f0:	3728      	adds	r7, #40	; 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40000c00 	.word	0x40000c00
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020000 	.word	0x40020000

08003904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a12      	ldr	r2, [pc, #72]	; (800396c <HAL_TIM_MspPostInit+0x68>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d11d      	bne.n	8003962 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_TIM_MspPostInit+0x6c>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a10      	ldr	r2, [pc, #64]	; (8003970 <HAL_TIM_MspPostInit+0x6c>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <HAL_TIM_MspPostInit+0x6c>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003942:	2340      	movs	r3, #64	; 0x40
 8003944:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003952:	2302      	movs	r3, #2
 8003954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	4619      	mov	r1, r3
 800395c:	4805      	ldr	r0, [pc, #20]	; (8003974 <HAL_TIM_MspPostInit+0x70>)
 800395e:	f001 fc6b 	bl	8005238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003962:	bf00      	nop
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40000400 	.word	0x40000400
 8003970:	40023800 	.word	0x40023800
 8003974:	40020000 	.word	0x40020000

08003978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <HAL_UART_MspInit+0x94>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d133      	bne.n	8003a02 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	4b1c      	ldr	r3, [pc, #112]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_UART_MspInit+0x98>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039d2:	230c      	movs	r3, #12
 80039d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039de:	2303      	movs	r3, #3
 80039e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039e2:	2307      	movs	r3, #7
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	4809      	ldr	r0, [pc, #36]	; (8003a14 <HAL_UART_MspInit+0x9c>)
 80039ee:	f001 fc23 	bl	8005238 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039f2:	2200      	movs	r2, #0
 80039f4:	2100      	movs	r1, #0
 80039f6:	2026      	movs	r0, #38	; 0x26
 80039f8:	f000 ffd7 	bl	80049aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039fc:	2026      	movs	r0, #38	; 0x26
 80039fe:	f000 fff0 	bl	80049e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a02:	bf00      	nop
 8003a04:	3728      	adds	r7, #40	; 0x28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40004400 	.word	0x40004400
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40020000 	.word	0x40020000

08003a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a1c:	e7fe      	b.n	8003a1c <NMI_Handler+0x4>

08003a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a22:	e7fe      	b.n	8003a22 <HardFault_Handler+0x4>

08003a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a28:	e7fe      	b.n	8003a28 <MemManage_Handler+0x4>

08003a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a2e:	e7fe      	b.n	8003a2e <BusFault_Handler+0x4>

08003a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a34:	e7fe      	b.n	8003a34 <UsageFault_Handler+0x4>

08003a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a36:	b480      	push	{r7}
 8003a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a52:	b480      	push	{r7}
 8003a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a64:	f000 f92c 	bl	8003cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a68:	bf00      	nop
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003a70:	4802      	ldr	r0, [pc, #8]	; (8003a7c <ADC_IRQHandler+0x10>)
 8003a72:	f000 f9ac 	bl	8003dce <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	2000039c 	.word	0x2000039c

08003a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a84:	4802      	ldr	r0, [pc, #8]	; (8003a90 <TIM2_IRQHandler+0x10>)
 8003a86:	f004 fe63 	bl	8008750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	2000044c 	.word	0x2000044c

08003a94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a98:	4802      	ldr	r0, [pc, #8]	; (8003aa4 <TIM3_IRQHandler+0x10>)
 8003a9a:	f004 fe59 	bl	8008750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000354 	.word	0x20000354

08003aa8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <TIM4_IRQHandler+0x10>)
 8003aae:	f004 fe4f 	bl	8008750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000260 	.word	0x20000260

08003abc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <I2C1_EV_IRQHandler+0x10>)
 8003ac2:	f001 ffc9 	bl	8005a58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200002a8 	.word	0x200002a8

08003ad0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <I2C1_ER_IRQHandler+0x10>)
 8003ad6:	f002 f92c 	bl	8005d32 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200002a8 	.word	0x200002a8

08003ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <USART2_IRQHandler+0x10>)
 8003aea:	f005 fd41 	bl	8009570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000494 	.word	0x20000494

08003af8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003afc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b00:	f001 fd50 	bl	80055a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003b04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b08:	f001 fd4c 	bl	80055a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b0c:	bf00      	nop
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <TIM5_IRQHandler+0x10>)
 8003b16:	f004 fe1b 	bl	8008750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000308 	.word	0x20000308

08003b24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <DMA2_Stream0_IRQHandler+0x10>)
 8003b2a:	f001 f90d 	bl	8004d48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	200003e8 	.word	0x200003e8

08003b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b40:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <_sbrk+0x5c>)
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <_sbrk+0x60>)
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b4c:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <_sbrk+0x64>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b54:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <_sbrk+0x64>)
 8003b56:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <_sbrk+0x68>)
 8003b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <_sbrk+0x64>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d207      	bcs.n	8003b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b68:	f006 fa5a 	bl	800a020 <__errno>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	220c      	movs	r2, #12
 8003b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295
 8003b76:	e009      	b.n	8003b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b78:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <_sbrk+0x64>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <_sbrk+0x64>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	4a05      	ldr	r2, [pc, #20]	; (8003b9c <_sbrk+0x64>)
 8003b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20020000 	.word	0x20020000
 8003b98:	00000400 	.word	0x00000400
 8003b9c:	20000254 	.word	0x20000254
 8003ba0:	20000560 	.word	0x20000560

08003ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <SystemInit+0x20>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <SystemInit+0x20>)
 8003bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

ldr   sp, =_estack    		 /* set stack pointer */
 8003bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bcc:	480d      	ldr	r0, [pc, #52]	; (8003c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bce:	490e      	ldr	r1, [pc, #56]	; (8003c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bd0:	4a0e      	ldr	r2, [pc, #56]	; (8003c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bd4:	e002      	b.n	8003bdc <LoopCopyDataInit>

08003bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bda:	3304      	adds	r3, #4

08003bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003be0:	d3f9      	bcc.n	8003bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003be2:	4a0b      	ldr	r2, [pc, #44]	; (8003c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003be4:	4c0b      	ldr	r4, [pc, #44]	; (8003c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003be8:	e001      	b.n	8003bee <LoopFillZerobss>

08003bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bec:	3204      	adds	r2, #4

08003bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bf0:	d3fb      	bcc.n	8003bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bf2:	f7ff ffd7 	bl	8003ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bf6:	f006 fa19 	bl	800a02c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bfa:	f7fd fa87 	bl	800110c <main>
  bx  lr    
 8003bfe:	4770      	bx	lr
ldr   sp, =_estack    		 /* set stack pointer */
 8003c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c08:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003c0c:	0800ab7c 	.word	0x0800ab7c
  ldr r2, =_sbss
 8003c10:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003c14:	2000055c 	.word	0x2000055c

08003c18 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c18:	e7fe      	b.n	8003c18 <DMA1_Stream0_IRQHandler>
	...

08003c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_Init+0x40>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a0d      	ldr	r2, [pc, #52]	; (8003c5c <HAL_Init+0x40>)
 8003c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_Init+0x40>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_Init+0x40>)
 8003c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <HAL_Init+0x40>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a07      	ldr	r2, [pc, #28]	; (8003c5c <HAL_Init+0x40>)
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c44:	2003      	movs	r0, #3
 8003c46:	f000 fea5 	bl	8004994 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f000 f808 	bl	8003c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c50:	f7ff fcca 	bl	80035e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40023c00 	.word	0x40023c00

08003c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c68:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <HAL_InitTick+0x54>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_InitTick+0x58>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 febd 	bl	80049fe <HAL_SYSTICK_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e00e      	b.n	8003cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b0f      	cmp	r3, #15
 8003c92:	d80a      	bhi.n	8003caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c94:	2200      	movs	r2, #0
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	f000 fe85 	bl	80049aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ca0:	4a06      	ldr	r2, [pc, #24]	; (8003cbc <HAL_InitTick+0x5c>)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e000      	b.n	8003cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	2000001c 	.word	0x2000001c
 8003cb8:	20000024 	.word	0x20000024
 8003cbc:	20000020 	.word	0x20000020

08003cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_IncTick+0x20>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_IncTick+0x24>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4413      	add	r3, r2
 8003cd0:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <HAL_IncTick+0x24>)
 8003cd2:	6013      	str	r3, [r2, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000024 	.word	0x20000024
 8003ce4:	20000548 	.word	0x20000548

08003ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return uwTick;
 8003cec:	4b03      	ldr	r3, [pc, #12]	; (8003cfc <HAL_GetTick+0x14>)
 8003cee:	681b      	ldr	r3, [r3, #0]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000548 	.word	0x20000548

08003d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d08:	f7ff ffee 	bl	8003ce8 <HAL_GetTick>
 8003d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d005      	beq.n	8003d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <HAL_Delay+0x44>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d26:	bf00      	nop
 8003d28:	f7ff ffde 	bl	8003ce8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d8f7      	bhi.n	8003d28 <HAL_Delay+0x28>
  {
  }
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000024 	.word	0x20000024

08003d48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e033      	b.n	8003dc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff fc66 	bl	8003638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d118      	bne.n	8003db8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d8e:	f023 0302 	bic.w	r3, r3, #2
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fba2 	bl	80044e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f023 0303 	bic.w	r3, r3, #3
 8003dae:	f043 0201 	orr.w	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40
 8003db6:	e001      	b.n	8003dbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	bf0c      	ite	eq
 8003e02:	2301      	moveq	r3, #1
 8003e04:	2300      	movne	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d049      	beq.n	8003ea4 <HAL_ADC_IRQHandler+0xd6>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d046      	beq.n	8003ea4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d12b      	bne.n	8003e94 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d127      	bne.n	8003e94 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d006      	beq.n	8003e60 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d119      	bne.n	8003e94 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0220 	bic.w	r2, r2, #32
 8003e6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f043 0201 	orr.w	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f9cb 	bl	8004230 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f06f 0212 	mvn.w	r2, #18
 8003ea2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	2300      	movne	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec4:	2b80      	cmp	r3, #128	; 0x80
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d057      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x1b8>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d054      	beq.n	8003f86 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d139      	bne.n	8003f76 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d006      	beq.n	8003f1e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d12b      	bne.n	8003f76 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d124      	bne.n	8003f76 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11d      	bne.n	8003f76 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d119      	bne.n	8003f76 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f50:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fc32 	bl	80047e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 020c 	mvn.w	r2, #12
 8003f84:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	bf0c      	ite	eq
 8003faa:	2301      	moveq	r3, #1
 8003fac:	2300      	movne	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d017      	beq.n	8003fe8 <HAL_ADC_IRQHandler+0x21a>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d014      	beq.n	8003fe8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d10d      	bne.n	8003fe8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f93d 	bl	8004258 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f06f 0201 	mvn.w	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	bf0c      	ite	eq
 8003ff6:	2301      	moveq	r3, #1
 8003ff8:	2300      	movne	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004008:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800400c:	bf0c      	ite	eq
 800400e:	2301      	moveq	r3, #1
 8004010:	2300      	movne	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d015      	beq.n	8004048 <HAL_ADC_IRQHandler+0x27a>
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d012      	beq.n	8004048 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f06f 0220 	mvn.w	r2, #32
 8004036:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f917 	bl	800426c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f06f 0220 	mvn.w	r2, #32
 8004046:	601a      	str	r2, [r3, #0]
  }
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_ADC_Start_DMA+0x1e>
 800406a:	2302      	movs	r3, #2
 800406c:	e0ce      	b.n	800420c <HAL_ADC_Start_DMA+0x1bc>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d018      	beq.n	80040b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0201 	orr.w	r2, r2, #1
 8004092:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004094:	4b5f      	ldr	r3, [pc, #380]	; (8004214 <HAL_ADC_Start_DMA+0x1c4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a5f      	ldr	r2, [pc, #380]	; (8004218 <HAL_ADC_Start_DMA+0x1c8>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0c9a      	lsrs	r2, r3, #18
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80040a8:	e002      	b.n	80040b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f9      	bne.n	80040aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c4:	d107      	bne.n	80040d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	f040 8086 	bne.w	80041f2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004110:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004124:	d106      	bne.n	8004134 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f023 0206 	bic.w	r2, r3, #6
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	645a      	str	r2, [r3, #68]	; 0x44
 8004132:	e002      	b.n	800413a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004142:	4b36      	ldr	r3, [pc, #216]	; (800421c <HAL_ADC_Start_DMA+0x1cc>)
 8004144:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	4a35      	ldr	r2, [pc, #212]	; (8004220 <HAL_ADC_Start_DMA+0x1d0>)
 800414c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	4a34      	ldr	r2, [pc, #208]	; (8004224 <HAL_ADC_Start_DMA+0x1d4>)
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	4a33      	ldr	r2, [pc, #204]	; (8004228 <HAL_ADC_Start_DMA+0x1d8>)
 800415c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004166:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004176:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004186:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	334c      	adds	r3, #76	; 0x4c
 8004192:	4619      	mov	r1, r3
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f000 fcec 	bl	8004b74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10f      	bne.n	80041c8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d129      	bne.n	800420a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041c4:	609a      	str	r2, [r3, #8]
 80041c6:	e020      	b.n	800420a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a17      	ldr	r2, [pc, #92]	; (800422c <HAL_ADC_Start_DMA+0x1dc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d11b      	bne.n	800420a <HAL_ADC_Start_DMA+0x1ba>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d114      	bne.n	800420a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	e00b      	b.n	800420a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f043 0210 	orr.w	r2, r3, #16
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	f043 0201 	orr.w	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	2000001c 	.word	0x2000001c
 8004218:	431bde83 	.word	0x431bde83
 800421c:	40012300 	.word	0x40012300
 8004220:	080046dd 	.word	0x080046dd
 8004224:	08004797 	.word	0x08004797
 8004228:	080047b3 	.word	0x080047b3
 800422c:	40012000 	.word	0x40012000

08004230 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_ADC_ConfigChannel+0x1c>
 8004298:	2302      	movs	r3, #2
 800429a:	e113      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x244>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b09      	cmp	r3, #9
 80042aa:	d925      	bls.n	80042f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68d9      	ldr	r1, [r3, #12]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	3b1e      	subs	r3, #30
 80042c2:	2207      	movs	r2, #7
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43da      	mvns	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	400a      	ands	r2, r1
 80042d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68d9      	ldr	r1, [r3, #12]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4618      	mov	r0, r3
 80042e4:	4603      	mov	r3, r0
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4403      	add	r3, r0
 80042ea:	3b1e      	subs	r3, #30
 80042ec:	409a      	lsls	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	e022      	b.n	800433e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6919      	ldr	r1, [r3, #16]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	2207      	movs	r2, #7
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43da      	mvns	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	400a      	ands	r2, r1
 800431a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6919      	ldr	r1, [r3, #16]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	4618      	mov	r0, r3
 800432e:	4603      	mov	r3, r0
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4403      	add	r3, r0
 8004334:	409a      	lsls	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b06      	cmp	r3, #6
 8004344:	d824      	bhi.n	8004390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	3b05      	subs	r3, #5
 8004358:	221f      	movs	r2, #31
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43da      	mvns	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	400a      	ands	r2, r1
 8004366:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	4618      	mov	r0, r3
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	3b05      	subs	r3, #5
 8004382:	fa00 f203 	lsl.w	r2, r0, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	635a      	str	r2, [r3, #52]	; 0x34
 800438e:	e04c      	b.n	800442a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b0c      	cmp	r3, #12
 8004396:	d824      	bhi.n	80043e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	3b23      	subs	r3, #35	; 0x23
 80043aa:	221f      	movs	r2, #31
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43da      	mvns	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	400a      	ands	r2, r1
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	4618      	mov	r0, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	3b23      	subs	r3, #35	; 0x23
 80043d4:	fa00 f203 	lsl.w	r2, r0, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
 80043e0:	e023      	b.n	800442a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	3b41      	subs	r3, #65	; 0x41
 80043f4:	221f      	movs	r2, #31
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43da      	mvns	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	400a      	ands	r2, r1
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	4618      	mov	r0, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	3b41      	subs	r3, #65	; 0x41
 800441e:	fa00 f203 	lsl.w	r2, r0, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800442a:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <HAL_ADC_ConfigChannel+0x250>)
 800442c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a28      	ldr	r2, [pc, #160]	; (80044d4 <HAL_ADC_ConfigChannel+0x254>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d10f      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x1d8>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b12      	cmp	r3, #18
 800443e:	d10b      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_ADC_ConfigChannel+0x254>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d12b      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x23a>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <HAL_ADC_ConfigChannel+0x258>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <HAL_ADC_ConfigChannel+0x1f4>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b11      	cmp	r3, #17
 8004472:	d122      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a11      	ldr	r2, [pc, #68]	; (80044d8 <HAL_ADC_ConfigChannel+0x258>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d111      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HAL_ADC_ConfigChannel+0x25c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a11      	ldr	r2, [pc, #68]	; (80044e0 <HAL_ADC_ConfigChannel+0x260>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	0c9a      	lsrs	r2, r3, #18
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044ac:	e002      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f9      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	40012300 	.word	0x40012300
 80044d4:	40012000 	.word	0x40012000
 80044d8:	10000012 	.word	0x10000012
 80044dc:	2000001c 	.word	0x2000001c
 80044e0:	431bde83 	.word	0x431bde83

080044e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ec:	4b79      	ldr	r3, [pc, #484]	; (80046d4 <ADC_Init+0x1f0>)
 80044ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	021a      	lsls	r2, r3, #8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800453c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6859      	ldr	r1, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800455e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6899      	ldr	r1, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	4a58      	ldr	r2, [pc, #352]	; (80046d8 <ADC_Init+0x1f4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d022      	beq.n	80045c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800458a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6899      	ldr	r1, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6899      	ldr	r1, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	e00f      	b.n	80045e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0202 	bic.w	r2, r2, #2
 80045f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6899      	ldr	r1, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	7e1b      	ldrb	r3, [r3, #24]
 80045fc:	005a      	lsls	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01b      	beq.n	8004648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800461e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800462e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	3b01      	subs	r3, #1
 800463c:	035a      	lsls	r2, r3, #13
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	e007      	b.n	8004658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004656:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	3b01      	subs	r3, #1
 8004674:	051a      	lsls	r2, r3, #20
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800468c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6899      	ldr	r1, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800469a:	025a      	lsls	r2, r3, #9
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6899      	ldr	r1, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	029a      	lsls	r2, r3, #10
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	40012300 	.word	0x40012300
 80046d8:	0f000001 	.word	0x0f000001

080046dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d13c      	bne.n	8004770 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d12b      	bne.n	8004768 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004714:	2b00      	cmp	r3, #0
 8004716:	d127      	bne.n	8004768 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004722:	2b00      	cmp	r3, #0
 8004724:	d006      	beq.n	8004734 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004730:	2b00      	cmp	r3, #0
 8004732:	d119      	bne.n	8004768 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0220 	bic.w	r2, r2, #32
 8004742:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d105      	bne.n	8004768 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004760:	f043 0201 	orr.w	r2, r3, #1
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff fd61 	bl	8004230 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800476e:	e00e      	b.n	800478e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fd75 	bl	800426c <HAL_ADC_ErrorCallback>
}
 8004782:	e004      	b.n	800478e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
}
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f7ff fd4d 	bl	8004244 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047aa:	bf00      	nop
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2240      	movs	r2, #64	; 0x40
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f043 0204 	orr.w	r2, r3, #4
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff fd4a 	bl	800426c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004804:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <__NVIC_SetPriorityGrouping+0x44>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004810:	4013      	ands	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800481c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <__NVIC_SetPriorityGrouping+0x44>)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	60d3      	str	r3, [r2, #12]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004840:	4b04      	ldr	r3, [pc, #16]	; (8004854 <__NVIC_GetPriorityGrouping+0x18>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	f003 0307 	and.w	r3, r3, #7
}
 800484a:	4618      	mov	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004866:	2b00      	cmp	r3, #0
 8004868:	db0b      	blt.n	8004882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	f003 021f 	and.w	r2, r3, #31
 8004870:	4907      	ldr	r1, [pc, #28]	; (8004890 <__NVIC_EnableIRQ+0x38>)
 8004872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2001      	movs	r0, #1
 800487a:	fa00 f202 	lsl.w	r2, r0, r2
 800487e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e100 	.word	0xe000e100

08004894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	6039      	str	r1, [r7, #0]
 800489e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	db0a      	blt.n	80048be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	490c      	ldr	r1, [pc, #48]	; (80048e0 <__NVIC_SetPriority+0x4c>)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	0112      	lsls	r2, r2, #4
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	440b      	add	r3, r1
 80048b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048bc:	e00a      	b.n	80048d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	4908      	ldr	r1, [pc, #32]	; (80048e4 <__NVIC_SetPriority+0x50>)
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	3b04      	subs	r3, #4
 80048cc:	0112      	lsls	r2, r2, #4
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	440b      	add	r3, r1
 80048d2:	761a      	strb	r2, [r3, #24]
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	e000e100 	.word	0xe000e100
 80048e4:	e000ed00 	.word	0xe000ed00

080048e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	; 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0307 	and.w	r3, r3, #7
 80048fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f1c3 0307 	rsb	r3, r3, #7
 8004902:	2b04      	cmp	r3, #4
 8004904:	bf28      	it	cs
 8004906:	2304      	movcs	r3, #4
 8004908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3304      	adds	r3, #4
 800490e:	2b06      	cmp	r3, #6
 8004910:	d902      	bls.n	8004918 <NVIC_EncodePriority+0x30>
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3b03      	subs	r3, #3
 8004916:	e000      	b.n	800491a <NVIC_EncodePriority+0x32>
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800491c:	f04f 32ff 	mov.w	r2, #4294967295
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43da      	mvns	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	401a      	ands	r2, r3
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004930:	f04f 31ff 	mov.w	r1, #4294967295
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fa01 f303 	lsl.w	r3, r1, r3
 800493a:	43d9      	mvns	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004940:	4313      	orrs	r3, r2
         );
}
 8004942:	4618      	mov	r0, r3
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3b01      	subs	r3, #1
 800495c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004960:	d301      	bcc.n	8004966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004962:	2301      	movs	r3, #1
 8004964:	e00f      	b.n	8004986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004966:	4a0a      	ldr	r2, [pc, #40]	; (8004990 <SysTick_Config+0x40>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3b01      	subs	r3, #1
 800496c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800496e:	210f      	movs	r1, #15
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	f7ff ff8e 	bl	8004894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <SysTick_Config+0x40>)
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800497e:	4b04      	ldr	r3, [pc, #16]	; (8004990 <SysTick_Config+0x40>)
 8004980:	2207      	movs	r2, #7
 8004982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	e000e010 	.word	0xe000e010

08004994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ff29 	bl	80047f4 <__NVIC_SetPriorityGrouping>
}
 80049a2:	bf00      	nop
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	4603      	mov	r3, r0
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049bc:	f7ff ff3e 	bl	800483c <__NVIC_GetPriorityGrouping>
 80049c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7ff ff8e 	bl	80048e8 <NVIC_EncodePriority>
 80049cc:	4602      	mov	r2, r0
 80049ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d2:	4611      	mov	r1, r2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ff5d 	bl	8004894 <__NVIC_SetPriority>
}
 80049da:	bf00      	nop
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	4603      	mov	r3, r0
 80049ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff ff31 	bl	8004858 <__NVIC_EnableIRQ>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ffa2 	bl	8004950 <SysTick_Config>
 8004a0c:	4603      	mov	r3, r0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a24:	f7ff f960 	bl	8003ce8 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e099      	b.n	8004b68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0201 	bic.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a54:	e00f      	b.n	8004a76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a56:	f7ff f947 	bl	8003ce8 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	d908      	bls.n	8004a76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2220      	movs	r2, #32
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e078      	b.n	8004b68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e8      	bne.n	8004a56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4b38      	ldr	r3, [pc, #224]	; (8004b70 <HAL_DMA_Init+0x158>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d107      	bne.n	8004ae0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0307 	bic.w	r3, r3, #7
 8004af6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d117      	bne.n	8004b3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00e      	beq.n	8004b3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fb0f 	bl	8005140 <DMA_CheckFifoParam>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2240      	movs	r2, #64	; 0x40
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b36:	2301      	movs	r3, #1
 8004b38:	e016      	b.n	8004b68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fac6 	bl	80050d4 <DMA_CalcBaseAndBitshift>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	223f      	movs	r2, #63	; 0x3f
 8004b52:	409a      	lsls	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	f010803f 	.word	0xf010803f

08004b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_DMA_Start_IT+0x26>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e040      	b.n	8004c1c <HAL_DMA_Start_IT+0xa8>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d12f      	bne.n	8004c0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 fa58 	bl	8005078 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bcc:	223f      	movs	r2, #63	; 0x3f
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0216 	orr.w	r2, r2, #22
 8004be2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
 8004bfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e005      	b.n	8004c1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
 8004c18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c32:	f7ff f859 	bl	8003ce8 <HAL_GetTick>
 8004c36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d008      	beq.n	8004c56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2280      	movs	r2, #128	; 0x80
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e052      	b.n	8004cfc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0216 	bic.w	r2, r2, #22
 8004c64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_DMA_Abort+0x62>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0208 	bic.w	r2, r2, #8
 8004c94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca6:	e013      	b.n	8004cd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ca8:	f7ff f81e 	bl	8003ce8 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b05      	cmp	r3, #5
 8004cb4:	d90c      	bls.n	8004cd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e015      	b.n	8004cfc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e4      	bne.n	8004ca8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce2:	223f      	movs	r2, #63	; 0x3f
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d004      	beq.n	8004d22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2280      	movs	r2, #128	; 0x80
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e00c      	b.n	8004d3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2205      	movs	r2, #5
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0201 	bic.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d54:	4b92      	ldr	r3, [pc, #584]	; (8004fa0 <HAL_DMA_IRQHandler+0x258>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a92      	ldr	r2, [pc, #584]	; (8004fa4 <HAL_DMA_IRQHandler+0x25c>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	0a9b      	lsrs	r3, r3, #10
 8004d60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d72:	2208      	movs	r2, #8
 8004d74:	409a      	lsls	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01a      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d013      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0204 	bic.w	r2, r2, #4
 8004d9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	2208      	movs	r2, #8
 8004da2:	409a      	lsls	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db8:	2201      	movs	r2, #1
 8004dba:	409a      	lsls	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d012      	beq.n	8004dea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00b      	beq.n	8004dea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f043 0202 	orr.w	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dee:	2204      	movs	r2, #4
 8004df0:	409a      	lsls	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d012      	beq.n	8004e20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00b      	beq.n	8004e20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e18:	f043 0204 	orr.w	r2, r3, #4
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e24:	2210      	movs	r2, #16
 8004e26:	409a      	lsls	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d043      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d03c      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	2210      	movs	r2, #16
 8004e44:	409a      	lsls	r2, r3
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d018      	beq.n	8004e8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d024      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
 8004e76:	e01f      	b.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01b      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
 8004e88:	e016      	b.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0208 	bic.w	r2, r2, #8
 8004ea6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 808e 	beq.w	8004fe6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8086 	beq.w	8004fe6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	2220      	movs	r2, #32
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b05      	cmp	r3, #5
 8004ef0:	d136      	bne.n	8004f60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0216 	bic.w	r2, r2, #22
 8004f00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <HAL_DMA_IRQHandler+0x1da>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0208 	bic.w	r2, r2, #8
 8004f30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f36:	223f      	movs	r2, #63	; 0x3f
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d07d      	beq.n	8005052 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
        }
        return;
 8004f5e:	e078      	b.n	8005052 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d01c      	beq.n	8004fa8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d108      	bne.n	8004f8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d030      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
 8004f8c:	e02b      	b.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d027      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
 8004f9e:	e022      	b.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
 8004fa0:	2000001c 	.word	0x2000001c
 8004fa4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10f      	bne.n	8004fd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0210 	bic.w	r2, r2, #16
 8004fc4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d032      	beq.n	8005054 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d022      	beq.n	8005040 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	3301      	adds	r3, #1
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	429a      	cmp	r2, r3
 800501c:	d307      	bcc.n	800502e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f2      	bne.n	8005012 <HAL_DMA_IRQHandler+0x2ca>
 800502c:	e000      	b.n	8005030 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800502e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
 8005050:	e000      	b.n	8005054 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005052:	bf00      	nop
    }
  }
}
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop

0800505c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800506a:	b2db      	uxtb	r3, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005094:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d108      	bne.n	80050b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050b6:	e007      	b.n	80050c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	3b10      	subs	r3, #16
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <DMA_CalcBaseAndBitshift+0x64>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	091b      	lsrs	r3, r3, #4
 80050ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050ee:	4a13      	ldr	r2, [pc, #76]	; (800513c <DMA_CalcBaseAndBitshift+0x68>)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d909      	bls.n	8005116 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	1d1a      	adds	r2, r3, #4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	659a      	str	r2, [r3, #88]	; 0x58
 8005114:	e007      	b.n	8005126 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800511e:	f023 0303 	bic.w	r3, r3, #3
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	aaaaaaab 	.word	0xaaaaaaab
 800513c:	0800ab30 	.word	0x0800ab30

08005140 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005150:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d11f      	bne.n	800519a <DMA_CheckFifoParam+0x5a>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d856      	bhi.n	800520e <DMA_CheckFifoParam+0xce>
 8005160:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <DMA_CheckFifoParam+0x28>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	08005179 	.word	0x08005179
 800516c:	0800518b 	.word	0x0800518b
 8005170:	08005179 	.word	0x08005179
 8005174:	0800520f 	.word	0x0800520f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d046      	beq.n	8005212 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005188:	e043      	b.n	8005212 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005192:	d140      	bne.n	8005216 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005198:	e03d      	b.n	8005216 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a2:	d121      	bne.n	80051e8 <DMA_CheckFifoParam+0xa8>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d837      	bhi.n	800521a <DMA_CheckFifoParam+0xda>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <DMA_CheckFifoParam+0x70>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051c1 	.word	0x080051c1
 80051b4:	080051c7 	.word	0x080051c7
 80051b8:	080051c1 	.word	0x080051c1
 80051bc:	080051d9 	.word	0x080051d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	73fb      	strb	r3, [r7, #15]
      break;
 80051c4:	e030      	b.n	8005228 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d025      	beq.n	800521e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d6:	e022      	b.n	800521e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051e0:	d11f      	bne.n	8005222 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051e6:	e01c      	b.n	8005222 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d903      	bls.n	80051f6 <DMA_CheckFifoParam+0xb6>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b03      	cmp	r3, #3
 80051f2:	d003      	beq.n	80051fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051f4:	e018      	b.n	8005228 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	73fb      	strb	r3, [r7, #15]
      break;
 80051fa:	e015      	b.n	8005228 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00e      	beq.n	8005226 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
      break;
 800520c:	e00b      	b.n	8005226 <DMA_CheckFifoParam+0xe6>
      break;
 800520e:	bf00      	nop
 8005210:	e00a      	b.n	8005228 <DMA_CheckFifoParam+0xe8>
      break;
 8005212:	bf00      	nop
 8005214:	e008      	b.n	8005228 <DMA_CheckFifoParam+0xe8>
      break;
 8005216:	bf00      	nop
 8005218:	e006      	b.n	8005228 <DMA_CheckFifoParam+0xe8>
      break;
 800521a:	bf00      	nop
 800521c:	e004      	b.n	8005228 <DMA_CheckFifoParam+0xe8>
      break;
 800521e:	bf00      	nop
 8005220:	e002      	b.n	8005228 <DMA_CheckFifoParam+0xe8>
      break;   
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <DMA_CheckFifoParam+0xe8>
      break;
 8005226:	bf00      	nop
    }
  } 
  
  return status; 
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop

08005238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005238:	b480      	push	{r7}
 800523a:	b089      	sub	sp, #36	; 0x24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005246:	2300      	movs	r3, #0
 8005248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800524a:	2300      	movs	r3, #0
 800524c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800524e:	2300      	movs	r3, #0
 8005250:	61fb      	str	r3, [r7, #28]
 8005252:	e159      	b.n	8005508 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005254:	2201      	movs	r2, #1
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4013      	ands	r3, r2
 8005266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	429a      	cmp	r2, r3
 800526e:	f040 8148 	bne.w	8005502 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b01      	cmp	r3, #1
 800527c:	d005      	beq.n	800528a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005286:	2b02      	cmp	r3, #2
 8005288:	d130      	bne.n	80052ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	2203      	movs	r2, #3
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	43db      	mvns	r3, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4013      	ands	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052c0:	2201      	movs	r2, #1
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	43db      	mvns	r3, r3
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	4013      	ands	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 0201 	and.w	r2, r3, #1
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d017      	beq.n	8005328 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	2203      	movs	r2, #3
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4013      	ands	r3, r2
 800530e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	4313      	orrs	r3, r2
 8005320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d123      	bne.n	800537c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	08da      	lsrs	r2, r3, #3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3208      	adds	r2, #8
 800533c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	220f      	movs	r2, #15
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	08da      	lsrs	r2, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3208      	adds	r2, #8
 8005376:	69b9      	ldr	r1, [r7, #24]
 8005378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	2203      	movs	r2, #3
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	4013      	ands	r3, r2
 8005392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 0203 	and.w	r2, r3, #3
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 80a2 	beq.w	8005502 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	4b57      	ldr	r3, [pc, #348]	; (8005520 <HAL_GPIO_Init+0x2e8>)
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	4a56      	ldr	r2, [pc, #344]	; (8005520 <HAL_GPIO_Init+0x2e8>)
 80053c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053cc:	6453      	str	r3, [r2, #68]	; 0x44
 80053ce:	4b54      	ldr	r3, [pc, #336]	; (8005520 <HAL_GPIO_Init+0x2e8>)
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053da:	4a52      	ldr	r2, [pc, #328]	; (8005524 <HAL_GPIO_Init+0x2ec>)
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	089b      	lsrs	r3, r3, #2
 80053e0:	3302      	adds	r3, #2
 80053e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	220f      	movs	r2, #15
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	43db      	mvns	r3, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4013      	ands	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a49      	ldr	r2, [pc, #292]	; (8005528 <HAL_GPIO_Init+0x2f0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d019      	beq.n	800543a <HAL_GPIO_Init+0x202>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a48      	ldr	r2, [pc, #288]	; (800552c <HAL_GPIO_Init+0x2f4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_GPIO_Init+0x1fe>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a47      	ldr	r2, [pc, #284]	; (8005530 <HAL_GPIO_Init+0x2f8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00d      	beq.n	8005432 <HAL_GPIO_Init+0x1fa>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a46      	ldr	r2, [pc, #280]	; (8005534 <HAL_GPIO_Init+0x2fc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d007      	beq.n	800542e <HAL_GPIO_Init+0x1f6>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a45      	ldr	r2, [pc, #276]	; (8005538 <HAL_GPIO_Init+0x300>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d101      	bne.n	800542a <HAL_GPIO_Init+0x1f2>
 8005426:	2304      	movs	r3, #4
 8005428:	e008      	b.n	800543c <HAL_GPIO_Init+0x204>
 800542a:	2307      	movs	r3, #7
 800542c:	e006      	b.n	800543c <HAL_GPIO_Init+0x204>
 800542e:	2303      	movs	r3, #3
 8005430:	e004      	b.n	800543c <HAL_GPIO_Init+0x204>
 8005432:	2302      	movs	r3, #2
 8005434:	e002      	b.n	800543c <HAL_GPIO_Init+0x204>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_GPIO_Init+0x204>
 800543a:	2300      	movs	r3, #0
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	f002 0203 	and.w	r2, r2, #3
 8005442:	0092      	lsls	r2, r2, #2
 8005444:	4093      	lsls	r3, r2
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4313      	orrs	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800544c:	4935      	ldr	r1, [pc, #212]	; (8005524 <HAL_GPIO_Init+0x2ec>)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	3302      	adds	r3, #2
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800545a:	4b38      	ldr	r3, [pc, #224]	; (800553c <HAL_GPIO_Init+0x304>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800547e:	4a2f      	ldr	r2, [pc, #188]	; (800553c <HAL_GPIO_Init+0x304>)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005484:	4b2d      	ldr	r3, [pc, #180]	; (800553c <HAL_GPIO_Init+0x304>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	43db      	mvns	r3, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4013      	ands	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054a8:	4a24      	ldr	r2, [pc, #144]	; (800553c <HAL_GPIO_Init+0x304>)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054ae:	4b23      	ldr	r3, [pc, #140]	; (800553c <HAL_GPIO_Init+0x304>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	43db      	mvns	r3, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4013      	ands	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054d2:	4a1a      	ldr	r2, [pc, #104]	; (800553c <HAL_GPIO_Init+0x304>)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054d8:	4b18      	ldr	r3, [pc, #96]	; (800553c <HAL_GPIO_Init+0x304>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054fc:	4a0f      	ldr	r2, [pc, #60]	; (800553c <HAL_GPIO_Init+0x304>)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3301      	adds	r3, #1
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b0f      	cmp	r3, #15
 800550c:	f67f aea2 	bls.w	8005254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	3724      	adds	r7, #36	; 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
 8005524:	40013800 	.word	0x40013800
 8005528:	40020000 	.word	0x40020000
 800552c:	40020400 	.word	0x40020400
 8005530:	40020800 	.word	0x40020800
 8005534:	40020c00 	.word	0x40020c00
 8005538:	40021000 	.word	0x40021000
 800553c:	40013c00 	.word	0x40013c00

08005540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	887b      	ldrh	r3, [r7, #2]
 8005552:	4013      	ands	r3, r2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
 800555c:	e001      	b.n	8005562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800555e:	2300      	movs	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005562:	7bfb      	ldrb	r3, [r7, #15]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	807b      	strh	r3, [r7, #2]
 800557c:	4613      	mov	r3, r2
 800557e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005580:	787b      	ldrb	r3, [r7, #1]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005586:	887a      	ldrh	r2, [r7, #2]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800558c:	e003      	b.n	8005596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800558e:	887b      	ldrh	r3, [r7, #2]
 8005590:	041a      	lsls	r2, r3, #16
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	619a      	str	r2, [r3, #24]
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80055ae:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	4013      	ands	r3, r2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d006      	beq.n	80055c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055ba:	4a05      	ldr	r2, [pc, #20]	; (80055d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055c0:	88fb      	ldrh	r3, [r7, #6]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fd f90e 	bl	80027e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40013c00 	.word	0x40013c00

080055d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e12b      	b.n	800583e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fe f878 	bl	80036f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2224      	movs	r2, #36	; 0x24
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0201 	bic.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005638:	f002 fd18 	bl	800806c <HAL_RCC_GetPCLK1Freq>
 800563c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4a81      	ldr	r2, [pc, #516]	; (8005848 <HAL_I2C_Init+0x274>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d807      	bhi.n	8005658 <HAL_I2C_Init+0x84>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a80      	ldr	r2, [pc, #512]	; (800584c <HAL_I2C_Init+0x278>)
 800564c:	4293      	cmp	r3, r2
 800564e:	bf94      	ite	ls
 8005650:	2301      	movls	r3, #1
 8005652:	2300      	movhi	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	e006      	b.n	8005666 <HAL_I2C_Init+0x92>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a7d      	ldr	r2, [pc, #500]	; (8005850 <HAL_I2C_Init+0x27c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	bf94      	ite	ls
 8005660:	2301      	movls	r3, #1
 8005662:	2300      	movhi	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e0e7      	b.n	800583e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4a78      	ldr	r2, [pc, #480]	; (8005854 <HAL_I2C_Init+0x280>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	0c9b      	lsrs	r3, r3, #18
 8005678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4a6a      	ldr	r2, [pc, #424]	; (8005848 <HAL_I2C_Init+0x274>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d802      	bhi.n	80056a8 <HAL_I2C_Init+0xd4>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	3301      	adds	r3, #1
 80056a6:	e009      	b.n	80056bc <HAL_I2C_Init+0xe8>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056ae:	fb02 f303 	mul.w	r3, r2, r3
 80056b2:	4a69      	ldr	r2, [pc, #420]	; (8005858 <HAL_I2C_Init+0x284>)
 80056b4:	fba2 2303 	umull	r2, r3, r2, r3
 80056b8:	099b      	lsrs	r3, r3, #6
 80056ba:	3301      	adds	r3, #1
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	430b      	orrs	r3, r1
 80056c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	495c      	ldr	r1, [pc, #368]	; (8005848 <HAL_I2C_Init+0x274>)
 80056d8:	428b      	cmp	r3, r1
 80056da:	d819      	bhi.n	8005710 <HAL_I2C_Init+0x13c>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	1e59      	subs	r1, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ea:	1c59      	adds	r1, r3, #1
 80056ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056f0:	400b      	ands	r3, r1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_I2C_Init+0x138>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1e59      	subs	r1, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	fbb1 f3f3 	udiv	r3, r1, r3
 8005704:	3301      	adds	r3, #1
 8005706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800570a:	e051      	b.n	80057b0 <HAL_I2C_Init+0x1dc>
 800570c:	2304      	movs	r3, #4
 800570e:	e04f      	b.n	80057b0 <HAL_I2C_Init+0x1dc>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d111      	bne.n	800573c <HAL_I2C_Init+0x168>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	1e58      	subs	r0, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6859      	ldr	r1, [r3, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	440b      	add	r3, r1
 8005726:	fbb0 f3f3 	udiv	r3, r0, r3
 800572a:	3301      	adds	r3, #1
 800572c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005730:	2b00      	cmp	r3, #0
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e012      	b.n	8005762 <HAL_I2C_Init+0x18e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	1e58      	subs	r0, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	0099      	lsls	r1, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005752:	3301      	adds	r3, #1
 8005754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_I2C_Init+0x196>
 8005766:	2301      	movs	r3, #1
 8005768:	e022      	b.n	80057b0 <HAL_I2C_Init+0x1dc>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10e      	bne.n	8005790 <HAL_I2C_Init+0x1bc>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1e58      	subs	r0, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6859      	ldr	r1, [r3, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	440b      	add	r3, r1
 8005780:	fbb0 f3f3 	udiv	r3, r0, r3
 8005784:	3301      	adds	r3, #1
 8005786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800578a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800578e:	e00f      	b.n	80057b0 <HAL_I2C_Init+0x1dc>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1e58      	subs	r0, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6859      	ldr	r1, [r3, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	0099      	lsls	r1, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057a6:	3301      	adds	r3, #1
 80057a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	6809      	ldr	r1, [r1, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6911      	ldr	r1, [r2, #16]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68d2      	ldr	r2, [r2, #12]
 80057ea:	4311      	orrs	r1, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	430b      	orrs	r3, r1
 80057f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	000186a0 	.word	0x000186a0
 800584c:	001e847f 	.word	0x001e847f
 8005850:	003d08ff 	.word	0x003d08ff
 8005854:	431bde83 	.word	0x431bde83
 8005858:	10624dd3 	.word	0x10624dd3

0800585c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	607a      	str	r2, [r7, #4]
 8005866:	461a      	mov	r2, r3
 8005868:	460b      	mov	r3, r1
 800586a:	817b      	strh	r3, [r7, #10]
 800586c:	4613      	mov	r3, r2
 800586e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005870:	f7fe fa3a 	bl	8003ce8 <HAL_GetTick>
 8005874:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b20      	cmp	r3, #32
 8005880:	f040 80e0 	bne.w	8005a44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	2319      	movs	r3, #25
 800588a:	2201      	movs	r2, #1
 800588c:	4970      	ldr	r1, [pc, #448]	; (8005a50 <HAL_I2C_Master_Transmit+0x1f4>)
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f001 fdcc 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800589a:	2302      	movs	r3, #2
 800589c:	e0d3      	b.n	8005a46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_I2C_Master_Transmit+0x50>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e0cc      	b.n	8005a46 <HAL_I2C_Master_Transmit+0x1ea>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d007      	beq.n	80058d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0201 	orr.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2221      	movs	r2, #33	; 0x21
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2210      	movs	r2, #16
 80058ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	893a      	ldrh	r2, [r7, #8]
 8005902:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a50      	ldr	r2, [pc, #320]	; (8005a54 <HAL_I2C_Master_Transmit+0x1f8>)
 8005912:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005914:	8979      	ldrh	r1, [r7, #10]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	6a3a      	ldr	r2, [r7, #32]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f001 fc5c 	bl	80071d8 <I2C_MasterRequestWrite>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e08d      	b.n	8005a46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005940:	e066      	b.n	8005a10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	6a39      	ldr	r1, [r7, #32]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f001 fe46 	bl	80075d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00d      	beq.n	800596e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	2b04      	cmp	r3, #4
 8005958:	d107      	bne.n	800596a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005968:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e06b      	b.n	8005a46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	781a      	ldrb	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d11b      	bne.n	80059e4 <HAL_I2C_Master_Transmit+0x188>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d017      	beq.n	80059e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	6a39      	ldr	r1, [r7, #32]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f001 fe36 	bl	800765a <I2C_WaitOnBTFFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00d      	beq.n	8005a10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d107      	bne.n	8005a0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e01a      	b.n	8005a46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d194      	bne.n	8005942 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e000      	b.n	8005a46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	00100002 	.word	0x00100002
 8005a54:	ffff0000 	.word	0xffff0000

08005a58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a78:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	2b10      	cmp	r3, #16
 8005a86:	d003      	beq.n	8005a90 <HAL_I2C_EV_IRQHandler+0x38>
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b40      	cmp	r3, #64	; 0x40
 8005a8c:	f040 80bd 	bne.w	8005c0a <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10d      	bne.n	8005ac6 <HAL_I2C_EV_IRQHandler+0x6e>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ab0:	d003      	beq.n	8005aba <HAL_I2C_EV_IRQHandler+0x62>
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ab8:	d101      	bne.n	8005abe <HAL_I2C_EV_IRQHandler+0x66>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_I2C_EV_IRQHandler+0x68>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f000 812e 	beq.w	8005d22 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00c      	beq.n	8005aea <HAL_I2C_EV_IRQHandler+0x92>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	0a5b      	lsrs	r3, r3, #9
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d006      	beq.n	8005aea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 fe5e 	bl	800779e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fd62 	bl	80065ac <I2C_Master_SB>
 8005ae8:	e08e      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	08db      	lsrs	r3, r3, #3
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d009      	beq.n	8005b0a <HAL_I2C_EV_IRQHandler+0xb2>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	0a5b      	lsrs	r3, r3, #9
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fdd8 	bl	80066b8 <I2C_Master_ADD10>
 8005b08:	e07e      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d009      	beq.n	8005b2a <HAL_I2C_EV_IRQHandler+0xd2>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	0a5b      	lsrs	r3, r3, #9
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fdf2 	bl	800670c <I2C_Master_ADDR>
 8005b28:	e06e      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	089b      	lsrs	r3, r3, #2
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d037      	beq.n	8005ba6 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b44:	f000 80ef 	beq.w	8005d26 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	09db      	lsrs	r3, r3, #7
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00f      	beq.n	8005b74 <HAL_I2C_EV_IRQHandler+0x11c>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	0a9b      	lsrs	r3, r3, #10
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <HAL_I2C_EV_IRQHandler+0x11c>
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d103      	bne.n	8005b74 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f9ef 	bl	8005f50 <I2C_MasterTransmit_TXE>
 8005b72:	e049      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	089b      	lsrs	r3, r3, #2
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80d2 	beq.w	8005d26 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	0a5b      	lsrs	r3, r3, #9
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80cb 	beq.w	8005d26 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	d103      	bne.n	8005b9e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa76 	bl	8006088 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b9c:	e0c3      	b.n	8005d26 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fada 	bl	8006158 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ba4:	e0bf      	b.n	8005d26 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb4:	f000 80b7 	beq.w	8005d26 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	099b      	lsrs	r3, r3, #6
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00f      	beq.n	8005be4 <HAL_I2C_EV_IRQHandler+0x18c>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	0a9b      	lsrs	r3, r3, #10
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d009      	beq.n	8005be4 <HAL_I2C_EV_IRQHandler+0x18c>
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	089b      	lsrs	r3, r3, #2
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fb4a 	bl	8006276 <I2C_MasterReceive_RXNE>
 8005be2:	e011      	b.n	8005c08 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	089b      	lsrs	r3, r3, #2
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 809a 	beq.w	8005d26 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	0a5b      	lsrs	r3, r3, #9
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8093 	beq.w	8005d26 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fbe9 	bl	80063d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c06:	e08e      	b.n	8005d26 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005c08:	e08d      	b.n	8005d26 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	61fb      	str	r3, [r7, #28]
 8005c1a:	e007      	b.n	8005c2c <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d012      	beq.n	8005c5e <HAL_I2C_EV_IRQHandler+0x206>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	0a5b      	lsrs	r3, r3, #9
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00c      	beq.n	8005c5e <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005c54:	69b9      	ldr	r1, [r7, #24]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 ffa7 	bl	8006baa <I2C_Slave_ADDR>
 8005c5c:	e066      	b.n	8005d2c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	091b      	lsrs	r3, r3, #4
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_I2C_EV_IRQHandler+0x226>
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	0a5b      	lsrs	r3, r3, #9
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 ffdc 	bl	8006c34 <I2C_Slave_STOPF>
 8005c7c:	e056      	b.n	8005d2c <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	2b21      	cmp	r3, #33	; 0x21
 8005c82:	d002      	beq.n	8005c8a <HAL_I2C_EV_IRQHandler+0x232>
 8005c84:	7bbb      	ldrb	r3, [r7, #14]
 8005c86:	2b29      	cmp	r3, #41	; 0x29
 8005c88:	d125      	bne.n	8005cd6 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	09db      	lsrs	r3, r3, #7
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00f      	beq.n	8005cb6 <HAL_I2C_EV_IRQHandler+0x25e>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	0a9b      	lsrs	r3, r3, #10
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <HAL_I2C_EV_IRQHandler+0x25e>
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d103      	bne.n	8005cb6 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 febd 	bl	8006a2e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cb4:	e039      	b.n	8005d2a <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	089b      	lsrs	r3, r3, #2
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d033      	beq.n	8005d2a <HAL_I2C_EV_IRQHandler+0x2d2>
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	0a5b      	lsrs	r3, r3, #9
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d02d      	beq.n	8005d2a <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 feea 	bl	8006aa8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cd4:	e029      	b.n	8005d2a <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	099b      	lsrs	r3, r3, #6
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00f      	beq.n	8005d02 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	0a9b      	lsrs	r3, r3, #10
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d009      	beq.n	8005d02 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	089b      	lsrs	r3, r3, #2
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fef5 	bl	8006aea <I2C_SlaveReceive_RXNE>
 8005d00:	e014      	b.n	8005d2c <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	089b      	lsrs	r3, r3, #2
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00e      	beq.n	8005d2c <HAL_I2C_EV_IRQHandler+0x2d4>
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	0a5b      	lsrs	r3, r3, #9
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 ff23 	bl	8006b66 <I2C_SlaveReceive_BTF>
 8005d20:	e004      	b.n	8005d2c <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8005d22:	bf00      	nop
 8005d24:	e002      	b.n	8005d2c <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d26:	bf00      	nop
 8005d28:	e000      	b.n	8005d2c <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d2a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b08a      	sub	sp, #40	; 0x28
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d54:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	0a1b      	lsrs	r3, r3, #8
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <HAL_I2C_ER_IRQHandler+0x4e>
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	0a1b      	lsrs	r3, r3, #8
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	f043 0301 	orr.w	r3, r3, #1
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d7e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	0a5b      	lsrs	r3, r3, #9
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00e      	beq.n	8005daa <HAL_I2C_ER_IRQHandler+0x78>
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	0a1b      	lsrs	r3, r3, #8
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	f043 0302 	orr.w	r3, r3, #2
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005da8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	0a9b      	lsrs	r3, r3, #10
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d03f      	beq.n	8005e36 <HAL_I2C_ER_IRQHandler+0x104>
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d039      	beq.n	8005e36 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005dc2:	7efb      	ldrb	r3, [r7, #27]
 8005dc4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005ddc:	7ebb      	ldrb	r3, [r7, #26]
 8005dde:	2b20      	cmp	r3, #32
 8005de0:	d112      	bne.n	8005e08 <HAL_I2C_ER_IRQHandler+0xd6>
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10f      	bne.n	8005e08 <HAL_I2C_ER_IRQHandler+0xd6>
 8005de8:	7cfb      	ldrb	r3, [r7, #19]
 8005dea:	2b21      	cmp	r3, #33	; 0x21
 8005dec:	d008      	beq.n	8005e00 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	2b29      	cmp	r3, #41	; 0x29
 8005df2:	d005      	beq.n	8005e00 <HAL_I2C_ER_IRQHandler+0xce>
 8005df4:	7cfb      	ldrb	r3, [r7, #19]
 8005df6:	2b28      	cmp	r3, #40	; 0x28
 8005df8:	d106      	bne.n	8005e08 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2b21      	cmp	r3, #33	; 0x21
 8005dfe:	d103      	bne.n	8005e08 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 f847 	bl	8006e94 <I2C_Slave_AF>
 8005e06:	e016      	b.n	8005e36 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e10:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	f043 0304 	orr.w	r3, r3, #4
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005e1a:	7efb      	ldrb	r3, [r7, #27]
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d002      	beq.n	8005e26 <HAL_I2C_ER_IRQHandler+0xf4>
 8005e20:	7efb      	ldrb	r3, [r7, #27]
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d107      	bne.n	8005e36 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e34:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	0adb      	lsrs	r3, r3, #11
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00e      	beq.n	8005e60 <HAL_I2C_ER_IRQHandler+0x12e>
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	0a1b      	lsrs	r3, r3, #8
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d008      	beq.n	8005e60 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	f043 0308 	orr.w	r3, r3, #8
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005e5e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d008      	beq.n	8005e78 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f001 f87e 	bl	8006f74 <I2C_ITError>
  }
}
 8005e78:	bf00      	nop
 8005e7a:	3728      	adds	r7, #40	; 0x28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	460b      	mov	r3, r1
 8005eda:	70fb      	strb	r3, [r7, #3]
 8005edc:	4613      	mov	r3, r2
 8005ede:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d150      	bne.n	8006018 <I2C_MasterTransmit_TXE+0xc8>
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b21      	cmp	r3, #33	; 0x21
 8005f7a:	d14d      	bne.n	8006018 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d01d      	beq.n	8005fbe <I2C_MasterTransmit_TXE+0x6e>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d01a      	beq.n	8005fbe <I2C_MasterTransmit_TXE+0x6e>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f8e:	d016      	beq.n	8005fbe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f9e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2211      	movs	r2, #17
 8005fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff ff62 	bl	8005e80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fbc:	e060      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fcc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fdc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d107      	bne.n	8006008 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff ff7d 	bl	8005f00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006006:	e03b      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff ff35 	bl	8005e80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006016:	e033      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b21      	cmp	r3, #33	; 0x21
 800601c:	d005      	beq.n	800602a <I2C_MasterTransmit_TXE+0xda>
 800601e:	7bbb      	ldrb	r3, [r7, #14]
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d12d      	bne.n	8006080 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	2b22      	cmp	r3, #34	; 0x22
 8006028:	d12a      	bne.n	8006080 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d108      	bne.n	8006046 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006042:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006044:	e01c      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d103      	bne.n	800605a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f880 	bl	8006158 <I2C_MemoryTransmit_TXE_BTF>
}
 8006058:	e012      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	781a      	ldrb	r2, [r3, #0]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800607e:	e7ff      	b.n	8006080 <I2C_MasterTransmit_TXE+0x130>
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b21      	cmp	r3, #33	; 0x21
 80060a0:	d156      	bne.n	8006150 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d012      	beq.n	80060d2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80060d0:	e03e      	b.n	8006150 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d01d      	beq.n	8006114 <I2C_MasterTransmit_BTF+0x8c>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2b20      	cmp	r3, #32
 80060dc:	d01a      	beq.n	8006114 <I2C_MasterTransmit_BTF+0x8c>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060e4:	d016      	beq.n	8006114 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060f4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2211      	movs	r2, #17
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff feb7 	bl	8005e80 <HAL_I2C_MasterTxCpltCallback>
}
 8006112:	e01d      	b.n	8006150 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006122:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006132:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fe98 	bl	8005e80 <HAL_I2C_MasterTxCpltCallback>
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006166:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	2b00      	cmp	r3, #0
 800616e:	d11d      	bne.n	80061ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006174:	2b01      	cmp	r3, #1
 8006176:	d10b      	bne.n	8006190 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617c:	b2da      	uxtb	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006188:	1c9a      	adds	r2, r3, #2
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800618e:	e06e      	b.n	800626e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006194:	b29b      	uxth	r3, r3
 8006196:	121b      	asrs	r3, r3, #8
 8006198:	b2da      	uxtb	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80061aa:	e060      	b.n	800626e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d10b      	bne.n	80061cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80061ca:	e050      	b.n	800626e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d14c      	bne.n	800626e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b22      	cmp	r3, #34	; 0x22
 80061d8:	d108      	bne.n	80061ec <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e8:	601a      	str	r2, [r3, #0]
}
 80061ea:	e040      	b.n	800626e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d015      	beq.n	8006222 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	2b21      	cmp	r3, #33	; 0x21
 80061fa:	d112      	bne.n	8006222 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	781a      	ldrb	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006220:	e025      	b.n	800626e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d120      	bne.n	800626e <I2C_MemoryTransmit_TXE_BTF+0x116>
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	2b21      	cmp	r3, #33	; 0x21
 8006230:	d11d      	bne.n	800626e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006240:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006250:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff fe49 	bl	8005f00 <HAL_I2C_MemTxCpltCallback>
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b22      	cmp	r3, #34	; 0x22
 8006288:	f040 80a2 	bne.w	80063d0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b03      	cmp	r3, #3
 8006298:	d921      	bls.n	80062de <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	f040 8082 	bne.w	80063d0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062da:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80062dc:	e078      	b.n	80063d0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d074      	beq.n	80063d0 <I2C_MasterReceive_RXNE+0x15a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d002      	beq.n	80062f2 <I2C_MasterReceive_RXNE+0x7c>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d16e      	bne.n	80063d0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 f9f2 	bl	80076dc <I2C_WaitOnSTOPRequestThroughIT>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d142      	bne.n	8006384 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800630c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800631c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d10a      	bne.n	800636e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff fdd4 	bl	8005f14 <HAL_I2C_MemRxCpltCallback>
}
 800636c:	e030      	b.n	80063d0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2212      	movs	r2, #18
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff fd89 	bl	8005e94 <HAL_I2C_MasterRxCpltCallback>
}
 8006382:	e025      	b.n	80063d0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006392:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff fdac 	bl	8005f28 <HAL_I2C_ErrorCallback>
}
 80063d0:	bf00      	nop
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d11b      	bne.n	8006428 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641c:	b29b      	uxth	r3, r3
 800641e:	3b01      	subs	r3, #1
 8006420:	b29a      	uxth	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006426:	e0bd      	b.n	80065a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b03      	cmp	r3, #3
 8006430:	d129      	bne.n	8006486 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006440:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b04      	cmp	r3, #4
 8006446:	d00a      	beq.n	800645e <I2C_MasterReceive_BTF+0x86>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d007      	beq.n	800645e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006484:	e08e      	b.n	80065a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648a:	b29b      	uxth	r3, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d176      	bne.n	800657e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d002      	beq.n	800649c <I2C_MasterReceive_BTF+0xc4>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2b10      	cmp	r3, #16
 800649a:	d108      	bne.n	80064ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	e019      	b.n	80064e2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d002      	beq.n	80064ba <I2C_MasterReceive_BTF+0xe2>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d108      	bne.n	80064cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	e00a      	b.n	80064e2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b10      	cmp	r3, #16
 80064d0:	d007      	beq.n	80064e2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800653c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b40      	cmp	r3, #64	; 0x40
 8006550:	d10a      	bne.n	8006568 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff fcd7 	bl	8005f14 <HAL_I2C_MemRxCpltCallback>
}
 8006566:	e01d      	b.n	80065a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2212      	movs	r2, #18
 8006574:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff fc8c 	bl	8005e94 <HAL_I2C_MasterRxCpltCallback>
}
 800657c:	e012      	b.n	80065a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659a:	b29b      	uxth	r3, r3
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80065a4:	bf00      	nop
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d117      	bne.n	80065f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80065da:	e067      	b.n	80066ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	611a      	str	r2, [r3, #16]
}
 80065ee:	e05d      	b.n	80066ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065f8:	d133      	bne.n	8006662 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b21      	cmp	r3, #33	; 0x21
 8006604:	d109      	bne.n	800661a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660a:	b2db      	uxtb	r3, r3
 800660c:	461a      	mov	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006616:	611a      	str	r2, [r3, #16]
 8006618:	e008      	b.n	800662c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	b2da      	uxtb	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <I2C_Master_SB+0x92>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d108      	bne.n	8006650 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	2b00      	cmp	r3, #0
 8006644:	d032      	beq.n	80066ac <I2C_Master_SB+0x100>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02d      	beq.n	80066ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800665e:	605a      	str	r2, [r3, #4]
}
 8006660:	e024      	b.n	80066ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10e      	bne.n	8006688 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	b29b      	uxth	r3, r3
 8006670:	11db      	asrs	r3, r3, #7
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 0306 	and.w	r3, r3, #6
 8006678:	b2db      	uxtb	r3, r3
 800667a:	f063 030f 	orn	r3, r3, #15
 800667e:	b2da      	uxtb	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	611a      	str	r2, [r3, #16]
}
 8006686:	e011      	b.n	80066ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668c:	2b01      	cmp	r3, #1
 800668e:	d10d      	bne.n	80066ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	b29b      	uxth	r3, r3
 8006696:	11db      	asrs	r3, r3, #7
 8006698:	b2db      	uxtb	r3, r3
 800669a:	f003 0306 	and.w	r3, r3, #6
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	f063 030e 	orn	r3, r3, #14
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	611a      	str	r2, [r3, #16]
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <I2C_Master_ADD10+0x26>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d108      	bne.n	80066f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <I2C_Master_ADD10+0x48>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066fe:	605a      	str	r2, [r3, #4]
  }
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800670c:	b480      	push	{r7}
 800670e:	b091      	sub	sp, #68	; 0x44
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800671a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b22      	cmp	r3, #34	; 0x22
 8006734:	f040 8169 	bne.w	8006a0a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10f      	bne.n	8006760 <I2C_Master_ADDR+0x54>
 8006740:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006744:	2b40      	cmp	r3, #64	; 0x40
 8006746:	d10b      	bne.n	8006760 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006748:	2300      	movs	r3, #0
 800674a:	633b      	str	r3, [r7, #48]	; 0x30
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	633b      	str	r3, [r7, #48]	; 0x30
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	633b      	str	r3, [r7, #48]	; 0x30
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	e160      	b.n	8006a22 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11d      	bne.n	80067a4 <I2C_Master_ADDR+0x98>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006770:	d118      	bne.n	80067a4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006772:	2300      	movs	r3, #0
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006786:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006796:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	651a      	str	r2, [r3, #80]	; 0x50
 80067a2:	e13e      	b.n	8006a22 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d113      	bne.n	80067d6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ae:	2300      	movs	r3, #0
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e115      	b.n	8006a02 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	f040 808a 	bne.w	80068f6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067e8:	d137      	bne.n	800685a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006808:	d113      	bne.n	8006832 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006818:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800681a:	2300      	movs	r3, #0
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	e0e7      	b.n	8006a02 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006832:	2300      	movs	r3, #0
 8006834:	623b      	str	r3, [r7, #32]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	623b      	str	r3, [r7, #32]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	623b      	str	r3, [r7, #32]
 8006846:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e0d3      	b.n	8006a02 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	2b08      	cmp	r3, #8
 800685e:	d02e      	beq.n	80068be <I2C_Master_ADDR+0x1b2>
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	2b20      	cmp	r3, #32
 8006864:	d02b      	beq.n	80068be <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006868:	2b12      	cmp	r3, #18
 800686a:	d102      	bne.n	8006872 <I2C_Master_ADDR+0x166>
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	2b01      	cmp	r3, #1
 8006870:	d125      	bne.n	80068be <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006874:	2b04      	cmp	r3, #4
 8006876:	d00e      	beq.n	8006896 <I2C_Master_ADDR+0x18a>
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	2b02      	cmp	r3, #2
 800687c:	d00b      	beq.n	8006896 <I2C_Master_ADDR+0x18a>
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	2b10      	cmp	r3, #16
 8006882:	d008      	beq.n	8006896 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e007      	b.n	80068a6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	e0a1      	b.n	8006a02 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068cc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ce:	2300      	movs	r3, #0
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	e085      	b.n	8006a02 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d14d      	bne.n	800699c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	2b04      	cmp	r3, #4
 8006904:	d016      	beq.n	8006934 <I2C_Master_ADDR+0x228>
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	2b02      	cmp	r3, #2
 800690a:	d013      	beq.n	8006934 <I2C_Master_ADDR+0x228>
 800690c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690e:	2b10      	cmp	r3, #16
 8006910:	d010      	beq.n	8006934 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006920:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	e007      	b.n	8006944 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006942:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800694e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006952:	d117      	bne.n	8006984 <I2C_Master_ADDR+0x278>
 8006954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006956:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800695a:	d00b      	beq.n	8006974 <I2C_Master_ADDR+0x268>
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	2b01      	cmp	r3, #1
 8006960:	d008      	beq.n	8006974 <I2C_Master_ADDR+0x268>
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	2b08      	cmp	r3, #8
 8006966:	d005      	beq.n	8006974 <I2C_Master_ADDR+0x268>
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	2b10      	cmp	r3, #16
 800696c:	d002      	beq.n	8006974 <I2C_Master_ADDR+0x268>
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	2b20      	cmp	r3, #32
 8006972:	d107      	bne.n	8006984 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006982:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	e032      	b.n	8006a02 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069aa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ba:	d117      	bne.n	80069ec <I2C_Master_ADDR+0x2e0>
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069c2:	d00b      	beq.n	80069dc <I2C_Master_ADDR+0x2d0>
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d008      	beq.n	80069dc <I2C_Master_ADDR+0x2d0>
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d005      	beq.n	80069dc <I2C_Master_ADDR+0x2d0>
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	2b10      	cmp	r3, #16
 80069d4:	d002      	beq.n	80069dc <I2C_Master_ADDR+0x2d0>
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	2b20      	cmp	r3, #32
 80069da:	d107      	bne.n	80069ec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80069ea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	613b      	str	r3, [r7, #16]
 8006a00:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006a08:	e00b      	b.n	8006a22 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	e7ff      	b.n	8006a22 <I2C_Master_ADDR+0x316>
 8006a22:	bf00      	nop
 8006a24:	3744      	adds	r7, #68	; 0x44
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d02b      	beq.n	8006aa0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	781a      	ldrb	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d114      	bne.n	8006aa0 <I2C_SlaveTransmit_TXE+0x72>
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b29      	cmp	r3, #41	; 0x29
 8006a7a:	d111      	bne.n	8006aa0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2221      	movs	r2, #33	; 0x21
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2228      	movs	r2, #40	; 0x28
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff fa04 	bl	8005ea8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d011      	beq.n	8006ade <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	781a      	ldrb	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d02c      	beq.n	8006b5e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d114      	bne.n	8006b5e <I2C_SlaveReceive_RXNE+0x74>
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b2a      	cmp	r3, #42	; 0x2a
 8006b38:	d111      	bne.n	8006b5e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2222      	movs	r2, #34	; 0x22
 8006b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2228      	movs	r2, #40	; 0x28
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7ff f9af 	bl	8005ebc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b5e:	bf00      	nop
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d012      	beq.n	8006b9e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006bc4:	2b28      	cmp	r3, #40	; 0x28
 8006bc6:	d127      	bne.n	8006c18 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	089b      	lsrs	r3, r3, #2
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006be4:	2301      	movs	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	09db      	lsrs	r3, r3, #7
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	81bb      	strh	r3, [r7, #12]
 8006bfa:	e002      	b.n	8006c02 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006c0a:	89ba      	ldrh	r2, [r7, #12]
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7ff f95d 	bl	8005ed0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006c16:	e008      	b.n	8006c2a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f06f 0202 	mvn.w	r2, #2
 8006c20:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006c2a:	bf00      	nop
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c42:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c52:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006c54:	2300      	movs	r3, #0
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0201 	orr.w	r2, r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c80:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c90:	d172      	bne.n	8006d78 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b22      	cmp	r3, #34	; 0x22
 8006c96:	d002      	beq.n	8006c9e <I2C_Slave_STOPF+0x6a>
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9c:	d135      	bne.n	8006d0a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	f043 0204 	orr.w	r2, r3, #4
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cd0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fe f9c0 	bl	800505c <HAL_DMA_GetState>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d049      	beq.n	8006d76 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce6:	4a69      	ldr	r2, [pc, #420]	; (8006e8c <I2C_Slave_STOPF+0x258>)
 8006ce8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe f808 	bl	8004d04 <HAL_DMA_Abort_IT>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d03d      	beq.n	8006d76 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d08:	e035      	b.n	8006d76 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	f043 0204 	orr.w	r2, r3, #4
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe f98a 	bl	800505c <HAL_DMA_GetState>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d014      	beq.n	8006d78 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d52:	4a4e      	ldr	r2, [pc, #312]	; (8006e8c <I2C_Slave_STOPF+0x258>)
 8006d54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fd ffd2 	bl	8004d04 <HAL_DMA_Abort_IT>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d008      	beq.n	8006d78 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	e000      	b.n	8006d78 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d76:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d03e      	beq.n	8006e00 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d112      	bne.n	8006db6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	691a      	ldr	r2, [r3, #16]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d112      	bne.n	8006dea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	b2d2      	uxtb	r2, r2
 8006dd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	f043 0204 	orr.w	r2, r3, #4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f8b3 	bl	8006f74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006e0e:	e039      	b.n	8006e84 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
 8006e12:	2b2a      	cmp	r3, #42	; 0x2a
 8006e14:	d109      	bne.n	8006e2a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2228      	movs	r2, #40	; 0x28
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7ff f849 	bl	8005ebc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b28      	cmp	r3, #40	; 0x28
 8006e34:	d111      	bne.n	8006e5a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <I2C_Slave_STOPF+0x25c>)
 8006e3a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff f84a 	bl	8005eec <HAL_I2C_ListenCpltCallback>
}
 8006e58:	e014      	b.n	8006e84 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5e:	2b22      	cmp	r3, #34	; 0x22
 8006e60:	d002      	beq.n	8006e68 <I2C_Slave_STOPF+0x234>
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	2b22      	cmp	r3, #34	; 0x22
 8006e66:	d10d      	bne.n	8006e84 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff f81c 	bl	8005ebc <HAL_I2C_SlaveRxCpltCallback>
}
 8006e84:	bf00      	nop
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	080072dd 	.word	0x080072dd
 8006e90:	ffff0000 	.word	0xffff0000

08006e94 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d002      	beq.n	8006eb6 <I2C_Slave_AF+0x22>
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	d129      	bne.n	8006f0a <I2C_Slave_AF+0x76>
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	2b28      	cmp	r3, #40	; 0x28
 8006eba:	d126      	bne.n	8006f0a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a2c      	ldr	r2, [pc, #176]	; (8006f70 <I2C_Slave_AF+0xdc>)
 8006ec0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ed0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006eda:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fe fff2 	bl	8005eec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006f08:	e02e      	b.n	8006f68 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	2b21      	cmp	r3, #33	; 0x21
 8006f0e:	d126      	bne.n	8006f5e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a17      	ldr	r2, [pc, #92]	; (8006f70 <I2C_Slave_AF+0xdc>)
 8006f14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2221      	movs	r2, #33	; 0x21
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f3a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f44:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f54:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fe ffa6 	bl	8005ea8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f5c:	e004      	b.n	8006f68 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f66:	615a      	str	r2, [r3, #20]
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	ffff0000 	.word	0xffff0000

08006f74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d002      	beq.n	8006f98 <I2C_ITError+0x24>
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	d10a      	bne.n	8006fae <I2C_ITError+0x3a>
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	2b22      	cmp	r3, #34	; 0x22
 8006f9c:	d107      	bne.n	8006fae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006fb4:	2b28      	cmp	r3, #40	; 0x28
 8006fb6:	d107      	bne.n	8006fc8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2228      	movs	r2, #40	; 0x28
 8006fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fc6:	e015      	b.n	8006ff4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd6:	d00a      	beq.n	8006fee <I2C_ITError+0x7a>
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	2b60      	cmp	r3, #96	; 0x60
 8006fdc:	d007      	beq.n	8006fee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007002:	d162      	bne.n	80070ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007012:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d020      	beq.n	8007064 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	4a6a      	ldr	r2, [pc, #424]	; (80071d0 <I2C_ITError+0x25c>)
 8007028:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	4618      	mov	r0, r3
 8007030:	f7fd fe68 	bl	8004d04 <HAL_DMA_Abort_IT>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 8089 	beq.w	800714e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0201 	bic.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800705e:	4610      	mov	r0, r2
 8007060:	4798      	blx	r3
 8007062:	e074      	b.n	800714e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	4a59      	ldr	r2, [pc, #356]	; (80071d0 <I2C_ITError+0x25c>)
 800706a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	4618      	mov	r0, r3
 8007072:	f7fd fe47 	bl	8004d04 <HAL_DMA_Abort_IT>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d068      	beq.n	800714e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007086:	2b40      	cmp	r3, #64	; 0x40
 8007088:	d10b      	bne.n	80070a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	b2d2      	uxtb	r2, r2
 8007096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070c4:	4610      	mov	r0, r2
 80070c6:	4798      	blx	r3
 80070c8:	e041      	b.n	800714e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b60      	cmp	r3, #96	; 0x60
 80070d4:	d125      	bne.n	8007122 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2220      	movs	r2, #32
 80070da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	d10b      	bne.n	800710a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7fe ff0e 	bl	8005f3c <HAL_I2C_AbortCpltCallback>
 8007120:	e015      	b.n	800714e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d10b      	bne.n	8007148 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7fe feed 	bl	8005f28 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10e      	bne.n	800717c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007164:	2b00      	cmp	r3, #0
 8007166:	d109      	bne.n	800717c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800718a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007192:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b04      	cmp	r3, #4
 800719e:	d113      	bne.n	80071c8 <I2C_ITError+0x254>
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
 80071a2:	2b28      	cmp	r3, #40	; 0x28
 80071a4:	d110      	bne.n	80071c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a0a      	ldr	r2, [pc, #40]	; (80071d4 <I2C_ITError+0x260>)
 80071aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fe fe92 	bl	8005eec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	080072dd 	.word	0x080072dd
 80071d4:	ffff0000 	.word	0xffff0000

080071d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af02      	add	r7, sp, #8
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	607a      	str	r2, [r7, #4]
 80071e2:	603b      	str	r3, [r7, #0]
 80071e4:	460b      	mov	r3, r1
 80071e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d006      	beq.n	8007202 <I2C_MasterRequestWrite+0x2a>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d003      	beq.n	8007202 <I2C_MasterRequestWrite+0x2a>
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007200:	d108      	bne.n	8007214 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	e00b      	b.n	800722c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	2b12      	cmp	r3, #18
 800721a:	d107      	bne.n	800722c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800722a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f8f7 	bl	800742c <I2C_WaitOnFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00d      	beq.n	8007260 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007252:	d103      	bne.n	800725c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800725a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e035      	b.n	80072cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007268:	d108      	bne.n	800727c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800726a:	897b      	ldrh	r3, [r7, #10]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	461a      	mov	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007278:	611a      	str	r2, [r3, #16]
 800727a:	e01b      	b.n	80072b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800727c:	897b      	ldrh	r3, [r7, #10]
 800727e:	11db      	asrs	r3, r3, #7
 8007280:	b2db      	uxtb	r3, r3
 8007282:	f003 0306 	and.w	r3, r3, #6
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f063 030f 	orn	r3, r3, #15
 800728c:	b2da      	uxtb	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	490e      	ldr	r1, [pc, #56]	; (80072d4 <I2C_MasterRequestWrite+0xfc>)
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f91d 	bl	80074da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e010      	b.n	80072cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80072aa:	897b      	ldrh	r3, [r7, #10]
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	4907      	ldr	r1, [pc, #28]	; (80072d8 <I2C_MasterRequestWrite+0x100>)
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f90d 	bl	80074da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	00010008 	.word	0x00010008
 80072d8:	00010002 	.word	0x00010002

080072dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80072f6:	4b4b      	ldr	r3, [pc, #300]	; (8007424 <I2C_DMAAbort+0x148>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	08db      	lsrs	r3, r3, #3
 80072fc:	4a4a      	ldr	r2, [pc, #296]	; (8007428 <I2C_DMAAbort+0x14c>)
 80072fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007302:	0a1a      	lsrs	r2, r3, #8
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	00da      	lsls	r2, r3, #3
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f043 0220 	orr.w	r2, r3, #32
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007322:	e00a      	b.n	800733a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3b01      	subs	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007338:	d0ea      	beq.n	8007310 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007346:	2200      	movs	r2, #0
 8007348:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	2200      	movs	r2, #0
 8007358:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007368:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2200      	movs	r2, #0
 800736e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737c:	2200      	movs	r2, #0
 800737e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738c:	2200      	movs	r2, #0
 800738e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b60      	cmp	r3, #96	; 0x60
 80073aa:	d10e      	bne.n	80073ca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2200      	movs	r2, #0
 80073c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80073c2:	6978      	ldr	r0, [r7, #20]
 80073c4:	f7fe fdba 	bl	8005f3c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073c8:	e027      	b.n	800741a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073ca:	7cfb      	ldrb	r3, [r7, #19]
 80073cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073d0:	2b28      	cmp	r3, #40	; 0x28
 80073d2:	d117      	bne.n	8007404 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2200      	movs	r2, #0
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2228      	movs	r2, #40	; 0x28
 80073fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007402:	e007      	b.n	8007414 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2220      	movs	r2, #32
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007414:	6978      	ldr	r0, [r7, #20]
 8007416:	f7fe fd87 	bl	8005f28 <HAL_I2C_ErrorCallback>
}
 800741a:	bf00      	nop
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	2000001c 	.word	0x2000001c
 8007428:	14f8b589 	.word	0x14f8b589

0800742c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	4613      	mov	r3, r2
 800743a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800743c:	e025      	b.n	800748a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007444:	d021      	beq.n	800748a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007446:	f7fc fc4f 	bl	8003ce8 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d302      	bcc.n	800745c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d116      	bne.n	800748a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2220      	movs	r2, #32
 8007466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	f043 0220 	orr.w	r2, r3, #32
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e023      	b.n	80074d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	0c1b      	lsrs	r3, r3, #16
 800748e:	b2db      	uxtb	r3, r3
 8007490:	2b01      	cmp	r3, #1
 8007492:	d10d      	bne.n	80074b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	43da      	mvns	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4013      	ands	r3, r2
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	bf0c      	ite	eq
 80074a6:	2301      	moveq	r3, #1
 80074a8:	2300      	movne	r3, #0
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	461a      	mov	r2, r3
 80074ae:	e00c      	b.n	80074ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	43da      	mvns	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4013      	ands	r3, r2
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	bf0c      	ite	eq
 80074c2:	2301      	moveq	r3, #1
 80074c4:	2300      	movne	r3, #0
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	461a      	mov	r2, r3
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d0b6      	beq.n	800743e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074e8:	e051      	b.n	800758e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f8:	d123      	bne.n	8007542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007508:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007512:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2220      	movs	r2, #32
 800751e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752e:	f043 0204 	orr.w	r2, r3, #4
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e046      	b.n	80075d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007548:	d021      	beq.n	800758e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800754a:	f7fc fbcd 	bl	8003ce8 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d302      	bcc.n	8007560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d116      	bne.n	800758e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f043 0220 	orr.w	r2, r3, #32
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e020      	b.n	80075d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	0c1b      	lsrs	r3, r3, #16
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b01      	cmp	r3, #1
 8007596:	d10c      	bne.n	80075b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	43da      	mvns	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4013      	ands	r3, r2
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bf14      	ite	ne
 80075aa:	2301      	movne	r3, #1
 80075ac:	2300      	moveq	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	e00b      	b.n	80075ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	43da      	mvns	r2, r3
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	4013      	ands	r3, r2
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bf14      	ite	ne
 80075c4:	2301      	movne	r3, #1
 80075c6:	2300      	moveq	r3, #0
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d18d      	bne.n	80074ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075e4:	e02d      	b.n	8007642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 f8aa 	bl	8007740 <I2C_IsAcknowledgeFailed>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e02d      	b.n	8007652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fc:	d021      	beq.n	8007642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fe:	f7fc fb73 	bl	8003ce8 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	429a      	cmp	r2, r3
 800760c:	d302      	bcc.n	8007614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d116      	bne.n	8007642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2220      	movs	r2, #32
 800761e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	f043 0220 	orr.w	r2, r3, #32
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e007      	b.n	8007652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764c:	2b80      	cmp	r3, #128	; 0x80
 800764e:	d1ca      	bne.n	80075e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007666:	e02d      	b.n	80076c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f869 	bl	8007740 <I2C_IsAcknowledgeFailed>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e02d      	b.n	80076d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d021      	beq.n	80076c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007680:	f7fc fb32 	bl	8003ce8 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	429a      	cmp	r2, r3
 800768e:	d302      	bcc.n	8007696 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d116      	bne.n	80076c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b0:	f043 0220 	orr.w	r2, r3, #32
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e007      	b.n	80076d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d1ca      	bne.n	8007668 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80076e8:	4b13      	ldr	r3, [pc, #76]	; (8007738 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	08db      	lsrs	r3, r3, #3
 80076ee:	4a13      	ldr	r2, [pc, #76]	; (800773c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80076f0:	fba2 2303 	umull	r2, r3, r2, r3
 80076f4:	0a1a      	lsrs	r2, r3, #8
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	3b01      	subs	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d107      	bne.n	800771a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f043 0220 	orr.w	r2, r3, #32
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e008      	b.n	800772c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007728:	d0e9      	beq.n	80076fe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	2000001c 	.word	0x2000001c
 800773c:	14f8b589 	.word	0x14f8b589

08007740 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007756:	d11b      	bne.n	8007790 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007760:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	f043 0204 	orr.w	r2, r3, #4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e000      	b.n	8007792 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80077ae:	d103      	bne.n	80077b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80077b6:	e007      	b.n	80077c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80077c0:	d102      	bne.n	80077c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2208      	movs	r2, #8
 80077c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e264      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d075      	beq.n	80078de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077f2:	4ba3      	ldr	r3, [pc, #652]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 030c 	and.w	r3, r3, #12
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d00c      	beq.n	8007818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077fe:	4ba0      	ldr	r3, [pc, #640]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007806:	2b08      	cmp	r3, #8
 8007808:	d112      	bne.n	8007830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800780a:	4b9d      	ldr	r3, [pc, #628]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007816:	d10b      	bne.n	8007830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007818:	4b99      	ldr	r3, [pc, #612]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d05b      	beq.n	80078dc <HAL_RCC_OscConfig+0x108>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d157      	bne.n	80078dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e23f      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007838:	d106      	bne.n	8007848 <HAL_RCC_OscConfig+0x74>
 800783a:	4b91      	ldr	r3, [pc, #580]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a90      	ldr	r2, [pc, #576]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	e01d      	b.n	8007884 <HAL_RCC_OscConfig+0xb0>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007850:	d10c      	bne.n	800786c <HAL_RCC_OscConfig+0x98>
 8007852:	4b8b      	ldr	r3, [pc, #556]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a8a      	ldr	r2, [pc, #552]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	4b88      	ldr	r3, [pc, #544]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a87      	ldr	r2, [pc, #540]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e00b      	b.n	8007884 <HAL_RCC_OscConfig+0xb0>
 800786c:	4b84      	ldr	r3, [pc, #528]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a83      	ldr	r2, [pc, #524]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	4b81      	ldr	r3, [pc, #516]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a80      	ldr	r2, [pc, #512]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 800787e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d013      	beq.n	80078b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800788c:	f7fc fa2c 	bl	8003ce8 <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007894:	f7fc fa28 	bl	8003ce8 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b64      	cmp	r3, #100	; 0x64
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e204      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078a6:	4b76      	ldr	r3, [pc, #472]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0f0      	beq.n	8007894 <HAL_RCC_OscConfig+0xc0>
 80078b2:	e014      	b.n	80078de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078b4:	f7fc fa18 	bl	8003ce8 <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078bc:	f7fc fa14 	bl	8003ce8 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b64      	cmp	r3, #100	; 0x64
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e1f0      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ce:	4b6c      	ldr	r3, [pc, #432]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f0      	bne.n	80078bc <HAL_RCC_OscConfig+0xe8>
 80078da:	e000      	b.n	80078de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d063      	beq.n	80079b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078ea:	4b65      	ldr	r3, [pc, #404]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 030c 	and.w	r3, r3, #12
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078f6:	4b62      	ldr	r3, [pc, #392]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078fe:	2b08      	cmp	r3, #8
 8007900:	d11c      	bne.n	800793c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007902:	4b5f      	ldr	r3, [pc, #380]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d116      	bne.n	800793c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800790e:	4b5c      	ldr	r3, [pc, #368]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <HAL_RCC_OscConfig+0x152>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d001      	beq.n	8007926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e1c4      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007926:	4b56      	ldr	r3, [pc, #344]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	4952      	ldr	r1, [pc, #328]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007936:	4313      	orrs	r3, r2
 8007938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800793a:	e03a      	b.n	80079b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d020      	beq.n	8007986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007944:	4b4f      	ldr	r3, [pc, #316]	; (8007a84 <HAL_RCC_OscConfig+0x2b0>)
 8007946:	2201      	movs	r2, #1
 8007948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794a:	f7fc f9cd 	bl	8003ce8 <HAL_GetTick>
 800794e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007950:	e008      	b.n	8007964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007952:	f7fc f9c9 	bl	8003ce8 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d901      	bls.n	8007964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e1a5      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007964:	4b46      	ldr	r3, [pc, #280]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0f0      	beq.n	8007952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007970:	4b43      	ldr	r3, [pc, #268]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	4940      	ldr	r1, [pc, #256]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007980:	4313      	orrs	r3, r2
 8007982:	600b      	str	r3, [r1, #0]
 8007984:	e015      	b.n	80079b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007986:	4b3f      	ldr	r3, [pc, #252]	; (8007a84 <HAL_RCC_OscConfig+0x2b0>)
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800798c:	f7fc f9ac 	bl	8003ce8 <HAL_GetTick>
 8007990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007992:	e008      	b.n	80079a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007994:	f7fc f9a8 	bl	8003ce8 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d901      	bls.n	80079a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e184      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079a6:	4b36      	ldr	r3, [pc, #216]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f0      	bne.n	8007994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0308 	and.w	r3, r3, #8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d030      	beq.n	8007a20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d016      	beq.n	80079f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079c6:	4b30      	ldr	r3, [pc, #192]	; (8007a88 <HAL_RCC_OscConfig+0x2b4>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079cc:	f7fc f98c 	bl	8003ce8 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079d4:	f7fc f988 	bl	8003ce8 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e164      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079e6:	4b26      	ldr	r3, [pc, #152]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 80079e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f0      	beq.n	80079d4 <HAL_RCC_OscConfig+0x200>
 80079f2:	e015      	b.n	8007a20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079f4:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <HAL_RCC_OscConfig+0x2b4>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079fa:	f7fc f975 	bl	8003ce8 <HAL_GetTick>
 80079fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a00:	e008      	b.n	8007a14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a02:	f7fc f971 	bl	8003ce8 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d901      	bls.n	8007a14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e14d      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a14:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1f0      	bne.n	8007a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80a0 	beq.w	8007b6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a32:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10f      	bne.n	8007a5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60bb      	str	r3, [r7, #8]
 8007a42:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	4a0e      	ldr	r2, [pc, #56]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a4e:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <HAL_RCC_OscConfig+0x2ac>)
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a56:	60bb      	str	r3, [r7, #8]
 8007a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a5e:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <HAL_RCC_OscConfig+0x2b8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d121      	bne.n	8007aae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a6a:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <HAL_RCC_OscConfig+0x2b8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a07      	ldr	r2, [pc, #28]	; (8007a8c <HAL_RCC_OscConfig+0x2b8>)
 8007a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a76:	f7fc f937 	bl	8003ce8 <HAL_GetTick>
 8007a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a7c:	e011      	b.n	8007aa2 <HAL_RCC_OscConfig+0x2ce>
 8007a7e:	bf00      	nop
 8007a80:	40023800 	.word	0x40023800
 8007a84:	42470000 	.word	0x42470000
 8007a88:	42470e80 	.word	0x42470e80
 8007a8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a90:	f7fc f92a 	bl	8003ce8 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e106      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aa2:	4b85      	ldr	r3, [pc, #532]	; (8007cb8 <HAL_RCC_OscConfig+0x4e4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0f0      	beq.n	8007a90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d106      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x2f0>
 8007ab6:	4b81      	ldr	r3, [pc, #516]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aba:	4a80      	ldr	r2, [pc, #512]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007abc:	f043 0301 	orr.w	r3, r3, #1
 8007ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ac2:	e01c      	b.n	8007afe <HAL_RCC_OscConfig+0x32a>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	2b05      	cmp	r3, #5
 8007aca:	d10c      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x312>
 8007acc:	4b7b      	ldr	r3, [pc, #492]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad0:	4a7a      	ldr	r2, [pc, #488]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007ad2:	f043 0304 	orr.w	r3, r3, #4
 8007ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ad8:	4b78      	ldr	r3, [pc, #480]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007adc:	4a77      	ldr	r2, [pc, #476]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007ade:	f043 0301 	orr.w	r3, r3, #1
 8007ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae4:	e00b      	b.n	8007afe <HAL_RCC_OscConfig+0x32a>
 8007ae6:	4b75      	ldr	r3, [pc, #468]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aea:	4a74      	ldr	r2, [pc, #464]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	6713      	str	r3, [r2, #112]	; 0x70
 8007af2:	4b72      	ldr	r3, [pc, #456]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af6:	4a71      	ldr	r2, [pc, #452]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007af8:	f023 0304 	bic.w	r3, r3, #4
 8007afc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d015      	beq.n	8007b32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b06:	f7fc f8ef 	bl	8003ce8 <HAL_GetTick>
 8007b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b0c:	e00a      	b.n	8007b24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b0e:	f7fc f8eb 	bl	8003ce8 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e0c5      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b24:	4b65      	ldr	r3, [pc, #404]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0ee      	beq.n	8007b0e <HAL_RCC_OscConfig+0x33a>
 8007b30:	e014      	b.n	8007b5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b32:	f7fc f8d9 	bl	8003ce8 <HAL_GetTick>
 8007b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b38:	e00a      	b.n	8007b50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b3a:	f7fc f8d5 	bl	8003ce8 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e0af      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b50:	4b5a      	ldr	r3, [pc, #360]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1ee      	bne.n	8007b3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d105      	bne.n	8007b6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b62:	4b56      	ldr	r3, [pc, #344]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	4a55      	ldr	r2, [pc, #340]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 809b 	beq.w	8007cae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b78:	4b50      	ldr	r3, [pc, #320]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f003 030c 	and.w	r3, r3, #12
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d05c      	beq.n	8007c3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d141      	bne.n	8007c10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b8c:	4b4c      	ldr	r3, [pc, #304]	; (8007cc0 <HAL_RCC_OscConfig+0x4ec>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b92:	f7fc f8a9 	bl	8003ce8 <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b98:	e008      	b.n	8007bac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b9a:	f7fc f8a5 	bl	8003ce8 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e081      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bac:	4b43      	ldr	r3, [pc, #268]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1f0      	bne.n	8007b9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69da      	ldr	r2, [r3, #28]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	019b      	lsls	r3, r3, #6
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	041b      	lsls	r3, r3, #16
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	061b      	lsls	r3, r3, #24
 8007bdc:	4937      	ldr	r1, [pc, #220]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007be2:	4b37      	ldr	r3, [pc, #220]	; (8007cc0 <HAL_RCC_OscConfig+0x4ec>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be8:	f7fc f87e 	bl	8003ce8 <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf0:	f7fc f87a 	bl	8003ce8 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e056      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c02:	4b2e      	ldr	r3, [pc, #184]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f0      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x41c>
 8007c0e:	e04e      	b.n	8007cae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c10:	4b2b      	ldr	r3, [pc, #172]	; (8007cc0 <HAL_RCC_OscConfig+0x4ec>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c16:	f7fc f867 	bl	8003ce8 <HAL_GetTick>
 8007c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c1c:	e008      	b.n	8007c30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c1e:	f7fc f863 	bl	8003ce8 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e03f      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c30:	4b22      	ldr	r3, [pc, #136]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f0      	bne.n	8007c1e <HAL_RCC_OscConfig+0x44a>
 8007c3c:	e037      	b.n	8007cae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d101      	bne.n	8007c4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e032      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c4a:	4b1c      	ldr	r3, [pc, #112]	; (8007cbc <HAL_RCC_OscConfig+0x4e8>)
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d028      	beq.n	8007caa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d121      	bne.n	8007caa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d11a      	bne.n	8007caa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d111      	bne.n	8007caa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	3b01      	subs	r3, #1
 8007c94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d107      	bne.n	8007caa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d001      	beq.n	8007cae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40007000 	.word	0x40007000
 8007cbc:	40023800 	.word	0x40023800
 8007cc0:	42470060 	.word	0x42470060

08007cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0cc      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd8:	4b68      	ldr	r3, [pc, #416]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0307 	and.w	r3, r3, #7
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d90c      	bls.n	8007d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce6:	4b65      	ldr	r3, [pc, #404]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cee:	4b63      	ldr	r3, [pc, #396]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d001      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e0b8      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d020      	beq.n	8007d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d18:	4b59      	ldr	r3, [pc, #356]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	4a58      	ldr	r2, [pc, #352]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0308 	and.w	r3, r3, #8
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d30:	4b53      	ldr	r3, [pc, #332]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	4a52      	ldr	r2, [pc, #328]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d3c:	4b50      	ldr	r3, [pc, #320]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	494d      	ldr	r1, [pc, #308]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d044      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d107      	bne.n	8007d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d62:	4b47      	ldr	r3, [pc, #284]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d119      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e07f      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d003      	beq.n	8007d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d107      	bne.n	8007d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d82:	4b3f      	ldr	r3, [pc, #252]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d109      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e06f      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d92:	4b3b      	ldr	r3, [pc, #236]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e067      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007da2:	4b37      	ldr	r3, [pc, #220]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f023 0203 	bic.w	r2, r3, #3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	4934      	ldr	r1, [pc, #208]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007db4:	f7fb ff98 	bl	8003ce8 <HAL_GetTick>
 8007db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dba:	e00a      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dbc:	f7fb ff94 	bl	8003ce8 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e04f      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dd2:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f003 020c 	and.w	r2, r3, #12
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d1eb      	bne.n	8007dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007de4:	4b25      	ldr	r3, [pc, #148]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d20c      	bcs.n	8007e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df2:	4b22      	ldr	r3, [pc, #136]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dfa:	4b20      	ldr	r3, [pc, #128]	; (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d001      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e032      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e18:	4b19      	ldr	r3, [pc, #100]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	4916      	ldr	r1, [pc, #88]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0308 	and.w	r3, r3, #8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d009      	beq.n	8007e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e36:	4b12      	ldr	r3, [pc, #72]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	490e      	ldr	r1, [pc, #56]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e4a:	f000 f821 	bl	8007e90 <HAL_RCC_GetSysClockFreq>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	091b      	lsrs	r3, r3, #4
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	490a      	ldr	r1, [pc, #40]	; (8007e84 <HAL_RCC_ClockConfig+0x1c0>)
 8007e5c:	5ccb      	ldrb	r3, [r1, r3]
 8007e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e62:	4a09      	ldr	r2, [pc, #36]	; (8007e88 <HAL_RCC_ClockConfig+0x1c4>)
 8007e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e66:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <HAL_RCC_ClockConfig+0x1c8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fb fef8 	bl	8003c60 <HAL_InitTick>

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40023c00 	.word	0x40023c00
 8007e80:	40023800 	.word	0x40023800
 8007e84:	0800ab18 	.word	0x0800ab18
 8007e88:	2000001c 	.word	0x2000001c
 8007e8c:	20000020 	.word	0x20000020

08007e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	607b      	str	r3, [r7, #4]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ea8:	4b67      	ldr	r3, [pc, #412]	; (8008048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 030c 	and.w	r3, r3, #12
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d00d      	beq.n	8007ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	f200 80bd 	bhi.w	8008034 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d003      	beq.n	8007eca <HAL_RCC_GetSysClockFreq+0x3a>
 8007ec2:	e0b7      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ec4:	4b61      	ldr	r3, [pc, #388]	; (800804c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007ec6:	60bb      	str	r3, [r7, #8]
       break;
 8007ec8:	e0b7      	b.n	800803a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007eca:	4b61      	ldr	r3, [pc, #388]	; (8008050 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007ecc:	60bb      	str	r3, [r7, #8]
      break;
 8007ece:	e0b4      	b.n	800803a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ed0:	4b5d      	ldr	r3, [pc, #372]	; (8008048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ed8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007eda:	4b5b      	ldr	r3, [pc, #364]	; (8008048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d04d      	beq.n	8007f82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ee6:	4b58      	ldr	r3, [pc, #352]	; (8008048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	099b      	lsrs	r3, r3, #6
 8007eec:	461a      	mov	r2, r3
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ef6:	f04f 0100 	mov.w	r1, #0
 8007efa:	ea02 0800 	and.w	r8, r2, r0
 8007efe:	ea03 0901 	and.w	r9, r3, r1
 8007f02:	4640      	mov	r0, r8
 8007f04:	4649      	mov	r1, r9
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	f04f 0300 	mov.w	r3, #0
 8007f0e:	014b      	lsls	r3, r1, #5
 8007f10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f14:	0142      	lsls	r2, r0, #5
 8007f16:	4610      	mov	r0, r2
 8007f18:	4619      	mov	r1, r3
 8007f1a:	ebb0 0008 	subs.w	r0, r0, r8
 8007f1e:	eb61 0109 	sbc.w	r1, r1, r9
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	f04f 0300 	mov.w	r3, #0
 8007f2a:	018b      	lsls	r3, r1, #6
 8007f2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f30:	0182      	lsls	r2, r0, #6
 8007f32:	1a12      	subs	r2, r2, r0
 8007f34:	eb63 0301 	sbc.w	r3, r3, r1
 8007f38:	f04f 0000 	mov.w	r0, #0
 8007f3c:	f04f 0100 	mov.w	r1, #0
 8007f40:	00d9      	lsls	r1, r3, #3
 8007f42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f46:	00d0      	lsls	r0, r2, #3
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	eb12 0208 	adds.w	r2, r2, r8
 8007f50:	eb43 0309 	adc.w	r3, r3, r9
 8007f54:	f04f 0000 	mov.w	r0, #0
 8007f58:	f04f 0100 	mov.w	r1, #0
 8007f5c:	0259      	lsls	r1, r3, #9
 8007f5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007f62:	0250      	lsls	r0, r2, #9
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	f7f8 ff4e 	bl	8000e14 <__aeabi_uldivmod>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	e04a      	b.n	8008018 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f82:	4b31      	ldr	r3, [pc, #196]	; (8008048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	099b      	lsrs	r3, r3, #6
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f92:	f04f 0100 	mov.w	r1, #0
 8007f96:	ea02 0400 	and.w	r4, r2, r0
 8007f9a:	ea03 0501 	and.w	r5, r3, r1
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	014b      	lsls	r3, r1, #5
 8007fac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007fb0:	0142      	lsls	r2, r0, #5
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	1b00      	subs	r0, r0, r4
 8007fb8:	eb61 0105 	sbc.w	r1, r1, r5
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	018b      	lsls	r3, r1, #6
 8007fc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007fca:	0182      	lsls	r2, r0, #6
 8007fcc:	1a12      	subs	r2, r2, r0
 8007fce:	eb63 0301 	sbc.w	r3, r3, r1
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f04f 0100 	mov.w	r1, #0
 8007fda:	00d9      	lsls	r1, r3, #3
 8007fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fe0:	00d0      	lsls	r0, r2, #3
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	1912      	adds	r2, r2, r4
 8007fe8:	eb45 0303 	adc.w	r3, r5, r3
 8007fec:	f04f 0000 	mov.w	r0, #0
 8007ff0:	f04f 0100 	mov.w	r1, #0
 8007ff4:	0299      	lsls	r1, r3, #10
 8007ff6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007ffa:	0290      	lsls	r0, r2, #10
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	460b      	mov	r3, r1
 8008000:	4610      	mov	r0, r2
 8008002:	4619      	mov	r1, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	461a      	mov	r2, r3
 8008008:	f04f 0300 	mov.w	r3, #0
 800800c:	f7f8 ff02 	bl	8000e14 <__aeabi_uldivmod>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4613      	mov	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008018:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	0c1b      	lsrs	r3, r3, #16
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	3301      	adds	r3, #1
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008030:	60bb      	str	r3, [r7, #8]
      break;
 8008032:	e002      	b.n	800803a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008034:	4b05      	ldr	r3, [pc, #20]	; (800804c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008036:	60bb      	str	r3, [r7, #8]
      break;
 8008038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800803a:	68bb      	ldr	r3, [r7, #8]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008046:	bf00      	nop
 8008048:	40023800 	.word	0x40023800
 800804c:	00f42400 	.word	0x00f42400
 8008050:	007a1200 	.word	0x007a1200

08008054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008058:	4b03      	ldr	r3, [pc, #12]	; (8008068 <HAL_RCC_GetHCLKFreq+0x14>)
 800805a:	681b      	ldr	r3, [r3, #0]
}
 800805c:	4618      	mov	r0, r3
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	2000001c 	.word	0x2000001c

0800806c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008070:	f7ff fff0 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 8008074:	4602      	mov	r2, r0
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	0a9b      	lsrs	r3, r3, #10
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	4903      	ldr	r1, [pc, #12]	; (8008090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008082:	5ccb      	ldrb	r3, [r1, r3]
 8008084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008088:	4618      	mov	r0, r3
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40023800 	.word	0x40023800
 8008090:	0800ab28 	.word	0x0800ab28

08008094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008098:	f7ff ffdc 	bl	8008054 <HAL_RCC_GetHCLKFreq>
 800809c:	4602      	mov	r2, r0
 800809e:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	0b5b      	lsrs	r3, r3, #13
 80080a4:	f003 0307 	and.w	r3, r3, #7
 80080a8:	4903      	ldr	r1, [pc, #12]	; (80080b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080aa:	5ccb      	ldrb	r3, [r1, r3]
 80080ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	40023800 	.word	0x40023800
 80080b8:	0800ab28 	.word	0x0800ab28

080080bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e041      	b.n	8008152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d106      	bne.n	80080e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7fb fb5c 	bl	80037a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f000 fdda 	bl	8008cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b01      	cmp	r3, #1
 800816e:	d001      	beq.n	8008174 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e03c      	b.n	80081ee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a1e      	ldr	r2, [pc, #120]	; (80081fc <HAL_TIM_Base_Start+0xa0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d018      	beq.n	80081b8 <HAL_TIM_Base_Start+0x5c>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818e:	d013      	beq.n	80081b8 <HAL_TIM_Base_Start+0x5c>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a1a      	ldr	r2, [pc, #104]	; (8008200 <HAL_TIM_Base_Start+0xa4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00e      	beq.n	80081b8 <HAL_TIM_Base_Start+0x5c>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a19      	ldr	r2, [pc, #100]	; (8008204 <HAL_TIM_Base_Start+0xa8>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d009      	beq.n	80081b8 <HAL_TIM_Base_Start+0x5c>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a17      	ldr	r2, [pc, #92]	; (8008208 <HAL_TIM_Base_Start+0xac>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d004      	beq.n	80081b8 <HAL_TIM_Base_Start+0x5c>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a16      	ldr	r2, [pc, #88]	; (800820c <HAL_TIM_Base_Start+0xb0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d111      	bne.n	80081dc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 0307 	and.w	r3, r3, #7
 80081c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2b06      	cmp	r3, #6
 80081c8:	d010      	beq.n	80081ec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f042 0201 	orr.w	r2, r2, #1
 80081d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081da:	e007      	b.n	80081ec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40010000 	.word	0x40010000
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40014000 	.word	0x40014000

08008210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b01      	cmp	r3, #1
 8008222:	d001      	beq.n	8008228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e044      	b.n	80082b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a1e      	ldr	r2, [pc, #120]	; (80082c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d018      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x6c>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008252:	d013      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x6c>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a1a      	ldr	r2, [pc, #104]	; (80082c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00e      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x6c>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a19      	ldr	r2, [pc, #100]	; (80082c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d009      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x6c>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a17      	ldr	r2, [pc, #92]	; (80082cc <HAL_TIM_Base_Start_IT+0xbc>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d004      	beq.n	800827c <HAL_TIM_Base_Start_IT+0x6c>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a16      	ldr	r2, [pc, #88]	; (80082d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d111      	bne.n	80082a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b06      	cmp	r3, #6
 800828c:	d010      	beq.n	80082b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f042 0201 	orr.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800829e:	e007      	b.n	80082b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0201 	orr.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	40010000 	.word	0x40010000
 80082c4:	40000400 	.word	0x40000400
 80082c8:	40000800 	.word	0x40000800
 80082cc:	40000c00 	.word	0x40000c00
 80082d0:	40014000 	.word	0x40014000

080082d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e041      	b.n	800836a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f839 	bl	8008372 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3304      	adds	r3, #4
 8008310:	4619      	mov	r1, r3
 8008312:	4610      	mov	r0, r2
 8008314:	f000 fcce 	bl	8008cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800837a:	bf00      	nop
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
	...

08008388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d109      	bne.n	80083ac <HAL_TIM_PWM_Start+0x24>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	bf14      	ite	ne
 80083a4:	2301      	movne	r3, #1
 80083a6:	2300      	moveq	r3, #0
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	e022      	b.n	80083f2 <HAL_TIM_PWM_Start+0x6a>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d109      	bne.n	80083c6 <HAL_TIM_PWM_Start+0x3e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	bf14      	ite	ne
 80083be:	2301      	movne	r3, #1
 80083c0:	2300      	moveq	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	e015      	b.n	80083f2 <HAL_TIM_PWM_Start+0x6a>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d109      	bne.n	80083e0 <HAL_TIM_PWM_Start+0x58>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	bf14      	ite	ne
 80083d8:	2301      	movne	r3, #1
 80083da:	2300      	moveq	r3, #0
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	e008      	b.n	80083f2 <HAL_TIM_PWM_Start+0x6a>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	bf14      	ite	ne
 80083ec:	2301      	movne	r3, #1
 80083ee:	2300      	moveq	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e068      	b.n	80084cc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <HAL_TIM_PWM_Start+0x82>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008408:	e013      	b.n	8008432 <HAL_TIM_PWM_Start+0xaa>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b04      	cmp	r3, #4
 800840e:	d104      	bne.n	800841a <HAL_TIM_PWM_Start+0x92>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008418:	e00b      	b.n	8008432 <HAL_TIM_PWM_Start+0xaa>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d104      	bne.n	800842a <HAL_TIM_PWM_Start+0xa2>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008428:	e003      	b.n	8008432 <HAL_TIM_PWM_Start+0xaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2202      	movs	r2, #2
 800842e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2201      	movs	r2, #1
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fee0 	bl	8009200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a23      	ldr	r2, [pc, #140]	; (80084d4 <HAL_TIM_PWM_Start+0x14c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d107      	bne.n	800845a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008458:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a1d      	ldr	r2, [pc, #116]	; (80084d4 <HAL_TIM_PWM_Start+0x14c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d018      	beq.n	8008496 <HAL_TIM_PWM_Start+0x10e>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800846c:	d013      	beq.n	8008496 <HAL_TIM_PWM_Start+0x10e>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a19      	ldr	r2, [pc, #100]	; (80084d8 <HAL_TIM_PWM_Start+0x150>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d00e      	beq.n	8008496 <HAL_TIM_PWM_Start+0x10e>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a17      	ldr	r2, [pc, #92]	; (80084dc <HAL_TIM_PWM_Start+0x154>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d009      	beq.n	8008496 <HAL_TIM_PWM_Start+0x10e>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a16      	ldr	r2, [pc, #88]	; (80084e0 <HAL_TIM_PWM_Start+0x158>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d004      	beq.n	8008496 <HAL_TIM_PWM_Start+0x10e>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a14      	ldr	r2, [pc, #80]	; (80084e4 <HAL_TIM_PWM_Start+0x15c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d111      	bne.n	80084ba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	d010      	beq.n	80084ca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0201 	orr.w	r2, r2, #1
 80084b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b8:	e007      	b.n	80084ca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f042 0201 	orr.w	r2, r2, #1
 80084c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	40010000 	.word	0x40010000
 80084d8:	40000400 	.word	0x40000400
 80084dc:	40000800 	.word	0x40000800
 80084e0:	40000c00 	.word	0x40000c00
 80084e4:	40014000 	.word	0x40014000

080084e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e097      	b.n	800862c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008502:	b2db      	uxtb	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d106      	bne.n	8008516 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7fb f9a7 	bl	8003864 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2202      	movs	r2, #2
 800851a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800852c:	f023 0307 	bic.w	r3, r3, #7
 8008530:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3304      	adds	r3, #4
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f000 fbb9 	bl	8008cb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800856a:	f023 0303 	bic.w	r3, r3, #3
 800856e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	4313      	orrs	r3, r2
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	4313      	orrs	r3, r2
 8008580:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008588:	f023 030c 	bic.w	r3, r3, #12
 800858c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	4313      	orrs	r3, r2
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	011a      	lsls	r2, r3, #4
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	031b      	lsls	r3, r3, #12
 80085b8:	4313      	orrs	r3, r2
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	4313      	orrs	r3, r2
 80085be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80085c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80085ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	4313      	orrs	r3, r2
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008644:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800864c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008654:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800865c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d110      	bne.n	8008686 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d102      	bne.n	8008670 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800866a:	7b7b      	ldrb	r3, [r7, #13]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d001      	beq.n	8008674 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e069      	b.n	8008748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2202      	movs	r2, #2
 8008678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008684:	e031      	b.n	80086ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b04      	cmp	r3, #4
 800868a:	d110      	bne.n	80086ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d102      	bne.n	8008698 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008692:	7b3b      	ldrb	r3, [r7, #12]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d001      	beq.n	800869c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e055      	b.n	8008748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086ac:	e01d      	b.n	80086ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d108      	bne.n	80086c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80086b4:	7bbb      	ldrb	r3, [r7, #14]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d105      	bne.n	80086c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80086ba:	7b7b      	ldrb	r3, [r7, #13]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d102      	bne.n	80086c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80086c0:	7b3b      	ldrb	r3, [r7, #12]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d001      	beq.n	80086ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e03e      	b.n	8008748 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2202      	movs	r2, #2
 80086ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2202      	movs	r2, #2
 80086d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2202      	movs	r2, #2
 80086de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d003      	beq.n	80086f8 <HAL_TIM_Encoder_Start+0xc4>
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d008      	beq.n	8008708 <HAL_TIM_Encoder_Start+0xd4>
 80086f6:	e00f      	b.n	8008718 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2201      	movs	r2, #1
 80086fe:	2100      	movs	r1, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fd7d 	bl	8009200 <TIM_CCxChannelCmd>
      break;
 8008706:	e016      	b.n	8008736 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2201      	movs	r2, #1
 800870e:	2104      	movs	r1, #4
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fd75 	bl	8009200 <TIM_CCxChannelCmd>
      break;
 8008716:	e00e      	b.n	8008736 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2201      	movs	r2, #1
 800871e:	2100      	movs	r1, #0
 8008720:	4618      	mov	r0, r3
 8008722:	f000 fd6d 	bl	8009200 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2201      	movs	r2, #1
 800872c:	2104      	movs	r1, #4
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fd66 	bl	8009200 <TIM_CCxChannelCmd>
      break;
 8008734:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 0201 	orr.w	r2, r2, #1
 8008744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b02      	cmp	r3, #2
 8008764:	d122      	bne.n	80087ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b02      	cmp	r3, #2
 8008772:	d11b      	bne.n	80087ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0202 	mvn.w	r2, #2
 800877c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f003 0303 	and.w	r3, r3, #3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa70 	bl	8008c78 <HAL_TIM_IC_CaptureCallback>
 8008798:	e005      	b.n	80087a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fa62 	bl	8008c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fa73 	bl	8008c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0304 	and.w	r3, r3, #4
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d122      	bne.n	8008800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b04      	cmp	r3, #4
 80087c6:	d11b      	bne.n	8008800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0204 	mvn.w	r2, #4
 80087d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2202      	movs	r2, #2
 80087d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fa46 	bl	8008c78 <HAL_TIM_IC_CaptureCallback>
 80087ec:	e005      	b.n	80087fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fa38 	bl	8008c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fa49 	bl	8008c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b08      	cmp	r3, #8
 800880c:	d122      	bne.n	8008854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0308 	and.w	r3, r3, #8
 8008818:	2b08      	cmp	r3, #8
 800881a:	d11b      	bne.n	8008854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0208 	mvn.w	r2, #8
 8008824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2204      	movs	r2, #4
 800882a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fa1c 	bl	8008c78 <HAL_TIM_IC_CaptureCallback>
 8008840:	e005      	b.n	800884e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fa0e 	bl	8008c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa1f 	bl	8008c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f003 0310 	and.w	r3, r3, #16
 800885e:	2b10      	cmp	r3, #16
 8008860:	d122      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b10      	cmp	r3, #16
 800886e:	d11b      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f06f 0210 	mvn.w	r2, #16
 8008878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2208      	movs	r2, #8
 800887e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f9f2 	bl	8008c78 <HAL_TIM_IC_CaptureCallback>
 8008894:	e005      	b.n	80088a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f9e4 	bl	8008c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f9f5 	bl	8008c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d10e      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0301 	and.w	r3, r3, #1
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d107      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0201 	mvn.w	r2, #1
 80088cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fa f94a 	bl	8002b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088de:	2b80      	cmp	r3, #128	; 0x80
 80088e0:	d10e      	bne.n	8008900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ec:	2b80      	cmp	r3, #128	; 0x80
 80088ee:	d107      	bne.n	8008900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fd1e 	bl	800933c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890a:	2b40      	cmp	r3, #64	; 0x40
 800890c:	d10e      	bne.n	800892c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008918:	2b40      	cmp	r3, #64	; 0x40
 800891a:	d107      	bne.n	800892c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9ba 	bl	8008ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0320 	and.w	r3, r3, #32
 8008936:	2b20      	cmp	r3, #32
 8008938:	d10e      	bne.n	8008958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f003 0320 	and.w	r3, r3, #32
 8008944:	2b20      	cmp	r3, #32
 8008946:	d107      	bne.n	8008958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f06f 0220 	mvn.w	r2, #32
 8008950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fce8 	bl	8009328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008976:	2302      	movs	r3, #2
 8008978:	e0ac      	b.n	8008ad4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b0c      	cmp	r3, #12
 8008986:	f200 809f 	bhi.w	8008ac8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800898a:	a201      	add	r2, pc, #4	; (adr r2, 8008990 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	080089c5 	.word	0x080089c5
 8008994:	08008ac9 	.word	0x08008ac9
 8008998:	08008ac9 	.word	0x08008ac9
 800899c:	08008ac9 	.word	0x08008ac9
 80089a0:	08008a05 	.word	0x08008a05
 80089a4:	08008ac9 	.word	0x08008ac9
 80089a8:	08008ac9 	.word	0x08008ac9
 80089ac:	08008ac9 	.word	0x08008ac9
 80089b0:	08008a47 	.word	0x08008a47
 80089b4:	08008ac9 	.word	0x08008ac9
 80089b8:	08008ac9 	.word	0x08008ac9
 80089bc:	08008ac9 	.word	0x08008ac9
 80089c0:	08008a87 	.word	0x08008a87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68b9      	ldr	r1, [r7, #8]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 f9f2 	bl	8008db4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f042 0208 	orr.w	r2, r2, #8
 80089de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699a      	ldr	r2, [r3, #24]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0204 	bic.w	r2, r2, #4
 80089ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6999      	ldr	r1, [r3, #24]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	691a      	ldr	r2, [r3, #16]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	619a      	str	r2, [r3, #24]
      break;
 8008a02:	e062      	b.n	8008aca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fa38 	bl	8008e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	699a      	ldr	r2, [r3, #24]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699a      	ldr	r2, [r3, #24]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6999      	ldr	r1, [r3, #24]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	021a      	lsls	r2, r3, #8
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	430a      	orrs	r2, r1
 8008a42:	619a      	str	r2, [r3, #24]
      break;
 8008a44:	e041      	b.n	8008aca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fa83 	bl	8008f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0208 	orr.w	r2, r2, #8
 8008a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69da      	ldr	r2, [r3, #28]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 0204 	bic.w	r2, r2, #4
 8008a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69d9      	ldr	r1, [r3, #28]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	691a      	ldr	r2, [r3, #16]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	61da      	str	r2, [r3, #28]
      break;
 8008a84:	e021      	b.n	8008aca <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f000 facd 	bl	800902c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	69da      	ldr	r2, [r3, #28]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69da      	ldr	r2, [r3, #28]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	69d9      	ldr	r1, [r3, #28]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	021a      	lsls	r2, r3, #8
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	61da      	str	r2, [r3, #28]
      break;
 8008ac6:	e000      	b.n	8008aca <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008ac8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_TIM_ConfigClockSource+0x18>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e0b3      	b.n	8008c5c <HAL_TIM_ConfigClockSource+0x180>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2202      	movs	r2, #2
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b2c:	d03e      	beq.n	8008bac <HAL_TIM_ConfigClockSource+0xd0>
 8008b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b32:	f200 8087 	bhi.w	8008c44 <HAL_TIM_ConfigClockSource+0x168>
 8008b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b3a:	f000 8085 	beq.w	8008c48 <HAL_TIM_ConfigClockSource+0x16c>
 8008b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b42:	d87f      	bhi.n	8008c44 <HAL_TIM_ConfigClockSource+0x168>
 8008b44:	2b70      	cmp	r3, #112	; 0x70
 8008b46:	d01a      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0xa2>
 8008b48:	2b70      	cmp	r3, #112	; 0x70
 8008b4a:	d87b      	bhi.n	8008c44 <HAL_TIM_ConfigClockSource+0x168>
 8008b4c:	2b60      	cmp	r3, #96	; 0x60
 8008b4e:	d050      	beq.n	8008bf2 <HAL_TIM_ConfigClockSource+0x116>
 8008b50:	2b60      	cmp	r3, #96	; 0x60
 8008b52:	d877      	bhi.n	8008c44 <HAL_TIM_ConfigClockSource+0x168>
 8008b54:	2b50      	cmp	r3, #80	; 0x50
 8008b56:	d03c      	beq.n	8008bd2 <HAL_TIM_ConfigClockSource+0xf6>
 8008b58:	2b50      	cmp	r3, #80	; 0x50
 8008b5a:	d873      	bhi.n	8008c44 <HAL_TIM_ConfigClockSource+0x168>
 8008b5c:	2b40      	cmp	r3, #64	; 0x40
 8008b5e:	d058      	beq.n	8008c12 <HAL_TIM_ConfigClockSource+0x136>
 8008b60:	2b40      	cmp	r3, #64	; 0x40
 8008b62:	d86f      	bhi.n	8008c44 <HAL_TIM_ConfigClockSource+0x168>
 8008b64:	2b30      	cmp	r3, #48	; 0x30
 8008b66:	d064      	beq.n	8008c32 <HAL_TIM_ConfigClockSource+0x156>
 8008b68:	2b30      	cmp	r3, #48	; 0x30
 8008b6a:	d86b      	bhi.n	8008c44 <HAL_TIM_ConfigClockSource+0x168>
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d060      	beq.n	8008c32 <HAL_TIM_ConfigClockSource+0x156>
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	d867      	bhi.n	8008c44 <HAL_TIM_ConfigClockSource+0x168>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d05c      	beq.n	8008c32 <HAL_TIM_ConfigClockSource+0x156>
 8008b78:	2b10      	cmp	r3, #16
 8008b7a:	d05a      	beq.n	8008c32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008b7c:	e062      	b.n	8008c44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6899      	ldr	r1, [r3, #8]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f000 fb17 	bl	80091c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ba0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	609a      	str	r2, [r3, #8]
      break;
 8008baa:	e04e      	b.n	8008c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6818      	ldr	r0, [r3, #0]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	6899      	ldr	r1, [r3, #8]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	f000 fb00 	bl	80091c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bce:	609a      	str	r2, [r3, #8]
      break;
 8008bd0:	e03b      	b.n	8008c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	6859      	ldr	r1, [r3, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	461a      	mov	r2, r3
 8008be0:	f000 fa74 	bl	80090cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2150      	movs	r1, #80	; 0x50
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 facd 	bl	800918a <TIM_ITRx_SetConfig>
      break;
 8008bf0:	e02b      	b.n	8008c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	6859      	ldr	r1, [r3, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f000 fa93 	bl	800912a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2160      	movs	r1, #96	; 0x60
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fabd 	bl	800918a <TIM_ITRx_SetConfig>
      break;
 8008c10:	e01b      	b.n	8008c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6818      	ldr	r0, [r3, #0]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	6859      	ldr	r1, [r3, #4]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f000 fa54 	bl	80090cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2140      	movs	r1, #64	; 0x40
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 faad 	bl	800918a <TIM_ITRx_SetConfig>
      break;
 8008c30:	e00b      	b.n	8008c4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	f000 faa4 	bl	800918a <TIM_ITRx_SetConfig>
        break;
 8008c42:	e002      	b.n	8008c4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008c44:	bf00      	nop
 8008c46:	e000      	b.n	8008c4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008c48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a34      	ldr	r2, [pc, #208]	; (8008d98 <TIM_Base_SetConfig+0xe4>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d00f      	beq.n	8008cec <TIM_Base_SetConfig+0x38>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd2:	d00b      	beq.n	8008cec <TIM_Base_SetConfig+0x38>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a31      	ldr	r2, [pc, #196]	; (8008d9c <TIM_Base_SetConfig+0xe8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d007      	beq.n	8008cec <TIM_Base_SetConfig+0x38>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a30      	ldr	r2, [pc, #192]	; (8008da0 <TIM_Base_SetConfig+0xec>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d003      	beq.n	8008cec <TIM_Base_SetConfig+0x38>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a2f      	ldr	r2, [pc, #188]	; (8008da4 <TIM_Base_SetConfig+0xf0>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d108      	bne.n	8008cfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a25      	ldr	r2, [pc, #148]	; (8008d98 <TIM_Base_SetConfig+0xe4>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d01b      	beq.n	8008d3e <TIM_Base_SetConfig+0x8a>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d0c:	d017      	beq.n	8008d3e <TIM_Base_SetConfig+0x8a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a22      	ldr	r2, [pc, #136]	; (8008d9c <TIM_Base_SetConfig+0xe8>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d013      	beq.n	8008d3e <TIM_Base_SetConfig+0x8a>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a21      	ldr	r2, [pc, #132]	; (8008da0 <TIM_Base_SetConfig+0xec>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00f      	beq.n	8008d3e <TIM_Base_SetConfig+0x8a>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a20      	ldr	r2, [pc, #128]	; (8008da4 <TIM_Base_SetConfig+0xf0>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d00b      	beq.n	8008d3e <TIM_Base_SetConfig+0x8a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a1f      	ldr	r2, [pc, #124]	; (8008da8 <TIM_Base_SetConfig+0xf4>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d007      	beq.n	8008d3e <TIM_Base_SetConfig+0x8a>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a1e      	ldr	r2, [pc, #120]	; (8008dac <TIM_Base_SetConfig+0xf8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d003      	beq.n	8008d3e <TIM_Base_SetConfig+0x8a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a1d      	ldr	r2, [pc, #116]	; (8008db0 <TIM_Base_SetConfig+0xfc>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d108      	bne.n	8008d50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a08      	ldr	r2, [pc, #32]	; (8008d98 <TIM_Base_SetConfig+0xe4>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d103      	bne.n	8008d84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	691a      	ldr	r2, [r3, #16]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	615a      	str	r2, [r3, #20]
}
 8008d8a:	bf00      	nop
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40010000 	.word	0x40010000
 8008d9c:	40000400 	.word	0x40000400
 8008da0:	40000800 	.word	0x40000800
 8008da4:	40000c00 	.word	0x40000c00
 8008da8:	40014000 	.word	0x40014000
 8008dac:	40014400 	.word	0x40014400
 8008db0:	40014800 	.word	0x40014800

08008db4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	f023 0201 	bic.w	r2, r3, #1
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f023 0303 	bic.w	r3, r3, #3
 8008dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f023 0302 	bic.w	r3, r3, #2
 8008dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a1c      	ldr	r2, [pc, #112]	; (8008e7c <TIM_OC1_SetConfig+0xc8>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d10c      	bne.n	8008e2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f023 0308 	bic.w	r3, r3, #8
 8008e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	f023 0304 	bic.w	r3, r3, #4
 8008e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a13      	ldr	r2, [pc, #76]	; (8008e7c <TIM_OC1_SetConfig+0xc8>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d111      	bne.n	8008e56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	621a      	str	r2, [r3, #32]
}
 8008e70:	bf00      	nop
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	40010000 	.word	0x40010000

08008e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	f023 0210 	bic.w	r2, r3, #16
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	021b      	lsls	r3, r3, #8
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f023 0320 	bic.w	r3, r3, #32
 8008eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	011b      	lsls	r3, r3, #4
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a1e      	ldr	r2, [pc, #120]	; (8008f54 <TIM_OC2_SetConfig+0xd4>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d10d      	bne.n	8008efc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	011b      	lsls	r3, r3, #4
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a15      	ldr	r2, [pc, #84]	; (8008f54 <TIM_OC2_SetConfig+0xd4>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d113      	bne.n	8008f2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	695b      	ldr	r3, [r3, #20]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	621a      	str	r2, [r3, #32]
}
 8008f46:	bf00      	nop
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	40010000 	.word	0x40010000

08008f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0303 	bic.w	r3, r3, #3
 8008f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	021b      	lsls	r3, r3, #8
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a1d      	ldr	r2, [pc, #116]	; (8009028 <TIM_OC3_SetConfig+0xd0>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d10d      	bne.n	8008fd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	021b      	lsls	r3, r3, #8
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a14      	ldr	r2, [pc, #80]	; (8009028 <TIM_OC3_SetConfig+0xd0>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d113      	bne.n	8009002 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	011b      	lsls	r3, r3, #4
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	011b      	lsls	r3, r3, #4
 8008ffc:	693a      	ldr	r2, [r7, #16]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	693a      	ldr	r2, [r7, #16]
 8009006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	621a      	str	r2, [r3, #32]
}
 800901c:	bf00      	nop
 800901e:	371c      	adds	r7, #28
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	40010000 	.word	0x40010000

0800902c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800905a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	021b      	lsls	r3, r3, #8
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	4313      	orrs	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	031b      	lsls	r3, r3, #12
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a10      	ldr	r2, [pc, #64]	; (80090c8 <TIM_OC4_SetConfig+0x9c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d109      	bne.n	80090a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009092:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	695b      	ldr	r3, [r3, #20]
 8009098:	019b      	lsls	r3, r3, #6
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	4313      	orrs	r3, r2
 800909e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	621a      	str	r2, [r3, #32]
}
 80090ba:	bf00      	nop
 80090bc:	371c      	adds	r7, #28
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	40010000 	.word	0x40010000

080090cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	f023 0201 	bic.w	r2, r3, #1
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f023 030a 	bic.w	r3, r3, #10
 8009108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	4313      	orrs	r3, r2
 8009110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	621a      	str	r2, [r3, #32]
}
 800911e:	bf00      	nop
 8009120:	371c      	adds	r7, #28
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800912a:	b480      	push	{r7}
 800912c:	b087      	sub	sp, #28
 800912e:	af00      	add	r7, sp, #0
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	60b9      	str	r1, [r7, #8]
 8009134:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	f023 0210 	bic.w	r2, r3, #16
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	699b      	ldr	r3, [r3, #24]
 8009146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009154:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	031b      	lsls	r3, r3, #12
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	4313      	orrs	r3, r2
 800915e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009166:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	011b      	lsls	r3, r3, #4
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	4313      	orrs	r3, r2
 8009170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	621a      	str	r2, [r3, #32]
}
 800917e:	bf00      	nop
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800918a:	b480      	push	{r7}
 800918c:	b085      	sub	sp, #20
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	f043 0307 	orr.w	r3, r3, #7
 80091ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	609a      	str	r2, [r3, #8]
}
 80091b4:	bf00      	nop
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	021a      	lsls	r2, r3, #8
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	609a      	str	r2, [r3, #8]
}
 80091f4:	bf00      	nop
 80091f6:	371c      	adds	r7, #28
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f003 031f 	and.w	r3, r3, #31
 8009212:	2201      	movs	r2, #1
 8009214:	fa02 f303 	lsl.w	r3, r2, r3
 8009218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6a1a      	ldr	r2, [r3, #32]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	43db      	mvns	r3, r3
 8009222:	401a      	ands	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a1a      	ldr	r2, [r3, #32]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f003 031f 	and.w	r3, r3, #31
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	fa01 f303 	lsl.w	r3, r1, r3
 8009238:	431a      	orrs	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	621a      	str	r2, [r3, #32]
}
 800923e:	bf00      	nop
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
	...

0800924c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009260:	2302      	movs	r3, #2
 8009262:	e050      	b.n	8009306 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4313      	orrs	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a1c      	ldr	r2, [pc, #112]	; (8009314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d018      	beq.n	80092da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092b0:	d013      	beq.n	80092da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a18      	ldr	r2, [pc, #96]	; (8009318 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00e      	beq.n	80092da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a16      	ldr	r2, [pc, #88]	; (800931c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d009      	beq.n	80092da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a15      	ldr	r2, [pc, #84]	; (8009320 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d004      	beq.n	80092da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a13      	ldr	r2, [pc, #76]	; (8009324 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d10c      	bne.n	80092f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	40010000 	.word	0x40010000
 8009318:	40000400 	.word	0x40000400
 800931c:	40000800 	.word	0x40000800
 8009320:	40000c00 	.word	0x40000c00
 8009324:	40014000 	.word	0x40014000

08009328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e03f      	b.n	80093e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fa fafe 	bl	8003978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2224      	movs	r2, #36	; 0x24
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68da      	ldr	r2, [r3, #12]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc7b 	bl	8009c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691a      	ldr	r2, [r3, #16]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	695a      	ldr	r2, [r3, #20]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2220      	movs	r2, #32
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2220      	movs	r2, #32
 80093dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b08a      	sub	sp, #40	; 0x28
 80093ee:	af02      	add	r7, sp, #8
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	603b      	str	r3, [r7, #0]
 80093f6:	4613      	mov	r3, r2
 80093f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b20      	cmp	r3, #32
 8009408:	d17c      	bne.n	8009504 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d002      	beq.n	8009416 <HAL_UART_Transmit+0x2c>
 8009410:	88fb      	ldrh	r3, [r7, #6]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e075      	b.n	8009506 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009420:	2b01      	cmp	r3, #1
 8009422:	d101      	bne.n	8009428 <HAL_UART_Transmit+0x3e>
 8009424:	2302      	movs	r3, #2
 8009426:	e06e      	b.n	8009506 <HAL_UART_Transmit+0x11c>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2221      	movs	r2, #33	; 0x21
 800943a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800943e:	f7fa fc53 	bl	8003ce8 <HAL_GetTick>
 8009442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	88fa      	ldrh	r2, [r7, #6]
 8009448:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	88fa      	ldrh	r2, [r7, #6]
 800944e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009458:	d108      	bne.n	800946c <HAL_UART_Transmit+0x82>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d104      	bne.n	800946c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	61bb      	str	r3, [r7, #24]
 800946a:	e003      	b.n	8009474 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009470:	2300      	movs	r3, #0
 8009472:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800947c:	e02a      	b.n	80094d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2200      	movs	r2, #0
 8009486:	2180      	movs	r1, #128	; 0x80
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f000 fa3d 	bl	8009908 <UART_WaitOnFlagUntilTimeout>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	e036      	b.n	8009506 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10b      	bne.n	80094b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	3302      	adds	r3, #2
 80094b2:	61bb      	str	r3, [r7, #24]
 80094b4:	e007      	b.n	80094c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	781a      	ldrb	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	3301      	adds	r3, #1
 80094c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80094d8:	b29b      	uxth	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1cf      	bne.n	800947e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	9300      	str	r3, [sp, #0]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	2200      	movs	r2, #0
 80094e6:	2140      	movs	r1, #64	; 0x40
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 fa0d 	bl	8009908 <UART_WaitOnFlagUntilTimeout>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e006      	b.n	8009506 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	e000      	b.n	8009506 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009504:	2302      	movs	r3, #2
  }
}
 8009506:	4618      	mov	r0, r3
 8009508:	3720      	adds	r7, #32
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	4613      	mov	r3, r2
 800951a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b20      	cmp	r3, #32
 8009526:	d11d      	bne.n	8009564 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <HAL_UART_Receive_IT+0x26>
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e016      	b.n	8009566 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800953e:	2b01      	cmp	r3, #1
 8009540:	d101      	bne.n	8009546 <HAL_UART_Receive_IT+0x38>
 8009542:	2302      	movs	r3, #2
 8009544:	e00f      	b.n	8009566 <HAL_UART_Receive_IT+0x58>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8009554:	88fb      	ldrh	r3, [r7, #6]
 8009556:	461a      	mov	r2, r3
 8009558:	68b9      	ldr	r1, [r7, #8]
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fa1e 	bl	800999c <UART_Start_Receive_IT>
 8009560:	4603      	mov	r3, r0
 8009562:	e000      	b.n	8009566 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009564:	2302      	movs	r3, #2
  }
}
 8009566:	4618      	mov	r0, r3
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	; 0x28
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009590:	2300      	movs	r3, #0
 8009592:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009594:	2300      	movs	r3, #0
 8009596:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	f003 030f 	and.w	r3, r3, #15
 800959e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10d      	bne.n	80095c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d008      	beq.n	80095c2 <HAL_UART_IRQHandler+0x52>
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	f003 0320 	and.w	r3, r3, #32
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d003      	beq.n	80095c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fad1 	bl	8009b62 <UART_Receive_IT>
      return;
 80095c0:	e17c      	b.n	80098bc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 80b1 	beq.w	800972c <HAL_UART_IRQHandler+0x1bc>
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d105      	bne.n	80095e0 <HAL_UART_IRQHandler+0x70>
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 80a6 	beq.w	800972c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00a      	beq.n	8009600 <HAL_UART_IRQHandler+0x90>
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d005      	beq.n	8009600 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f8:	f043 0201 	orr.w	r2, r3, #1
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <HAL_UART_IRQHandler+0xb0>
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	d005      	beq.n	8009620 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009618:	f043 0202 	orr.w	r2, r3, #2
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <HAL_UART_IRQHandler+0xd0>
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009638:	f043 0204 	orr.w	r2, r3, #4
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	f003 0308 	and.w	r3, r3, #8
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00f      	beq.n	800966a <HAL_UART_IRQHandler+0xfa>
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	f003 0320 	and.w	r3, r3, #32
 8009650:	2b00      	cmp	r3, #0
 8009652:	d104      	bne.n	800965e <HAL_UART_IRQHandler+0xee>
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d005      	beq.n	800966a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009662:	f043 0208 	orr.w	r2, r3, #8
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 811f 	beq.w	80098b2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b00      	cmp	r3, #0
 800967c:	d007      	beq.n	800968e <HAL_UART_IRQHandler+0x11e>
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	f003 0320 	and.w	r3, r3, #32
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fa6a 	bl	8009b62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009698:	2b40      	cmp	r3, #64	; 0x40
 800969a:	bf0c      	ite	eq
 800969c:	2301      	moveq	r3, #1
 800969e:	2300      	movne	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a8:	f003 0308 	and.w	r3, r3, #8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d102      	bne.n	80096b6 <HAL_UART_IRQHandler+0x146>
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d031      	beq.n	800971a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f9aa 	bl	8009a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c6:	2b40      	cmp	r3, #64	; 0x40
 80096c8:	d123      	bne.n	8009712 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	695a      	ldr	r2, [r3, #20]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d013      	beq.n	800970a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e6:	4a77      	ldr	r2, [pc, #476]	; (80098c4 <HAL_UART_IRQHandler+0x354>)
 80096e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fb fb08 	bl	8004d04 <HAL_DMA_Abort_IT>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d016      	beq.n	8009728 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009708:	e00e      	b.n	8009728 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f8e6 	bl	80098dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009710:	e00a      	b.n	8009728 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f8e2 	bl	80098dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009718:	e006      	b.n	8009728 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 f8de 	bl	80098dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009726:	e0c4      	b.n	80098b2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009728:	bf00      	nop
    return;
 800972a:	e0c2      	b.n	80098b2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009730:	2b01      	cmp	r3, #1
 8009732:	f040 80a2 	bne.w	800987a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	f003 0310 	and.w	r3, r3, #16
 800973c:	2b00      	cmp	r3, #0
 800973e:	f000 809c 	beq.w	800987a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	f003 0310 	and.w	r3, r3, #16
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 8096 	beq.w	800987a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800974e:	2300      	movs	r3, #0
 8009750:	60fb      	str	r3, [r7, #12]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800976e:	2b40      	cmp	r3, #64	; 0x40
 8009770:	d14f      	bne.n	8009812 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800977c:	8a3b      	ldrh	r3, [r7, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 8099 	beq.w	80098b6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009788:	8a3a      	ldrh	r2, [r7, #16]
 800978a:	429a      	cmp	r2, r3
 800978c:	f080 8093 	bcs.w	80098b6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	8a3a      	ldrh	r2, [r7, #16]
 8009794:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097a0:	d02b      	beq.n	80097fa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68da      	ldr	r2, [r3, #12]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097b0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	695a      	ldr	r2, [r3, #20]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f022 0201 	bic.w	r2, r2, #1
 80097c0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	695a      	ldr	r2, [r3, #20]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097d0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68da      	ldr	r2, [r3, #12]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0210 	bic.w	r2, r2, #16
 80097ee:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fb fa15 	bl	8004c24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009802:	b29b      	uxth	r3, r3
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	b29b      	uxth	r3, r3
 8009808:	4619      	mov	r1, r3
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f870 	bl	80098f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009810:	e051      	b.n	80098b6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800981a:	b29b      	uxth	r3, r3
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009824:	b29b      	uxth	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d047      	beq.n	80098ba <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800982a:	8a7b      	ldrh	r3, [r7, #18]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d044      	beq.n	80098ba <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800983e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	695a      	ldr	r2, [r3, #20]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 0201 	bic.w	r2, r2, #1
 800984e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2220      	movs	r2, #32
 8009854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f022 0210 	bic.w	r2, r2, #16
 800986c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800986e:	8a7b      	ldrh	r3, [r7, #18]
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f83c 	bl	80098f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009878:	e01f      	b.n	80098ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009880:	2b00      	cmp	r3, #0
 8009882:	d008      	beq.n	8009896 <HAL_UART_IRQHandler+0x326>
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800988a:	2b00      	cmp	r3, #0
 800988c:	d003      	beq.n	8009896 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f8ff 	bl	8009a92 <UART_Transmit_IT>
    return;
 8009894:	e012      	b.n	80098bc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00d      	beq.n	80098bc <HAL_UART_IRQHandler+0x34c>
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d008      	beq.n	80098bc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f941 	bl	8009b32 <UART_EndTransmit_IT>
    return;
 80098b0:	e004      	b.n	80098bc <HAL_UART_IRQHandler+0x34c>
    return;
 80098b2:	bf00      	nop
 80098b4:	e002      	b.n	80098bc <HAL_UART_IRQHandler+0x34c>
      return;
 80098b6:	bf00      	nop
 80098b8:	e000      	b.n	80098bc <HAL_UART_IRQHandler+0x34c>
      return;
 80098ba:	bf00      	nop
  }
}
 80098bc:	3728      	adds	r7, #40	; 0x28
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	08009a6b 	.word	0x08009a6b

080098c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	4613      	mov	r3, r2
 8009916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009918:	e02c      	b.n	8009974 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009920:	d028      	beq.n	8009974 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d007      	beq.n	8009938 <UART_WaitOnFlagUntilTimeout+0x30>
 8009928:	f7fa f9de 	bl	8003ce8 <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	429a      	cmp	r2, r3
 8009936:	d21d      	bcs.n	8009974 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009946:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	695a      	ldr	r2, [r3, #20]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0201 	bic.w	r2, r2, #1
 8009956:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009970:	2303      	movs	r3, #3
 8009972:	e00f      	b.n	8009994 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	4013      	ands	r3, r2
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	429a      	cmp	r2, r3
 8009982:	bf0c      	ite	eq
 8009984:	2301      	moveq	r3, #1
 8009986:	2300      	movne	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	461a      	mov	r2, r3
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	429a      	cmp	r2, r3
 8009990:	d0c3      	beq.n	800991a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	4613      	mov	r3, r2
 80099a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	88fa      	ldrh	r2, [r7, #6]
 80099b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	88fa      	ldrh	r2, [r7, #6]
 80099ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2222      	movs	r2, #34	; 0x22
 80099c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68da      	ldr	r2, [r3, #12]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099e0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	695a      	ldr	r2, [r3, #20]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f042 0201 	orr.w	r2, r2, #1
 80099f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68da      	ldr	r2, [r3, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f042 0220 	orr.w	r2, r2, #32
 8009a00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68da      	ldr	r2, [r3, #12]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	695a      	ldr	r2, [r3, #20]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0201 	bic.w	r2, r2, #1
 8009a36:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d107      	bne.n	8009a50 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68da      	ldr	r2, [r3, #12]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 0210 	bic.w	r2, r2, #16
 8009a4e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2220      	movs	r2, #32
 8009a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b084      	sub	sp, #16
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f7ff ff29 	bl	80098dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a8a:	bf00      	nop
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b21      	cmp	r3, #33	; 0x21
 8009aa4:	d13e      	bne.n	8009b24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aae:	d114      	bne.n	8009ada <UART_Transmit_IT+0x48>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d110      	bne.n	8009ada <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009acc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	1c9a      	adds	r2, r3, #2
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	621a      	str	r2, [r3, #32]
 8009ad8:	e008      	b.n	8009aec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a1b      	ldr	r3, [r3, #32]
 8009ade:	1c59      	adds	r1, r3, #1
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	6211      	str	r1, [r2, #32]
 8009ae4:	781a      	ldrb	r2, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	3b01      	subs	r3, #1
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	4619      	mov	r1, r3
 8009afa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10f      	bne.n	8009b20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68da      	ldr	r2, [r3, #12]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	e000      	b.n	8009b26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b24:	2302      	movs	r3, #2
  }
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3714      	adds	r7, #20
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b082      	sub	sp, #8
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff feb8 	bl	80098c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b22      	cmp	r3, #34	; 0x22
 8009b74:	f040 8087 	bne.w	8009c86 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b80:	d117      	bne.n	8009bb2 <UART_Receive_IT+0x50>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d113      	bne.n	8009bb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009baa:	1c9a      	adds	r2, r3, #2
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	629a      	str	r2, [r3, #40]	; 0x28
 8009bb0:	e026      	b.n	8009c00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bc4:	d007      	beq.n	8009bd6 <UART_Receive_IT+0x74>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <UART_Receive_IT+0x82>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d106      	bne.n	8009be4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	701a      	strb	r2, [r3, #0]
 8009be2:	e008      	b.n	8009bf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d136      	bne.n	8009c82 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f022 0220 	bic.w	r2, r2, #32
 8009c22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	695a      	ldr	r2, [r3, #20]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f022 0201 	bic.w	r2, r2, #1
 8009c42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d10e      	bne.n	8009c72 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f022 0210 	bic.w	r2, r2, #16
 8009c62:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff fe40 	bl	80098f0 <HAL_UARTEx_RxEventCallback>
 8009c70:	e002      	b.n	8009c78 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7f8 fe3a 	bl	80028ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	e002      	b.n	8009c88 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	e000      	b.n	8009c88 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009c86:	2302      	movs	r3, #2
  }
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c94:	b09f      	sub	sp, #124	; 0x7c
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ca6:	68d9      	ldr	r1, [r3, #12]
 8009ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	ea40 0301 	orr.w	r3, r0, r1
 8009cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cb4:	689a      	ldr	r2, [r3, #8]
 8009cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009cd4:	f021 010c 	bic.w	r1, r1, #12
 8009cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cde:	430b      	orrs	r3, r1
 8009ce0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cee:	6999      	ldr	r1, [r3, #24]
 8009cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	ea40 0301 	orr.w	r3, r0, r1
 8009cf8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	4bc5      	ldr	r3, [pc, #788]	; (800a014 <UART_SetConfig+0x384>)
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d004      	beq.n	8009d0e <UART_SetConfig+0x7e>
 8009d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	4bc3      	ldr	r3, [pc, #780]	; (800a018 <UART_SetConfig+0x388>)
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d103      	bne.n	8009d16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d0e:	f7fe f9c1 	bl	8008094 <HAL_RCC_GetPCLK2Freq>
 8009d12:	6778      	str	r0, [r7, #116]	; 0x74
 8009d14:	e002      	b.n	8009d1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d16:	f7fe f9a9 	bl	800806c <HAL_RCC_GetPCLK1Freq>
 8009d1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d24:	f040 80b6 	bne.w	8009e94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d2a:	461c      	mov	r4, r3
 8009d2c:	f04f 0500 	mov.w	r5, #0
 8009d30:	4622      	mov	r2, r4
 8009d32:	462b      	mov	r3, r5
 8009d34:	1891      	adds	r1, r2, r2
 8009d36:	6439      	str	r1, [r7, #64]	; 0x40
 8009d38:	415b      	adcs	r3, r3
 8009d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d40:	1912      	adds	r2, r2, r4
 8009d42:	eb45 0303 	adc.w	r3, r5, r3
 8009d46:	f04f 0000 	mov.w	r0, #0
 8009d4a:	f04f 0100 	mov.w	r1, #0
 8009d4e:	00d9      	lsls	r1, r3, #3
 8009d50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d54:	00d0      	lsls	r0, r2, #3
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	1911      	adds	r1, r2, r4
 8009d5c:	6639      	str	r1, [r7, #96]	; 0x60
 8009d5e:	416b      	adcs	r3, r5
 8009d60:	667b      	str	r3, [r7, #100]	; 0x64
 8009d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	461a      	mov	r2, r3
 8009d68:	f04f 0300 	mov.w	r3, #0
 8009d6c:	1891      	adds	r1, r2, r2
 8009d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d70:	415b      	adcs	r3, r3
 8009d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009d7c:	f7f7 f84a 	bl	8000e14 <__aeabi_uldivmod>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4ba5      	ldr	r3, [pc, #660]	; (800a01c <UART_SetConfig+0x38c>)
 8009d86:	fba3 2302 	umull	r2, r3, r3, r2
 8009d8a:	095b      	lsrs	r3, r3, #5
 8009d8c:	011e      	lsls	r6, r3, #4
 8009d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d90:	461c      	mov	r4, r3
 8009d92:	f04f 0500 	mov.w	r5, #0
 8009d96:	4622      	mov	r2, r4
 8009d98:	462b      	mov	r3, r5
 8009d9a:	1891      	adds	r1, r2, r2
 8009d9c:	6339      	str	r1, [r7, #48]	; 0x30
 8009d9e:	415b      	adcs	r3, r3
 8009da0:	637b      	str	r3, [r7, #52]	; 0x34
 8009da2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009da6:	1912      	adds	r2, r2, r4
 8009da8:	eb45 0303 	adc.w	r3, r5, r3
 8009dac:	f04f 0000 	mov.w	r0, #0
 8009db0:	f04f 0100 	mov.w	r1, #0
 8009db4:	00d9      	lsls	r1, r3, #3
 8009db6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009dba:	00d0      	lsls	r0, r2, #3
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	1911      	adds	r1, r2, r4
 8009dc2:	65b9      	str	r1, [r7, #88]	; 0x58
 8009dc4:	416b      	adcs	r3, r5
 8009dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	f04f 0300 	mov.w	r3, #0
 8009dd2:	1891      	adds	r1, r2, r2
 8009dd4:	62b9      	str	r1, [r7, #40]	; 0x28
 8009dd6:	415b      	adcs	r3, r3
 8009dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009de2:	f7f7 f817 	bl	8000e14 <__aeabi_uldivmod>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4b8c      	ldr	r3, [pc, #560]	; (800a01c <UART_SetConfig+0x38c>)
 8009dec:	fba3 1302 	umull	r1, r3, r3, r2
 8009df0:	095b      	lsrs	r3, r3, #5
 8009df2:	2164      	movs	r1, #100	; 0x64
 8009df4:	fb01 f303 	mul.w	r3, r1, r3
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	3332      	adds	r3, #50	; 0x32
 8009dfe:	4a87      	ldr	r2, [pc, #540]	; (800a01c <UART_SetConfig+0x38c>)
 8009e00:	fba2 2303 	umull	r2, r3, r2, r3
 8009e04:	095b      	lsrs	r3, r3, #5
 8009e06:	005b      	lsls	r3, r3, #1
 8009e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e0c:	441e      	add	r6, r3
 8009e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e10:	4618      	mov	r0, r3
 8009e12:	f04f 0100 	mov.w	r1, #0
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	1894      	adds	r4, r2, r2
 8009e1c:	623c      	str	r4, [r7, #32]
 8009e1e:	415b      	adcs	r3, r3
 8009e20:	627b      	str	r3, [r7, #36]	; 0x24
 8009e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e26:	1812      	adds	r2, r2, r0
 8009e28:	eb41 0303 	adc.w	r3, r1, r3
 8009e2c:	f04f 0400 	mov.w	r4, #0
 8009e30:	f04f 0500 	mov.w	r5, #0
 8009e34:	00dd      	lsls	r5, r3, #3
 8009e36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e3a:	00d4      	lsls	r4, r2, #3
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	462b      	mov	r3, r5
 8009e40:	1814      	adds	r4, r2, r0
 8009e42:	653c      	str	r4, [r7, #80]	; 0x50
 8009e44:	414b      	adcs	r3, r1
 8009e46:	657b      	str	r3, [r7, #84]	; 0x54
 8009e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	f04f 0300 	mov.w	r3, #0
 8009e52:	1891      	adds	r1, r2, r2
 8009e54:	61b9      	str	r1, [r7, #24]
 8009e56:	415b      	adcs	r3, r3
 8009e58:	61fb      	str	r3, [r7, #28]
 8009e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009e62:	f7f6 ffd7 	bl	8000e14 <__aeabi_uldivmod>
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	4b6c      	ldr	r3, [pc, #432]	; (800a01c <UART_SetConfig+0x38c>)
 8009e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e70:	095b      	lsrs	r3, r3, #5
 8009e72:	2164      	movs	r1, #100	; 0x64
 8009e74:	fb01 f303 	mul.w	r3, r1, r3
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	3332      	adds	r3, #50	; 0x32
 8009e7e:	4a67      	ldr	r2, [pc, #412]	; (800a01c <UART_SetConfig+0x38c>)
 8009e80:	fba2 2303 	umull	r2, r3, r2, r3
 8009e84:	095b      	lsrs	r3, r3, #5
 8009e86:	f003 0207 	and.w	r2, r3, #7
 8009e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4432      	add	r2, r6
 8009e90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e92:	e0b9      	b.n	800a008 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e96:	461c      	mov	r4, r3
 8009e98:	f04f 0500 	mov.w	r5, #0
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	462b      	mov	r3, r5
 8009ea0:	1891      	adds	r1, r2, r2
 8009ea2:	6139      	str	r1, [r7, #16]
 8009ea4:	415b      	adcs	r3, r3
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009eac:	1912      	adds	r2, r2, r4
 8009eae:	eb45 0303 	adc.w	r3, r5, r3
 8009eb2:	f04f 0000 	mov.w	r0, #0
 8009eb6:	f04f 0100 	mov.w	r1, #0
 8009eba:	00d9      	lsls	r1, r3, #3
 8009ebc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ec0:	00d0      	lsls	r0, r2, #3
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	eb12 0804 	adds.w	r8, r2, r4
 8009eca:	eb43 0905 	adc.w	r9, r3, r5
 8009ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f04f 0100 	mov.w	r1, #0
 8009ed8:	f04f 0200 	mov.w	r2, #0
 8009edc:	f04f 0300 	mov.w	r3, #0
 8009ee0:	008b      	lsls	r3, r1, #2
 8009ee2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ee6:	0082      	lsls	r2, r0, #2
 8009ee8:	4640      	mov	r0, r8
 8009eea:	4649      	mov	r1, r9
 8009eec:	f7f6 ff92 	bl	8000e14 <__aeabi_uldivmod>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4b49      	ldr	r3, [pc, #292]	; (800a01c <UART_SetConfig+0x38c>)
 8009ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8009efa:	095b      	lsrs	r3, r3, #5
 8009efc:	011e      	lsls	r6, r3, #4
 8009efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f00:	4618      	mov	r0, r3
 8009f02:	f04f 0100 	mov.w	r1, #0
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	1894      	adds	r4, r2, r2
 8009f0c:	60bc      	str	r4, [r7, #8]
 8009f0e:	415b      	adcs	r3, r3
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f16:	1812      	adds	r2, r2, r0
 8009f18:	eb41 0303 	adc.w	r3, r1, r3
 8009f1c:	f04f 0400 	mov.w	r4, #0
 8009f20:	f04f 0500 	mov.w	r5, #0
 8009f24:	00dd      	lsls	r5, r3, #3
 8009f26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f2a:	00d4      	lsls	r4, r2, #3
 8009f2c:	4622      	mov	r2, r4
 8009f2e:	462b      	mov	r3, r5
 8009f30:	1814      	adds	r4, r2, r0
 8009f32:	64bc      	str	r4, [r7, #72]	; 0x48
 8009f34:	414b      	adcs	r3, r1
 8009f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f04f 0100 	mov.w	r1, #0
 8009f42:	f04f 0200 	mov.w	r2, #0
 8009f46:	f04f 0300 	mov.w	r3, #0
 8009f4a:	008b      	lsls	r3, r1, #2
 8009f4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f50:	0082      	lsls	r2, r0, #2
 8009f52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009f56:	f7f6 ff5d 	bl	8000e14 <__aeabi_uldivmod>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	4b2f      	ldr	r3, [pc, #188]	; (800a01c <UART_SetConfig+0x38c>)
 8009f60:	fba3 1302 	umull	r1, r3, r3, r2
 8009f64:	095b      	lsrs	r3, r3, #5
 8009f66:	2164      	movs	r1, #100	; 0x64
 8009f68:	fb01 f303 	mul.w	r3, r1, r3
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	011b      	lsls	r3, r3, #4
 8009f70:	3332      	adds	r3, #50	; 0x32
 8009f72:	4a2a      	ldr	r2, [pc, #168]	; (800a01c <UART_SetConfig+0x38c>)
 8009f74:	fba2 2303 	umull	r2, r3, r2, r3
 8009f78:	095b      	lsrs	r3, r3, #5
 8009f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f7e:	441e      	add	r6, r3
 8009f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f82:	4618      	mov	r0, r3
 8009f84:	f04f 0100 	mov.w	r1, #0
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	1894      	adds	r4, r2, r2
 8009f8e:	603c      	str	r4, [r7, #0]
 8009f90:	415b      	adcs	r3, r3
 8009f92:	607b      	str	r3, [r7, #4]
 8009f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f98:	1812      	adds	r2, r2, r0
 8009f9a:	eb41 0303 	adc.w	r3, r1, r3
 8009f9e:	f04f 0400 	mov.w	r4, #0
 8009fa2:	f04f 0500 	mov.w	r5, #0
 8009fa6:	00dd      	lsls	r5, r3, #3
 8009fa8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009fac:	00d4      	lsls	r4, r2, #3
 8009fae:	4622      	mov	r2, r4
 8009fb0:	462b      	mov	r3, r5
 8009fb2:	eb12 0a00 	adds.w	sl, r2, r0
 8009fb6:	eb43 0b01 	adc.w	fp, r3, r1
 8009fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f04f 0100 	mov.w	r1, #0
 8009fc4:	f04f 0200 	mov.w	r2, #0
 8009fc8:	f04f 0300 	mov.w	r3, #0
 8009fcc:	008b      	lsls	r3, r1, #2
 8009fce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009fd2:	0082      	lsls	r2, r0, #2
 8009fd4:	4650      	mov	r0, sl
 8009fd6:	4659      	mov	r1, fp
 8009fd8:	f7f6 ff1c 	bl	8000e14 <__aeabi_uldivmod>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4b0e      	ldr	r3, [pc, #56]	; (800a01c <UART_SetConfig+0x38c>)
 8009fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8009fe6:	095b      	lsrs	r3, r3, #5
 8009fe8:	2164      	movs	r1, #100	; 0x64
 8009fea:	fb01 f303 	mul.w	r3, r1, r3
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	011b      	lsls	r3, r3, #4
 8009ff2:	3332      	adds	r3, #50	; 0x32
 8009ff4:	4a09      	ldr	r2, [pc, #36]	; (800a01c <UART_SetConfig+0x38c>)
 8009ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8009ffa:	095b      	lsrs	r3, r3, #5
 8009ffc:	f003 020f 	and.w	r2, r3, #15
 800a000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4432      	add	r2, r6
 800a006:	609a      	str	r2, [r3, #8]
}
 800a008:	bf00      	nop
 800a00a:	377c      	adds	r7, #124	; 0x7c
 800a00c:	46bd      	mov	sp, r7
 800a00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a012:	bf00      	nop
 800a014:	40011000 	.word	0x40011000
 800a018:	40011400 	.word	0x40011400
 800a01c:	51eb851f 	.word	0x51eb851f

0800a020 <__errno>:
 800a020:	4b01      	ldr	r3, [pc, #4]	; (800a028 <__errno+0x8>)
 800a022:	6818      	ldr	r0, [r3, #0]
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	20000028 	.word	0x20000028

0800a02c <__libc_init_array>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	4d0d      	ldr	r5, [pc, #52]	; (800a064 <__libc_init_array+0x38>)
 800a030:	4c0d      	ldr	r4, [pc, #52]	; (800a068 <__libc_init_array+0x3c>)
 800a032:	1b64      	subs	r4, r4, r5
 800a034:	10a4      	asrs	r4, r4, #2
 800a036:	2600      	movs	r6, #0
 800a038:	42a6      	cmp	r6, r4
 800a03a:	d109      	bne.n	800a050 <__libc_init_array+0x24>
 800a03c:	4d0b      	ldr	r5, [pc, #44]	; (800a06c <__libc_init_array+0x40>)
 800a03e:	4c0c      	ldr	r4, [pc, #48]	; (800a070 <__libc_init_array+0x44>)
 800a040:	f000 fd36 	bl	800aab0 <_init>
 800a044:	1b64      	subs	r4, r4, r5
 800a046:	10a4      	asrs	r4, r4, #2
 800a048:	2600      	movs	r6, #0
 800a04a:	42a6      	cmp	r6, r4
 800a04c:	d105      	bne.n	800a05a <__libc_init_array+0x2e>
 800a04e:	bd70      	pop	{r4, r5, r6, pc}
 800a050:	f855 3b04 	ldr.w	r3, [r5], #4
 800a054:	4798      	blx	r3
 800a056:	3601      	adds	r6, #1
 800a058:	e7ee      	b.n	800a038 <__libc_init_array+0xc>
 800a05a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a05e:	4798      	blx	r3
 800a060:	3601      	adds	r6, #1
 800a062:	e7f2      	b.n	800a04a <__libc_init_array+0x1e>
 800a064:	0800ab74 	.word	0x0800ab74
 800a068:	0800ab74 	.word	0x0800ab74
 800a06c:	0800ab74 	.word	0x0800ab74
 800a070:	0800ab78 	.word	0x0800ab78

0800a074 <memset>:
 800a074:	4402      	add	r2, r0
 800a076:	4603      	mov	r3, r0
 800a078:	4293      	cmp	r3, r2
 800a07a:	d100      	bne.n	800a07e <memset+0xa>
 800a07c:	4770      	bx	lr
 800a07e:	f803 1b01 	strb.w	r1, [r3], #1
 800a082:	e7f9      	b.n	800a078 <memset+0x4>

0800a084 <siprintf>:
 800a084:	b40e      	push	{r1, r2, r3}
 800a086:	b500      	push	{lr}
 800a088:	b09c      	sub	sp, #112	; 0x70
 800a08a:	ab1d      	add	r3, sp, #116	; 0x74
 800a08c:	9002      	str	r0, [sp, #8]
 800a08e:	9006      	str	r0, [sp, #24]
 800a090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a094:	4809      	ldr	r0, [pc, #36]	; (800a0bc <siprintf+0x38>)
 800a096:	9107      	str	r1, [sp, #28]
 800a098:	9104      	str	r1, [sp, #16]
 800a09a:	4909      	ldr	r1, [pc, #36]	; (800a0c0 <siprintf+0x3c>)
 800a09c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0a0:	9105      	str	r1, [sp, #20]
 800a0a2:	6800      	ldr	r0, [r0, #0]
 800a0a4:	9301      	str	r3, [sp, #4]
 800a0a6:	a902      	add	r1, sp, #8
 800a0a8:	f000 f868 	bl	800a17c <_svfiprintf_r>
 800a0ac:	9b02      	ldr	r3, [sp, #8]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	701a      	strb	r2, [r3, #0]
 800a0b2:	b01c      	add	sp, #112	; 0x70
 800a0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0b8:	b003      	add	sp, #12
 800a0ba:	4770      	bx	lr
 800a0bc:	20000028 	.word	0x20000028
 800a0c0:	ffff0208 	.word	0xffff0208

0800a0c4 <__ssputs_r>:
 800a0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c8:	688e      	ldr	r6, [r1, #8]
 800a0ca:	429e      	cmp	r6, r3
 800a0cc:	4682      	mov	sl, r0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	4690      	mov	r8, r2
 800a0d2:	461f      	mov	r7, r3
 800a0d4:	d838      	bhi.n	800a148 <__ssputs_r+0x84>
 800a0d6:	898a      	ldrh	r2, [r1, #12]
 800a0d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0dc:	d032      	beq.n	800a144 <__ssputs_r+0x80>
 800a0de:	6825      	ldr	r5, [r4, #0]
 800a0e0:	6909      	ldr	r1, [r1, #16]
 800a0e2:	eba5 0901 	sub.w	r9, r5, r1
 800a0e6:	6965      	ldr	r5, [r4, #20]
 800a0e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	444b      	add	r3, r9
 800a0f4:	106d      	asrs	r5, r5, #1
 800a0f6:	429d      	cmp	r5, r3
 800a0f8:	bf38      	it	cc
 800a0fa:	461d      	movcc	r5, r3
 800a0fc:	0553      	lsls	r3, r2, #21
 800a0fe:	d531      	bpl.n	800a164 <__ssputs_r+0xa0>
 800a100:	4629      	mov	r1, r5
 800a102:	f000 fb47 	bl	800a794 <_malloc_r>
 800a106:	4606      	mov	r6, r0
 800a108:	b950      	cbnz	r0, 800a120 <__ssputs_r+0x5c>
 800a10a:	230c      	movs	r3, #12
 800a10c:	f8ca 3000 	str.w	r3, [sl]
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a116:	81a3      	strh	r3, [r4, #12]
 800a118:	f04f 30ff 	mov.w	r0, #4294967295
 800a11c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a120:	6921      	ldr	r1, [r4, #16]
 800a122:	464a      	mov	r2, r9
 800a124:	f000 fabe 	bl	800a6a4 <memcpy>
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a12e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	6126      	str	r6, [r4, #16]
 800a136:	6165      	str	r5, [r4, #20]
 800a138:	444e      	add	r6, r9
 800a13a:	eba5 0509 	sub.w	r5, r5, r9
 800a13e:	6026      	str	r6, [r4, #0]
 800a140:	60a5      	str	r5, [r4, #8]
 800a142:	463e      	mov	r6, r7
 800a144:	42be      	cmp	r6, r7
 800a146:	d900      	bls.n	800a14a <__ssputs_r+0x86>
 800a148:	463e      	mov	r6, r7
 800a14a:	4632      	mov	r2, r6
 800a14c:	6820      	ldr	r0, [r4, #0]
 800a14e:	4641      	mov	r1, r8
 800a150:	f000 fab6 	bl	800a6c0 <memmove>
 800a154:	68a3      	ldr	r3, [r4, #8]
 800a156:	6822      	ldr	r2, [r4, #0]
 800a158:	1b9b      	subs	r3, r3, r6
 800a15a:	4432      	add	r2, r6
 800a15c:	60a3      	str	r3, [r4, #8]
 800a15e:	6022      	str	r2, [r4, #0]
 800a160:	2000      	movs	r0, #0
 800a162:	e7db      	b.n	800a11c <__ssputs_r+0x58>
 800a164:	462a      	mov	r2, r5
 800a166:	f000 fb6f 	bl	800a848 <_realloc_r>
 800a16a:	4606      	mov	r6, r0
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d1e1      	bne.n	800a134 <__ssputs_r+0x70>
 800a170:	6921      	ldr	r1, [r4, #16]
 800a172:	4650      	mov	r0, sl
 800a174:	f000 fabe 	bl	800a6f4 <_free_r>
 800a178:	e7c7      	b.n	800a10a <__ssputs_r+0x46>
	...

0800a17c <_svfiprintf_r>:
 800a17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a180:	4698      	mov	r8, r3
 800a182:	898b      	ldrh	r3, [r1, #12]
 800a184:	061b      	lsls	r3, r3, #24
 800a186:	b09d      	sub	sp, #116	; 0x74
 800a188:	4607      	mov	r7, r0
 800a18a:	460d      	mov	r5, r1
 800a18c:	4614      	mov	r4, r2
 800a18e:	d50e      	bpl.n	800a1ae <_svfiprintf_r+0x32>
 800a190:	690b      	ldr	r3, [r1, #16]
 800a192:	b963      	cbnz	r3, 800a1ae <_svfiprintf_r+0x32>
 800a194:	2140      	movs	r1, #64	; 0x40
 800a196:	f000 fafd 	bl	800a794 <_malloc_r>
 800a19a:	6028      	str	r0, [r5, #0]
 800a19c:	6128      	str	r0, [r5, #16]
 800a19e:	b920      	cbnz	r0, 800a1aa <_svfiprintf_r+0x2e>
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	603b      	str	r3, [r7, #0]
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	e0d1      	b.n	800a34e <_svfiprintf_r+0x1d2>
 800a1aa:	2340      	movs	r3, #64	; 0x40
 800a1ac:	616b      	str	r3, [r5, #20]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b2:	2320      	movs	r3, #32
 800a1b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1bc:	2330      	movs	r3, #48	; 0x30
 800a1be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a368 <_svfiprintf_r+0x1ec>
 800a1c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1c6:	f04f 0901 	mov.w	r9, #1
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	469a      	mov	sl, r3
 800a1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1d2:	b10a      	cbz	r2, 800a1d8 <_svfiprintf_r+0x5c>
 800a1d4:	2a25      	cmp	r2, #37	; 0x25
 800a1d6:	d1f9      	bne.n	800a1cc <_svfiprintf_r+0x50>
 800a1d8:	ebba 0b04 	subs.w	fp, sl, r4
 800a1dc:	d00b      	beq.n	800a1f6 <_svfiprintf_r+0x7a>
 800a1de:	465b      	mov	r3, fp
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f7ff ff6d 	bl	800a0c4 <__ssputs_r>
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	f000 80aa 	beq.w	800a344 <_svfiprintf_r+0x1c8>
 800a1f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1f2:	445a      	add	r2, fp
 800a1f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 80a2 	beq.w	800a344 <_svfiprintf_r+0x1c8>
 800a200:	2300      	movs	r3, #0
 800a202:	f04f 32ff 	mov.w	r2, #4294967295
 800a206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a20a:	f10a 0a01 	add.w	sl, sl, #1
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	9307      	str	r3, [sp, #28]
 800a212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a216:	931a      	str	r3, [sp, #104]	; 0x68
 800a218:	4654      	mov	r4, sl
 800a21a:	2205      	movs	r2, #5
 800a21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a220:	4851      	ldr	r0, [pc, #324]	; (800a368 <_svfiprintf_r+0x1ec>)
 800a222:	f7f5 ffdd 	bl	80001e0 <memchr>
 800a226:	9a04      	ldr	r2, [sp, #16]
 800a228:	b9d8      	cbnz	r0, 800a262 <_svfiprintf_r+0xe6>
 800a22a:	06d0      	lsls	r0, r2, #27
 800a22c:	bf44      	itt	mi
 800a22e:	2320      	movmi	r3, #32
 800a230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a234:	0711      	lsls	r1, r2, #28
 800a236:	bf44      	itt	mi
 800a238:	232b      	movmi	r3, #43	; 0x2b
 800a23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a23e:	f89a 3000 	ldrb.w	r3, [sl]
 800a242:	2b2a      	cmp	r3, #42	; 0x2a
 800a244:	d015      	beq.n	800a272 <_svfiprintf_r+0xf6>
 800a246:	9a07      	ldr	r2, [sp, #28]
 800a248:	4654      	mov	r4, sl
 800a24a:	2000      	movs	r0, #0
 800a24c:	f04f 0c0a 	mov.w	ip, #10
 800a250:	4621      	mov	r1, r4
 800a252:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a256:	3b30      	subs	r3, #48	; 0x30
 800a258:	2b09      	cmp	r3, #9
 800a25a:	d94e      	bls.n	800a2fa <_svfiprintf_r+0x17e>
 800a25c:	b1b0      	cbz	r0, 800a28c <_svfiprintf_r+0x110>
 800a25e:	9207      	str	r2, [sp, #28]
 800a260:	e014      	b.n	800a28c <_svfiprintf_r+0x110>
 800a262:	eba0 0308 	sub.w	r3, r0, r8
 800a266:	fa09 f303 	lsl.w	r3, r9, r3
 800a26a:	4313      	orrs	r3, r2
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	46a2      	mov	sl, r4
 800a270:	e7d2      	b.n	800a218 <_svfiprintf_r+0x9c>
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	1d19      	adds	r1, r3, #4
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	9103      	str	r1, [sp, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	bfbb      	ittet	lt
 800a27e:	425b      	neglt	r3, r3
 800a280:	f042 0202 	orrlt.w	r2, r2, #2
 800a284:	9307      	strge	r3, [sp, #28]
 800a286:	9307      	strlt	r3, [sp, #28]
 800a288:	bfb8      	it	lt
 800a28a:	9204      	strlt	r2, [sp, #16]
 800a28c:	7823      	ldrb	r3, [r4, #0]
 800a28e:	2b2e      	cmp	r3, #46	; 0x2e
 800a290:	d10c      	bne.n	800a2ac <_svfiprintf_r+0x130>
 800a292:	7863      	ldrb	r3, [r4, #1]
 800a294:	2b2a      	cmp	r3, #42	; 0x2a
 800a296:	d135      	bne.n	800a304 <_svfiprintf_r+0x188>
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	1d1a      	adds	r2, r3, #4
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	9203      	str	r2, [sp, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	bfb8      	it	lt
 800a2a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2a8:	3402      	adds	r4, #2
 800a2aa:	9305      	str	r3, [sp, #20]
 800a2ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a378 <_svfiprintf_r+0x1fc>
 800a2b0:	7821      	ldrb	r1, [r4, #0]
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	4650      	mov	r0, sl
 800a2b6:	f7f5 ff93 	bl	80001e0 <memchr>
 800a2ba:	b140      	cbz	r0, 800a2ce <_svfiprintf_r+0x152>
 800a2bc:	2340      	movs	r3, #64	; 0x40
 800a2be:	eba0 000a 	sub.w	r0, r0, sl
 800a2c2:	fa03 f000 	lsl.w	r0, r3, r0
 800a2c6:	9b04      	ldr	r3, [sp, #16]
 800a2c8:	4303      	orrs	r3, r0
 800a2ca:	3401      	adds	r4, #1
 800a2cc:	9304      	str	r3, [sp, #16]
 800a2ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2d2:	4826      	ldr	r0, [pc, #152]	; (800a36c <_svfiprintf_r+0x1f0>)
 800a2d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2d8:	2206      	movs	r2, #6
 800a2da:	f7f5 ff81 	bl	80001e0 <memchr>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d038      	beq.n	800a354 <_svfiprintf_r+0x1d8>
 800a2e2:	4b23      	ldr	r3, [pc, #140]	; (800a370 <_svfiprintf_r+0x1f4>)
 800a2e4:	bb1b      	cbnz	r3, 800a32e <_svfiprintf_r+0x1b2>
 800a2e6:	9b03      	ldr	r3, [sp, #12]
 800a2e8:	3307      	adds	r3, #7
 800a2ea:	f023 0307 	bic.w	r3, r3, #7
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	9303      	str	r3, [sp, #12]
 800a2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f4:	4433      	add	r3, r6
 800a2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f8:	e767      	b.n	800a1ca <_svfiprintf_r+0x4e>
 800a2fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2fe:	460c      	mov	r4, r1
 800a300:	2001      	movs	r0, #1
 800a302:	e7a5      	b.n	800a250 <_svfiprintf_r+0xd4>
 800a304:	2300      	movs	r3, #0
 800a306:	3401      	adds	r4, #1
 800a308:	9305      	str	r3, [sp, #20]
 800a30a:	4619      	mov	r1, r3
 800a30c:	f04f 0c0a 	mov.w	ip, #10
 800a310:	4620      	mov	r0, r4
 800a312:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a316:	3a30      	subs	r2, #48	; 0x30
 800a318:	2a09      	cmp	r2, #9
 800a31a:	d903      	bls.n	800a324 <_svfiprintf_r+0x1a8>
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d0c5      	beq.n	800a2ac <_svfiprintf_r+0x130>
 800a320:	9105      	str	r1, [sp, #20]
 800a322:	e7c3      	b.n	800a2ac <_svfiprintf_r+0x130>
 800a324:	fb0c 2101 	mla	r1, ip, r1, r2
 800a328:	4604      	mov	r4, r0
 800a32a:	2301      	movs	r3, #1
 800a32c:	e7f0      	b.n	800a310 <_svfiprintf_r+0x194>
 800a32e:	ab03      	add	r3, sp, #12
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	462a      	mov	r2, r5
 800a334:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <_svfiprintf_r+0x1f8>)
 800a336:	a904      	add	r1, sp, #16
 800a338:	4638      	mov	r0, r7
 800a33a:	f3af 8000 	nop.w
 800a33e:	1c42      	adds	r2, r0, #1
 800a340:	4606      	mov	r6, r0
 800a342:	d1d6      	bne.n	800a2f2 <_svfiprintf_r+0x176>
 800a344:	89ab      	ldrh	r3, [r5, #12]
 800a346:	065b      	lsls	r3, r3, #25
 800a348:	f53f af2c 	bmi.w	800a1a4 <_svfiprintf_r+0x28>
 800a34c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a34e:	b01d      	add	sp, #116	; 0x74
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	ab03      	add	r3, sp, #12
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	462a      	mov	r2, r5
 800a35a:	4b06      	ldr	r3, [pc, #24]	; (800a374 <_svfiprintf_r+0x1f8>)
 800a35c:	a904      	add	r1, sp, #16
 800a35e:	4638      	mov	r0, r7
 800a360:	f000 f87a 	bl	800a458 <_printf_i>
 800a364:	e7eb      	b.n	800a33e <_svfiprintf_r+0x1c2>
 800a366:	bf00      	nop
 800a368:	0800ab38 	.word	0x0800ab38
 800a36c:	0800ab42 	.word	0x0800ab42
 800a370:	00000000 	.word	0x00000000
 800a374:	0800a0c5 	.word	0x0800a0c5
 800a378:	0800ab3e 	.word	0x0800ab3e

0800a37c <_printf_common>:
 800a37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a380:	4616      	mov	r6, r2
 800a382:	4699      	mov	r9, r3
 800a384:	688a      	ldr	r2, [r1, #8]
 800a386:	690b      	ldr	r3, [r1, #16]
 800a388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a38c:	4293      	cmp	r3, r2
 800a38e:	bfb8      	it	lt
 800a390:	4613      	movlt	r3, r2
 800a392:	6033      	str	r3, [r6, #0]
 800a394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a398:	4607      	mov	r7, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	b10a      	cbz	r2, 800a3a2 <_printf_common+0x26>
 800a39e:	3301      	adds	r3, #1
 800a3a0:	6033      	str	r3, [r6, #0]
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	0699      	lsls	r1, r3, #26
 800a3a6:	bf42      	ittt	mi
 800a3a8:	6833      	ldrmi	r3, [r6, #0]
 800a3aa:	3302      	addmi	r3, #2
 800a3ac:	6033      	strmi	r3, [r6, #0]
 800a3ae:	6825      	ldr	r5, [r4, #0]
 800a3b0:	f015 0506 	ands.w	r5, r5, #6
 800a3b4:	d106      	bne.n	800a3c4 <_printf_common+0x48>
 800a3b6:	f104 0a19 	add.w	sl, r4, #25
 800a3ba:	68e3      	ldr	r3, [r4, #12]
 800a3bc:	6832      	ldr	r2, [r6, #0]
 800a3be:	1a9b      	subs	r3, r3, r2
 800a3c0:	42ab      	cmp	r3, r5
 800a3c2:	dc26      	bgt.n	800a412 <_printf_common+0x96>
 800a3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3c8:	1e13      	subs	r3, r2, #0
 800a3ca:	6822      	ldr	r2, [r4, #0]
 800a3cc:	bf18      	it	ne
 800a3ce:	2301      	movne	r3, #1
 800a3d0:	0692      	lsls	r2, r2, #26
 800a3d2:	d42b      	bmi.n	800a42c <_printf_common+0xb0>
 800a3d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3d8:	4649      	mov	r1, r9
 800a3da:	4638      	mov	r0, r7
 800a3dc:	47c0      	blx	r8
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d01e      	beq.n	800a420 <_printf_common+0xa4>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	68e5      	ldr	r5, [r4, #12]
 800a3e6:	6832      	ldr	r2, [r6, #0]
 800a3e8:	f003 0306 	and.w	r3, r3, #6
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	bf08      	it	eq
 800a3f0:	1aad      	subeq	r5, r5, r2
 800a3f2:	68a3      	ldr	r3, [r4, #8]
 800a3f4:	6922      	ldr	r2, [r4, #16]
 800a3f6:	bf0c      	ite	eq
 800a3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3fc:	2500      	movne	r5, #0
 800a3fe:	4293      	cmp	r3, r2
 800a400:	bfc4      	itt	gt
 800a402:	1a9b      	subgt	r3, r3, r2
 800a404:	18ed      	addgt	r5, r5, r3
 800a406:	2600      	movs	r6, #0
 800a408:	341a      	adds	r4, #26
 800a40a:	42b5      	cmp	r5, r6
 800a40c:	d11a      	bne.n	800a444 <_printf_common+0xc8>
 800a40e:	2000      	movs	r0, #0
 800a410:	e008      	b.n	800a424 <_printf_common+0xa8>
 800a412:	2301      	movs	r3, #1
 800a414:	4652      	mov	r2, sl
 800a416:	4649      	mov	r1, r9
 800a418:	4638      	mov	r0, r7
 800a41a:	47c0      	blx	r8
 800a41c:	3001      	adds	r0, #1
 800a41e:	d103      	bne.n	800a428 <_printf_common+0xac>
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a428:	3501      	adds	r5, #1
 800a42a:	e7c6      	b.n	800a3ba <_printf_common+0x3e>
 800a42c:	18e1      	adds	r1, r4, r3
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	2030      	movs	r0, #48	; 0x30
 800a432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a436:	4422      	add	r2, r4
 800a438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a43c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a440:	3302      	adds	r3, #2
 800a442:	e7c7      	b.n	800a3d4 <_printf_common+0x58>
 800a444:	2301      	movs	r3, #1
 800a446:	4622      	mov	r2, r4
 800a448:	4649      	mov	r1, r9
 800a44a:	4638      	mov	r0, r7
 800a44c:	47c0      	blx	r8
 800a44e:	3001      	adds	r0, #1
 800a450:	d0e6      	beq.n	800a420 <_printf_common+0xa4>
 800a452:	3601      	adds	r6, #1
 800a454:	e7d9      	b.n	800a40a <_printf_common+0x8e>
	...

0800a458 <_printf_i>:
 800a458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a45c:	460c      	mov	r4, r1
 800a45e:	4691      	mov	r9, r2
 800a460:	7e27      	ldrb	r7, [r4, #24]
 800a462:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a464:	2f78      	cmp	r7, #120	; 0x78
 800a466:	4680      	mov	r8, r0
 800a468:	469a      	mov	sl, r3
 800a46a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a46e:	d807      	bhi.n	800a480 <_printf_i+0x28>
 800a470:	2f62      	cmp	r7, #98	; 0x62
 800a472:	d80a      	bhi.n	800a48a <_printf_i+0x32>
 800a474:	2f00      	cmp	r7, #0
 800a476:	f000 80d8 	beq.w	800a62a <_printf_i+0x1d2>
 800a47a:	2f58      	cmp	r7, #88	; 0x58
 800a47c:	f000 80a3 	beq.w	800a5c6 <_printf_i+0x16e>
 800a480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a488:	e03a      	b.n	800a500 <_printf_i+0xa8>
 800a48a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a48e:	2b15      	cmp	r3, #21
 800a490:	d8f6      	bhi.n	800a480 <_printf_i+0x28>
 800a492:	a001      	add	r0, pc, #4	; (adr r0, 800a498 <_printf_i+0x40>)
 800a494:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a498:	0800a4f1 	.word	0x0800a4f1
 800a49c:	0800a505 	.word	0x0800a505
 800a4a0:	0800a481 	.word	0x0800a481
 800a4a4:	0800a481 	.word	0x0800a481
 800a4a8:	0800a481 	.word	0x0800a481
 800a4ac:	0800a481 	.word	0x0800a481
 800a4b0:	0800a505 	.word	0x0800a505
 800a4b4:	0800a481 	.word	0x0800a481
 800a4b8:	0800a481 	.word	0x0800a481
 800a4bc:	0800a481 	.word	0x0800a481
 800a4c0:	0800a481 	.word	0x0800a481
 800a4c4:	0800a611 	.word	0x0800a611
 800a4c8:	0800a535 	.word	0x0800a535
 800a4cc:	0800a5f3 	.word	0x0800a5f3
 800a4d0:	0800a481 	.word	0x0800a481
 800a4d4:	0800a481 	.word	0x0800a481
 800a4d8:	0800a633 	.word	0x0800a633
 800a4dc:	0800a481 	.word	0x0800a481
 800a4e0:	0800a535 	.word	0x0800a535
 800a4e4:	0800a481 	.word	0x0800a481
 800a4e8:	0800a481 	.word	0x0800a481
 800a4ec:	0800a5fb 	.word	0x0800a5fb
 800a4f0:	680b      	ldr	r3, [r1, #0]
 800a4f2:	1d1a      	adds	r2, r3, #4
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	600a      	str	r2, [r1, #0]
 800a4f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a500:	2301      	movs	r3, #1
 800a502:	e0a3      	b.n	800a64c <_printf_i+0x1f4>
 800a504:	6825      	ldr	r5, [r4, #0]
 800a506:	6808      	ldr	r0, [r1, #0]
 800a508:	062e      	lsls	r6, r5, #24
 800a50a:	f100 0304 	add.w	r3, r0, #4
 800a50e:	d50a      	bpl.n	800a526 <_printf_i+0xce>
 800a510:	6805      	ldr	r5, [r0, #0]
 800a512:	600b      	str	r3, [r1, #0]
 800a514:	2d00      	cmp	r5, #0
 800a516:	da03      	bge.n	800a520 <_printf_i+0xc8>
 800a518:	232d      	movs	r3, #45	; 0x2d
 800a51a:	426d      	negs	r5, r5
 800a51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a520:	485e      	ldr	r0, [pc, #376]	; (800a69c <_printf_i+0x244>)
 800a522:	230a      	movs	r3, #10
 800a524:	e019      	b.n	800a55a <_printf_i+0x102>
 800a526:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a52a:	6805      	ldr	r5, [r0, #0]
 800a52c:	600b      	str	r3, [r1, #0]
 800a52e:	bf18      	it	ne
 800a530:	b22d      	sxthne	r5, r5
 800a532:	e7ef      	b.n	800a514 <_printf_i+0xbc>
 800a534:	680b      	ldr	r3, [r1, #0]
 800a536:	6825      	ldr	r5, [r4, #0]
 800a538:	1d18      	adds	r0, r3, #4
 800a53a:	6008      	str	r0, [r1, #0]
 800a53c:	0628      	lsls	r0, r5, #24
 800a53e:	d501      	bpl.n	800a544 <_printf_i+0xec>
 800a540:	681d      	ldr	r5, [r3, #0]
 800a542:	e002      	b.n	800a54a <_printf_i+0xf2>
 800a544:	0669      	lsls	r1, r5, #25
 800a546:	d5fb      	bpl.n	800a540 <_printf_i+0xe8>
 800a548:	881d      	ldrh	r5, [r3, #0]
 800a54a:	4854      	ldr	r0, [pc, #336]	; (800a69c <_printf_i+0x244>)
 800a54c:	2f6f      	cmp	r7, #111	; 0x6f
 800a54e:	bf0c      	ite	eq
 800a550:	2308      	moveq	r3, #8
 800a552:	230a      	movne	r3, #10
 800a554:	2100      	movs	r1, #0
 800a556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a55a:	6866      	ldr	r6, [r4, #4]
 800a55c:	60a6      	str	r6, [r4, #8]
 800a55e:	2e00      	cmp	r6, #0
 800a560:	bfa2      	ittt	ge
 800a562:	6821      	ldrge	r1, [r4, #0]
 800a564:	f021 0104 	bicge.w	r1, r1, #4
 800a568:	6021      	strge	r1, [r4, #0]
 800a56a:	b90d      	cbnz	r5, 800a570 <_printf_i+0x118>
 800a56c:	2e00      	cmp	r6, #0
 800a56e:	d04d      	beq.n	800a60c <_printf_i+0x1b4>
 800a570:	4616      	mov	r6, r2
 800a572:	fbb5 f1f3 	udiv	r1, r5, r3
 800a576:	fb03 5711 	mls	r7, r3, r1, r5
 800a57a:	5dc7      	ldrb	r7, [r0, r7]
 800a57c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a580:	462f      	mov	r7, r5
 800a582:	42bb      	cmp	r3, r7
 800a584:	460d      	mov	r5, r1
 800a586:	d9f4      	bls.n	800a572 <_printf_i+0x11a>
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d10b      	bne.n	800a5a4 <_printf_i+0x14c>
 800a58c:	6823      	ldr	r3, [r4, #0]
 800a58e:	07df      	lsls	r7, r3, #31
 800a590:	d508      	bpl.n	800a5a4 <_printf_i+0x14c>
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	6861      	ldr	r1, [r4, #4]
 800a596:	4299      	cmp	r1, r3
 800a598:	bfde      	ittt	le
 800a59a:	2330      	movle	r3, #48	; 0x30
 800a59c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5a4:	1b92      	subs	r2, r2, r6
 800a5a6:	6122      	str	r2, [r4, #16]
 800a5a8:	f8cd a000 	str.w	sl, [sp]
 800a5ac:	464b      	mov	r3, r9
 800a5ae:	aa03      	add	r2, sp, #12
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	f7ff fee2 	bl	800a37c <_printf_common>
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	d14c      	bne.n	800a656 <_printf_i+0x1fe>
 800a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c0:	b004      	add	sp, #16
 800a5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c6:	4835      	ldr	r0, [pc, #212]	; (800a69c <_printf_i+0x244>)
 800a5c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	680e      	ldr	r6, [r1, #0]
 800a5d0:	061f      	lsls	r7, r3, #24
 800a5d2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a5d6:	600e      	str	r6, [r1, #0]
 800a5d8:	d514      	bpl.n	800a604 <_printf_i+0x1ac>
 800a5da:	07d9      	lsls	r1, r3, #31
 800a5dc:	bf44      	itt	mi
 800a5de:	f043 0320 	orrmi.w	r3, r3, #32
 800a5e2:	6023      	strmi	r3, [r4, #0]
 800a5e4:	b91d      	cbnz	r5, 800a5ee <_printf_i+0x196>
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	f023 0320 	bic.w	r3, r3, #32
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	2310      	movs	r3, #16
 800a5f0:	e7b0      	b.n	800a554 <_printf_i+0xfc>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	f043 0320 	orr.w	r3, r3, #32
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	2378      	movs	r3, #120	; 0x78
 800a5fc:	4828      	ldr	r0, [pc, #160]	; (800a6a0 <_printf_i+0x248>)
 800a5fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a602:	e7e3      	b.n	800a5cc <_printf_i+0x174>
 800a604:	065e      	lsls	r6, r3, #25
 800a606:	bf48      	it	mi
 800a608:	b2ad      	uxthmi	r5, r5
 800a60a:	e7e6      	b.n	800a5da <_printf_i+0x182>
 800a60c:	4616      	mov	r6, r2
 800a60e:	e7bb      	b.n	800a588 <_printf_i+0x130>
 800a610:	680b      	ldr	r3, [r1, #0]
 800a612:	6826      	ldr	r6, [r4, #0]
 800a614:	6960      	ldr	r0, [r4, #20]
 800a616:	1d1d      	adds	r5, r3, #4
 800a618:	600d      	str	r5, [r1, #0]
 800a61a:	0635      	lsls	r5, r6, #24
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	d501      	bpl.n	800a624 <_printf_i+0x1cc>
 800a620:	6018      	str	r0, [r3, #0]
 800a622:	e002      	b.n	800a62a <_printf_i+0x1d2>
 800a624:	0671      	lsls	r1, r6, #25
 800a626:	d5fb      	bpl.n	800a620 <_printf_i+0x1c8>
 800a628:	8018      	strh	r0, [r3, #0]
 800a62a:	2300      	movs	r3, #0
 800a62c:	6123      	str	r3, [r4, #16]
 800a62e:	4616      	mov	r6, r2
 800a630:	e7ba      	b.n	800a5a8 <_printf_i+0x150>
 800a632:	680b      	ldr	r3, [r1, #0]
 800a634:	1d1a      	adds	r2, r3, #4
 800a636:	600a      	str	r2, [r1, #0]
 800a638:	681e      	ldr	r6, [r3, #0]
 800a63a:	6862      	ldr	r2, [r4, #4]
 800a63c:	2100      	movs	r1, #0
 800a63e:	4630      	mov	r0, r6
 800a640:	f7f5 fdce 	bl	80001e0 <memchr>
 800a644:	b108      	cbz	r0, 800a64a <_printf_i+0x1f2>
 800a646:	1b80      	subs	r0, r0, r6
 800a648:	6060      	str	r0, [r4, #4]
 800a64a:	6863      	ldr	r3, [r4, #4]
 800a64c:	6123      	str	r3, [r4, #16]
 800a64e:	2300      	movs	r3, #0
 800a650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a654:	e7a8      	b.n	800a5a8 <_printf_i+0x150>
 800a656:	6923      	ldr	r3, [r4, #16]
 800a658:	4632      	mov	r2, r6
 800a65a:	4649      	mov	r1, r9
 800a65c:	4640      	mov	r0, r8
 800a65e:	47d0      	blx	sl
 800a660:	3001      	adds	r0, #1
 800a662:	d0ab      	beq.n	800a5bc <_printf_i+0x164>
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	079b      	lsls	r3, r3, #30
 800a668:	d413      	bmi.n	800a692 <_printf_i+0x23a>
 800a66a:	68e0      	ldr	r0, [r4, #12]
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	4298      	cmp	r0, r3
 800a670:	bfb8      	it	lt
 800a672:	4618      	movlt	r0, r3
 800a674:	e7a4      	b.n	800a5c0 <_printf_i+0x168>
 800a676:	2301      	movs	r3, #1
 800a678:	4632      	mov	r2, r6
 800a67a:	4649      	mov	r1, r9
 800a67c:	4640      	mov	r0, r8
 800a67e:	47d0      	blx	sl
 800a680:	3001      	adds	r0, #1
 800a682:	d09b      	beq.n	800a5bc <_printf_i+0x164>
 800a684:	3501      	adds	r5, #1
 800a686:	68e3      	ldr	r3, [r4, #12]
 800a688:	9903      	ldr	r1, [sp, #12]
 800a68a:	1a5b      	subs	r3, r3, r1
 800a68c:	42ab      	cmp	r3, r5
 800a68e:	dcf2      	bgt.n	800a676 <_printf_i+0x21e>
 800a690:	e7eb      	b.n	800a66a <_printf_i+0x212>
 800a692:	2500      	movs	r5, #0
 800a694:	f104 0619 	add.w	r6, r4, #25
 800a698:	e7f5      	b.n	800a686 <_printf_i+0x22e>
 800a69a:	bf00      	nop
 800a69c:	0800ab49 	.word	0x0800ab49
 800a6a0:	0800ab5a 	.word	0x0800ab5a

0800a6a4 <memcpy>:
 800a6a4:	440a      	add	r2, r1
 800a6a6:	4291      	cmp	r1, r2
 800a6a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6ac:	d100      	bne.n	800a6b0 <memcpy+0xc>
 800a6ae:	4770      	bx	lr
 800a6b0:	b510      	push	{r4, lr}
 800a6b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6ba:	4291      	cmp	r1, r2
 800a6bc:	d1f9      	bne.n	800a6b2 <memcpy+0xe>
 800a6be:	bd10      	pop	{r4, pc}

0800a6c0 <memmove>:
 800a6c0:	4288      	cmp	r0, r1
 800a6c2:	b510      	push	{r4, lr}
 800a6c4:	eb01 0402 	add.w	r4, r1, r2
 800a6c8:	d902      	bls.n	800a6d0 <memmove+0x10>
 800a6ca:	4284      	cmp	r4, r0
 800a6cc:	4623      	mov	r3, r4
 800a6ce:	d807      	bhi.n	800a6e0 <memmove+0x20>
 800a6d0:	1e43      	subs	r3, r0, #1
 800a6d2:	42a1      	cmp	r1, r4
 800a6d4:	d008      	beq.n	800a6e8 <memmove+0x28>
 800a6d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6de:	e7f8      	b.n	800a6d2 <memmove+0x12>
 800a6e0:	4402      	add	r2, r0
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	428a      	cmp	r2, r1
 800a6e6:	d100      	bne.n	800a6ea <memmove+0x2a>
 800a6e8:	bd10      	pop	{r4, pc}
 800a6ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6f2:	e7f7      	b.n	800a6e4 <memmove+0x24>

0800a6f4 <_free_r>:
 800a6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	d048      	beq.n	800a78c <_free_r+0x98>
 800a6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6fe:	9001      	str	r0, [sp, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	f1a1 0404 	sub.w	r4, r1, #4
 800a706:	bfb8      	it	lt
 800a708:	18e4      	addlt	r4, r4, r3
 800a70a:	f000 f8d3 	bl	800a8b4 <__malloc_lock>
 800a70e:	4a20      	ldr	r2, [pc, #128]	; (800a790 <_free_r+0x9c>)
 800a710:	9801      	ldr	r0, [sp, #4]
 800a712:	6813      	ldr	r3, [r2, #0]
 800a714:	4615      	mov	r5, r2
 800a716:	b933      	cbnz	r3, 800a726 <_free_r+0x32>
 800a718:	6063      	str	r3, [r4, #4]
 800a71a:	6014      	str	r4, [r2, #0]
 800a71c:	b003      	add	sp, #12
 800a71e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a722:	f000 b8cd 	b.w	800a8c0 <__malloc_unlock>
 800a726:	42a3      	cmp	r3, r4
 800a728:	d90b      	bls.n	800a742 <_free_r+0x4e>
 800a72a:	6821      	ldr	r1, [r4, #0]
 800a72c:	1862      	adds	r2, r4, r1
 800a72e:	4293      	cmp	r3, r2
 800a730:	bf04      	itt	eq
 800a732:	681a      	ldreq	r2, [r3, #0]
 800a734:	685b      	ldreq	r3, [r3, #4]
 800a736:	6063      	str	r3, [r4, #4]
 800a738:	bf04      	itt	eq
 800a73a:	1852      	addeq	r2, r2, r1
 800a73c:	6022      	streq	r2, [r4, #0]
 800a73e:	602c      	str	r4, [r5, #0]
 800a740:	e7ec      	b.n	800a71c <_free_r+0x28>
 800a742:	461a      	mov	r2, r3
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	b10b      	cbz	r3, 800a74c <_free_r+0x58>
 800a748:	42a3      	cmp	r3, r4
 800a74a:	d9fa      	bls.n	800a742 <_free_r+0x4e>
 800a74c:	6811      	ldr	r1, [r2, #0]
 800a74e:	1855      	adds	r5, r2, r1
 800a750:	42a5      	cmp	r5, r4
 800a752:	d10b      	bne.n	800a76c <_free_r+0x78>
 800a754:	6824      	ldr	r4, [r4, #0]
 800a756:	4421      	add	r1, r4
 800a758:	1854      	adds	r4, r2, r1
 800a75a:	42a3      	cmp	r3, r4
 800a75c:	6011      	str	r1, [r2, #0]
 800a75e:	d1dd      	bne.n	800a71c <_free_r+0x28>
 800a760:	681c      	ldr	r4, [r3, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	6053      	str	r3, [r2, #4]
 800a766:	4421      	add	r1, r4
 800a768:	6011      	str	r1, [r2, #0]
 800a76a:	e7d7      	b.n	800a71c <_free_r+0x28>
 800a76c:	d902      	bls.n	800a774 <_free_r+0x80>
 800a76e:	230c      	movs	r3, #12
 800a770:	6003      	str	r3, [r0, #0]
 800a772:	e7d3      	b.n	800a71c <_free_r+0x28>
 800a774:	6825      	ldr	r5, [r4, #0]
 800a776:	1961      	adds	r1, r4, r5
 800a778:	428b      	cmp	r3, r1
 800a77a:	bf04      	itt	eq
 800a77c:	6819      	ldreq	r1, [r3, #0]
 800a77e:	685b      	ldreq	r3, [r3, #4]
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	bf04      	itt	eq
 800a784:	1949      	addeq	r1, r1, r5
 800a786:	6021      	streq	r1, [r4, #0]
 800a788:	6054      	str	r4, [r2, #4]
 800a78a:	e7c7      	b.n	800a71c <_free_r+0x28>
 800a78c:	b003      	add	sp, #12
 800a78e:	bd30      	pop	{r4, r5, pc}
 800a790:	20000258 	.word	0x20000258

0800a794 <_malloc_r>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	1ccd      	adds	r5, r1, #3
 800a798:	f025 0503 	bic.w	r5, r5, #3
 800a79c:	3508      	adds	r5, #8
 800a79e:	2d0c      	cmp	r5, #12
 800a7a0:	bf38      	it	cc
 800a7a2:	250c      	movcc	r5, #12
 800a7a4:	2d00      	cmp	r5, #0
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	db01      	blt.n	800a7ae <_malloc_r+0x1a>
 800a7aa:	42a9      	cmp	r1, r5
 800a7ac:	d903      	bls.n	800a7b6 <_malloc_r+0x22>
 800a7ae:	230c      	movs	r3, #12
 800a7b0:	6033      	str	r3, [r6, #0]
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7b6:	f000 f87d 	bl	800a8b4 <__malloc_lock>
 800a7ba:	4921      	ldr	r1, [pc, #132]	; (800a840 <_malloc_r+0xac>)
 800a7bc:	680a      	ldr	r2, [r1, #0]
 800a7be:	4614      	mov	r4, r2
 800a7c0:	b99c      	cbnz	r4, 800a7ea <_malloc_r+0x56>
 800a7c2:	4f20      	ldr	r7, [pc, #128]	; (800a844 <_malloc_r+0xb0>)
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	b923      	cbnz	r3, 800a7d2 <_malloc_r+0x3e>
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f000 f862 	bl	800a894 <_sbrk_r>
 800a7d0:	6038      	str	r0, [r7, #0]
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f000 f85d 	bl	800a894 <_sbrk_r>
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	d123      	bne.n	800a826 <_malloc_r+0x92>
 800a7de:	230c      	movs	r3, #12
 800a7e0:	6033      	str	r3, [r6, #0]
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f000 f86c 	bl	800a8c0 <__malloc_unlock>
 800a7e8:	e7e3      	b.n	800a7b2 <_malloc_r+0x1e>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	1b5b      	subs	r3, r3, r5
 800a7ee:	d417      	bmi.n	800a820 <_malloc_r+0x8c>
 800a7f0:	2b0b      	cmp	r3, #11
 800a7f2:	d903      	bls.n	800a7fc <_malloc_r+0x68>
 800a7f4:	6023      	str	r3, [r4, #0]
 800a7f6:	441c      	add	r4, r3
 800a7f8:	6025      	str	r5, [r4, #0]
 800a7fa:	e004      	b.n	800a806 <_malloc_r+0x72>
 800a7fc:	6863      	ldr	r3, [r4, #4]
 800a7fe:	42a2      	cmp	r2, r4
 800a800:	bf0c      	ite	eq
 800a802:	600b      	streq	r3, [r1, #0]
 800a804:	6053      	strne	r3, [r2, #4]
 800a806:	4630      	mov	r0, r6
 800a808:	f000 f85a 	bl	800a8c0 <__malloc_unlock>
 800a80c:	f104 000b 	add.w	r0, r4, #11
 800a810:	1d23      	adds	r3, r4, #4
 800a812:	f020 0007 	bic.w	r0, r0, #7
 800a816:	1ac2      	subs	r2, r0, r3
 800a818:	d0cc      	beq.n	800a7b4 <_malloc_r+0x20>
 800a81a:	1a1b      	subs	r3, r3, r0
 800a81c:	50a3      	str	r3, [r4, r2]
 800a81e:	e7c9      	b.n	800a7b4 <_malloc_r+0x20>
 800a820:	4622      	mov	r2, r4
 800a822:	6864      	ldr	r4, [r4, #4]
 800a824:	e7cc      	b.n	800a7c0 <_malloc_r+0x2c>
 800a826:	1cc4      	adds	r4, r0, #3
 800a828:	f024 0403 	bic.w	r4, r4, #3
 800a82c:	42a0      	cmp	r0, r4
 800a82e:	d0e3      	beq.n	800a7f8 <_malloc_r+0x64>
 800a830:	1a21      	subs	r1, r4, r0
 800a832:	4630      	mov	r0, r6
 800a834:	f000 f82e 	bl	800a894 <_sbrk_r>
 800a838:	3001      	adds	r0, #1
 800a83a:	d1dd      	bne.n	800a7f8 <_malloc_r+0x64>
 800a83c:	e7cf      	b.n	800a7de <_malloc_r+0x4a>
 800a83e:	bf00      	nop
 800a840:	20000258 	.word	0x20000258
 800a844:	2000025c 	.word	0x2000025c

0800a848 <_realloc_r>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	4607      	mov	r7, r0
 800a84c:	4614      	mov	r4, r2
 800a84e:	460e      	mov	r6, r1
 800a850:	b921      	cbnz	r1, 800a85c <_realloc_r+0x14>
 800a852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a856:	4611      	mov	r1, r2
 800a858:	f7ff bf9c 	b.w	800a794 <_malloc_r>
 800a85c:	b922      	cbnz	r2, 800a868 <_realloc_r+0x20>
 800a85e:	f7ff ff49 	bl	800a6f4 <_free_r>
 800a862:	4625      	mov	r5, r4
 800a864:	4628      	mov	r0, r5
 800a866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a868:	f000 f830 	bl	800a8cc <_malloc_usable_size_r>
 800a86c:	42a0      	cmp	r0, r4
 800a86e:	d20f      	bcs.n	800a890 <_realloc_r+0x48>
 800a870:	4621      	mov	r1, r4
 800a872:	4638      	mov	r0, r7
 800a874:	f7ff ff8e 	bl	800a794 <_malloc_r>
 800a878:	4605      	mov	r5, r0
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d0f2      	beq.n	800a864 <_realloc_r+0x1c>
 800a87e:	4631      	mov	r1, r6
 800a880:	4622      	mov	r2, r4
 800a882:	f7ff ff0f 	bl	800a6a4 <memcpy>
 800a886:	4631      	mov	r1, r6
 800a888:	4638      	mov	r0, r7
 800a88a:	f7ff ff33 	bl	800a6f4 <_free_r>
 800a88e:	e7e9      	b.n	800a864 <_realloc_r+0x1c>
 800a890:	4635      	mov	r5, r6
 800a892:	e7e7      	b.n	800a864 <_realloc_r+0x1c>

0800a894 <_sbrk_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d06      	ldr	r5, [pc, #24]	; (800a8b0 <_sbrk_r+0x1c>)
 800a898:	2300      	movs	r3, #0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	602b      	str	r3, [r5, #0]
 800a8a0:	f7f9 f94a 	bl	8003b38 <_sbrk>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	d102      	bne.n	800a8ae <_sbrk_r+0x1a>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	b103      	cbz	r3, 800a8ae <_sbrk_r+0x1a>
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	2000054c 	.word	0x2000054c

0800a8b4 <__malloc_lock>:
 800a8b4:	4801      	ldr	r0, [pc, #4]	; (800a8bc <__malloc_lock+0x8>)
 800a8b6:	f000 b811 	b.w	800a8dc <__retarget_lock_acquire_recursive>
 800a8ba:	bf00      	nop
 800a8bc:	20000554 	.word	0x20000554

0800a8c0 <__malloc_unlock>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	; (800a8c8 <__malloc_unlock+0x8>)
 800a8c2:	f000 b80c 	b.w	800a8de <__retarget_lock_release_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	20000554 	.word	0x20000554

0800a8cc <_malloc_usable_size_r>:
 800a8cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8d0:	1f18      	subs	r0, r3, #4
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bfbc      	itt	lt
 800a8d6:	580b      	ldrlt	r3, [r1, r0]
 800a8d8:	18c0      	addlt	r0, r0, r3
 800a8da:	4770      	bx	lr

0800a8dc <__retarget_lock_acquire_recursive>:
 800a8dc:	4770      	bx	lr

0800a8de <__retarget_lock_release_recursive>:
 800a8de:	4770      	bx	lr

0800a8e0 <sqrt>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	ed2d 8b02 	vpush	{d8}
 800a8e6:	ec55 4b10 	vmov	r4, r5, d0
 800a8ea:	f000 f82d 	bl	800a948 <__ieee754_sqrt>
 800a8ee:	4b15      	ldr	r3, [pc, #84]	; (800a944 <sqrt+0x64>)
 800a8f0:	eeb0 8a40 	vmov.f32	s16, s0
 800a8f4:	eef0 8a60 	vmov.f32	s17, s1
 800a8f8:	f993 3000 	ldrsb.w	r3, [r3]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	d019      	beq.n	800a934 <sqrt+0x54>
 800a900:	4622      	mov	r2, r4
 800a902:	462b      	mov	r3, r5
 800a904:	4620      	mov	r0, r4
 800a906:	4629      	mov	r1, r5
 800a908:	f7f6 f910 	bl	8000b2c <__aeabi_dcmpun>
 800a90c:	b990      	cbnz	r0, 800a934 <sqrt+0x54>
 800a90e:	2200      	movs	r2, #0
 800a910:	2300      	movs	r3, #0
 800a912:	4620      	mov	r0, r4
 800a914:	4629      	mov	r1, r5
 800a916:	f7f6 f8e1 	bl	8000adc <__aeabi_dcmplt>
 800a91a:	b158      	cbz	r0, 800a934 <sqrt+0x54>
 800a91c:	f7ff fb80 	bl	800a020 <__errno>
 800a920:	2321      	movs	r3, #33	; 0x21
 800a922:	6003      	str	r3, [r0, #0]
 800a924:	2200      	movs	r2, #0
 800a926:	2300      	movs	r3, #0
 800a928:	4610      	mov	r0, r2
 800a92a:	4619      	mov	r1, r3
 800a92c:	f7f5 ff8e 	bl	800084c <__aeabi_ddiv>
 800a930:	ec41 0b18 	vmov	d8, r0, r1
 800a934:	eeb0 0a48 	vmov.f32	s0, s16
 800a938:	eef0 0a68 	vmov.f32	s1, s17
 800a93c:	ecbd 8b02 	vpop	{d8}
 800a940:	bd38      	pop	{r3, r4, r5, pc}
 800a942:	bf00      	nop
 800a944:	2000008c 	.word	0x2000008c

0800a948 <__ieee754_sqrt>:
 800a948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a94c:	ec55 4b10 	vmov	r4, r5, d0
 800a950:	4e56      	ldr	r6, [pc, #344]	; (800aaac <__ieee754_sqrt+0x164>)
 800a952:	43ae      	bics	r6, r5
 800a954:	ee10 0a10 	vmov	r0, s0
 800a958:	ee10 3a10 	vmov	r3, s0
 800a95c:	4629      	mov	r1, r5
 800a95e:	462a      	mov	r2, r5
 800a960:	d110      	bne.n	800a984 <__ieee754_sqrt+0x3c>
 800a962:	ee10 2a10 	vmov	r2, s0
 800a966:	462b      	mov	r3, r5
 800a968:	f7f5 fe46 	bl	80005f8 <__aeabi_dmul>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	f7f5 fc8a 	bl	800028c <__adddf3>
 800a978:	4604      	mov	r4, r0
 800a97a:	460d      	mov	r5, r1
 800a97c:	ec45 4b10 	vmov	d0, r4, r5
 800a980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a984:	2d00      	cmp	r5, #0
 800a986:	dc10      	bgt.n	800a9aa <__ieee754_sqrt+0x62>
 800a988:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a98c:	4330      	orrs	r0, r6
 800a98e:	d0f5      	beq.n	800a97c <__ieee754_sqrt+0x34>
 800a990:	b15d      	cbz	r5, 800a9aa <__ieee754_sqrt+0x62>
 800a992:	ee10 2a10 	vmov	r2, s0
 800a996:	462b      	mov	r3, r5
 800a998:	ee10 0a10 	vmov	r0, s0
 800a99c:	f7f5 fc74 	bl	8000288 <__aeabi_dsub>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	f7f5 ff52 	bl	800084c <__aeabi_ddiv>
 800a9a8:	e7e6      	b.n	800a978 <__ieee754_sqrt+0x30>
 800a9aa:	1509      	asrs	r1, r1, #20
 800a9ac:	d076      	beq.n	800aa9c <__ieee754_sqrt+0x154>
 800a9ae:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a9b2:	07ce      	lsls	r6, r1, #31
 800a9b4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a9b8:	bf5e      	ittt	pl
 800a9ba:	0fda      	lsrpl	r2, r3, #31
 800a9bc:	005b      	lslpl	r3, r3, #1
 800a9be:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a9c2:	0fda      	lsrs	r2, r3, #31
 800a9c4:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a9c8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	106d      	asrs	r5, r5, #1
 800a9d0:	005b      	lsls	r3, r3, #1
 800a9d2:	f04f 0e16 	mov.w	lr, #22
 800a9d6:	4684      	mov	ip, r0
 800a9d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9dc:	eb0c 0401 	add.w	r4, ip, r1
 800a9e0:	4294      	cmp	r4, r2
 800a9e2:	bfde      	ittt	le
 800a9e4:	1b12      	suble	r2, r2, r4
 800a9e6:	eb04 0c01 	addle.w	ip, r4, r1
 800a9ea:	1840      	addle	r0, r0, r1
 800a9ec:	0052      	lsls	r2, r2, #1
 800a9ee:	f1be 0e01 	subs.w	lr, lr, #1
 800a9f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a9f6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a9fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a9fe:	d1ed      	bne.n	800a9dc <__ieee754_sqrt+0x94>
 800aa00:	4671      	mov	r1, lr
 800aa02:	2720      	movs	r7, #32
 800aa04:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800aa08:	4562      	cmp	r2, ip
 800aa0a:	eb04 060e 	add.w	r6, r4, lr
 800aa0e:	dc02      	bgt.n	800aa16 <__ieee754_sqrt+0xce>
 800aa10:	d113      	bne.n	800aa3a <__ieee754_sqrt+0xf2>
 800aa12:	429e      	cmp	r6, r3
 800aa14:	d811      	bhi.n	800aa3a <__ieee754_sqrt+0xf2>
 800aa16:	2e00      	cmp	r6, #0
 800aa18:	eb06 0e04 	add.w	lr, r6, r4
 800aa1c:	da43      	bge.n	800aaa6 <__ieee754_sqrt+0x15e>
 800aa1e:	f1be 0f00 	cmp.w	lr, #0
 800aa22:	db40      	blt.n	800aaa6 <__ieee754_sqrt+0x15e>
 800aa24:	f10c 0801 	add.w	r8, ip, #1
 800aa28:	eba2 020c 	sub.w	r2, r2, ip
 800aa2c:	429e      	cmp	r6, r3
 800aa2e:	bf88      	it	hi
 800aa30:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800aa34:	1b9b      	subs	r3, r3, r6
 800aa36:	4421      	add	r1, r4
 800aa38:	46c4      	mov	ip, r8
 800aa3a:	0052      	lsls	r2, r2, #1
 800aa3c:	3f01      	subs	r7, #1
 800aa3e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800aa42:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800aa46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa4a:	d1dd      	bne.n	800aa08 <__ieee754_sqrt+0xc0>
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	d006      	beq.n	800aa5e <__ieee754_sqrt+0x116>
 800aa50:	1c4c      	adds	r4, r1, #1
 800aa52:	bf13      	iteet	ne
 800aa54:	3101      	addne	r1, #1
 800aa56:	3001      	addeq	r0, #1
 800aa58:	4639      	moveq	r1, r7
 800aa5a:	f021 0101 	bicne.w	r1, r1, #1
 800aa5e:	1043      	asrs	r3, r0, #1
 800aa60:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aa64:	0849      	lsrs	r1, r1, #1
 800aa66:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aa6a:	07c2      	lsls	r2, r0, #31
 800aa6c:	bf48      	it	mi
 800aa6e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800aa72:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800aa76:	460c      	mov	r4, r1
 800aa78:	463d      	mov	r5, r7
 800aa7a:	e77f      	b.n	800a97c <__ieee754_sqrt+0x34>
 800aa7c:	0ada      	lsrs	r2, r3, #11
 800aa7e:	3815      	subs	r0, #21
 800aa80:	055b      	lsls	r3, r3, #21
 800aa82:	2a00      	cmp	r2, #0
 800aa84:	d0fa      	beq.n	800aa7c <__ieee754_sqrt+0x134>
 800aa86:	02d7      	lsls	r7, r2, #11
 800aa88:	d50a      	bpl.n	800aaa0 <__ieee754_sqrt+0x158>
 800aa8a:	f1c1 0420 	rsb	r4, r1, #32
 800aa8e:	fa23 f404 	lsr.w	r4, r3, r4
 800aa92:	1e4d      	subs	r5, r1, #1
 800aa94:	408b      	lsls	r3, r1
 800aa96:	4322      	orrs	r2, r4
 800aa98:	1b41      	subs	r1, r0, r5
 800aa9a:	e788      	b.n	800a9ae <__ieee754_sqrt+0x66>
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	e7f0      	b.n	800aa82 <__ieee754_sqrt+0x13a>
 800aaa0:	0052      	lsls	r2, r2, #1
 800aaa2:	3101      	adds	r1, #1
 800aaa4:	e7ef      	b.n	800aa86 <__ieee754_sqrt+0x13e>
 800aaa6:	46e0      	mov	r8, ip
 800aaa8:	e7be      	b.n	800aa28 <__ieee754_sqrt+0xe0>
 800aaaa:	bf00      	nop
 800aaac:	7ff00000 	.word	0x7ff00000

0800aab0 <_init>:
 800aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab2:	bf00      	nop
 800aab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab6:	bc08      	pop	{r3}
 800aab8:	469e      	mov	lr, r3
 800aaba:	4770      	bx	lr

0800aabc <_fini>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	bf00      	nop
 800aac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac2:	bc08      	pop	{r3}
 800aac4:	469e      	mov	lr, r3
 800aac6:	4770      	bx	lr
