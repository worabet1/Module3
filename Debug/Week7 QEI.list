
Week7 QEI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007558  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080076f8  080076f8  000176f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d8  080077d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e0  080077e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080077e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000078  08007860  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08007860  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f97e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002184  00000000  00000000  0002fa26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00031bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  000329f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e77  00000000  00000000  00033768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5ae  00000000  00000000  0004b5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa60  00000000  00000000  0005ab8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f55ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  000f5640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080076e0 	.word	0x080076e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080076e0 	.word	0x080076e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2f>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b70:	bf24      	itt	cs
 8000b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7a:	d90d      	bls.n	8000b98 <__aeabi_d2f+0x30>
 8000b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b9c:	d121      	bne.n	8000be2 <__aeabi_d2f+0x7a>
 8000b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba2:	bfbc      	itt	lt
 8000ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	4770      	bxlt	lr
 8000baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb2:	f1c2 0218 	rsb	r2, r2, #24
 8000bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	f040 0001 	orrne.w	r0, r0, #1
 8000bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd4:	ea40 000c 	orr.w	r0, r0, ip
 8000bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be0:	e7cc      	b.n	8000b7c <__aeabi_d2f+0x14>
 8000be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000be6:	d107      	bne.n	8000bf8 <__aeabi_d2f+0x90>
 8000be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bec:	bf1e      	ittt	ne
 8000bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bf6:	4770      	bxne	lr
 8000bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_frsub>:
 8000c08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	e002      	b.n	8000c14 <__addsf3>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_fsub>:
 8000c10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c14 <__addsf3>:
 8000c14:	0042      	lsls	r2, r0, #1
 8000c16:	bf1f      	itttt	ne
 8000c18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c1c:	ea92 0f03 	teqne	r2, r3
 8000c20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c28:	d06a      	beq.n	8000d00 <__addsf3+0xec>
 8000c2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c32:	bfc1      	itttt	gt
 8000c34:	18d2      	addgt	r2, r2, r3
 8000c36:	4041      	eorgt	r1, r0
 8000c38:	4048      	eorgt	r0, r1
 8000c3a:	4041      	eorgt	r1, r0
 8000c3c:	bfb8      	it	lt
 8000c3e:	425b      	neglt	r3, r3
 8000c40:	2b19      	cmp	r3, #25
 8000c42:	bf88      	it	hi
 8000c44:	4770      	bxhi	lr
 8000c46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c62:	bf18      	it	ne
 8000c64:	4249      	negne	r1, r1
 8000c66:	ea92 0f03 	teq	r2, r3
 8000c6a:	d03f      	beq.n	8000cec <__addsf3+0xd8>
 8000c6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c70:	fa41 fc03 	asr.w	ip, r1, r3
 8000c74:	eb10 000c 	adds.w	r0, r0, ip
 8000c78:	f1c3 0320 	rsb	r3, r3, #32
 8000c7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__addsf3+0x78>
 8000c86:	4249      	negs	r1, r1
 8000c88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c90:	d313      	bcc.n	8000cba <__addsf3+0xa6>
 8000c92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c96:	d306      	bcc.n	8000ca6 <__addsf3+0x92>
 8000c98:	0840      	lsrs	r0, r0, #1
 8000c9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c9e:	f102 0201 	add.w	r2, r2, #1
 8000ca2:	2afe      	cmp	r2, #254	; 0xfe
 8000ca4:	d251      	bcs.n	8000d4a <__addsf3+0x136>
 8000ca6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cae:	bf08      	it	eq
 8000cb0:	f020 0001 	biceq.w	r0, r0, #1
 8000cb4:	ea40 0003 	orr.w	r0, r0, r3
 8000cb8:	4770      	bx	lr
 8000cba:	0049      	lsls	r1, r1, #1
 8000cbc:	eb40 0000 	adc.w	r0, r0, r0
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cc8:	d2ed      	bcs.n	8000ca6 <__addsf3+0x92>
 8000cca:	fab0 fc80 	clz	ip, r0
 8000cce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cda:	bfaa      	itet	ge
 8000cdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ce0:	4252      	neglt	r2, r2
 8000ce2:	4318      	orrge	r0, r3
 8000ce4:	bfbc      	itt	lt
 8000ce6:	40d0      	lsrlt	r0, r2
 8000ce8:	4318      	orrlt	r0, r3
 8000cea:	4770      	bx	lr
 8000cec:	f092 0f00 	teq	r2, #0
 8000cf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cf4:	bf06      	itte	eq
 8000cf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cfa:	3201      	addeq	r2, #1
 8000cfc:	3b01      	subne	r3, #1
 8000cfe:	e7b5      	b.n	8000c6c <__addsf3+0x58>
 8000d00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d08:	bf18      	it	ne
 8000d0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d0e:	d021      	beq.n	8000d54 <__addsf3+0x140>
 8000d10:	ea92 0f03 	teq	r2, r3
 8000d14:	d004      	beq.n	8000d20 <__addsf3+0x10c>
 8000d16:	f092 0f00 	teq	r2, #0
 8000d1a:	bf08      	it	eq
 8000d1c:	4608      	moveq	r0, r1
 8000d1e:	4770      	bx	lr
 8000d20:	ea90 0f01 	teq	r0, r1
 8000d24:	bf1c      	itt	ne
 8000d26:	2000      	movne	r0, #0
 8000d28:	4770      	bxne	lr
 8000d2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d2e:	d104      	bne.n	8000d3a <__addsf3+0x126>
 8000d30:	0040      	lsls	r0, r0, #1
 8000d32:	bf28      	it	cs
 8000d34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d38:	4770      	bx	lr
 8000d3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d3e:	bf3c      	itt	cc
 8000d40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bxcc	lr
 8000d46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d52:	4770      	bx	lr
 8000d54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d58:	bf16      	itet	ne
 8000d5a:	4608      	movne	r0, r1
 8000d5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d60:	4601      	movne	r1, r0
 8000d62:	0242      	lsls	r2, r0, #9
 8000d64:	bf06      	itte	eq
 8000d66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d6a:	ea90 0f01 	teqeq	r0, r1
 8000d6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_ui2f>:
 8000d74:	f04f 0300 	mov.w	r3, #0
 8000d78:	e004      	b.n	8000d84 <__aeabi_i2f+0x8>
 8000d7a:	bf00      	nop

08000d7c <__aeabi_i2f>:
 8000d7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d80:	bf48      	it	mi
 8000d82:	4240      	negmi	r0, r0
 8000d84:	ea5f 0c00 	movs.w	ip, r0
 8000d88:	bf08      	it	eq
 8000d8a:	4770      	bxeq	lr
 8000d8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d90:	4601      	mov	r1, r0
 8000d92:	f04f 0000 	mov.w	r0, #0
 8000d96:	e01c      	b.n	8000dd2 <__aeabi_l2f+0x2a>

08000d98 <__aeabi_ul2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e00a      	b.n	8000dbc <__aeabi_l2f+0x14>
 8000da6:	bf00      	nop

08000da8 <__aeabi_l2f>:
 8000da8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dac:	bf08      	it	eq
 8000dae:	4770      	bxeq	lr
 8000db0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000db4:	d502      	bpl.n	8000dbc <__aeabi_l2f+0x14>
 8000db6:	4240      	negs	r0, r0
 8000db8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dbc:	ea5f 0c01 	movs.w	ip, r1
 8000dc0:	bf02      	ittt	eq
 8000dc2:	4684      	moveq	ip, r0
 8000dc4:	4601      	moveq	r1, r0
 8000dc6:	2000      	moveq	r0, #0
 8000dc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dcc:	bf08      	it	eq
 8000dce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dd6:	fabc f28c 	clz	r2, ip
 8000dda:	3a08      	subs	r2, #8
 8000ddc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000de0:	db10      	blt.n	8000e04 <__aeabi_l2f+0x5c>
 8000de2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de6:	4463      	add	r3, ip
 8000de8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000df4:	fa20 f202 	lsr.w	r2, r0, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	f020 0001 	biceq.w	r0, r0, #1
 8000e02:	4770      	bx	lr
 8000e04:	f102 0220 	add.w	r2, r2, #32
 8000e08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0c:	f1c2 0220 	rsb	r2, r2, #32
 8000e10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e14:	fa21 f202 	lsr.w	r2, r1, r2
 8000e18:	eb43 0002 	adc.w	r0, r3, r2
 8000e1c:	bf08      	it	eq
 8000e1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_uldivmod>:
 8000e24:	b953      	cbnz	r3, 8000e3c <__aeabi_uldivmod+0x18>
 8000e26:	b94a      	cbnz	r2, 8000e3c <__aeabi_uldivmod+0x18>
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	bf08      	it	eq
 8000e2c:	2800      	cmpeq	r0, #0
 8000e2e:	bf1c      	itt	ne
 8000e30:	f04f 31ff 	movne.w	r1, #4294967295
 8000e34:	f04f 30ff 	movne.w	r0, #4294967295
 8000e38:	f000 b96e 	b.w	8001118 <__aeabi_idiv0>
 8000e3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e44:	f000 f806 	bl	8000e54 <__udivmoddi4>
 8000e48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e50:	b004      	add	sp, #16
 8000e52:	4770      	bx	lr

08000e54 <__udivmoddi4>:
 8000e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e58:	9d08      	ldr	r5, [sp, #32]
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	468c      	mov	ip, r1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8083 	bne.w	8000f6a <__udivmoddi4+0x116>
 8000e64:	428a      	cmp	r2, r1
 8000e66:	4617      	mov	r7, r2
 8000e68:	d947      	bls.n	8000efa <__udivmoddi4+0xa6>
 8000e6a:	fab2 f282 	clz	r2, r2
 8000e6e:	b142      	cbz	r2, 8000e82 <__udivmoddi4+0x2e>
 8000e70:	f1c2 0020 	rsb	r0, r2, #32
 8000e74:	fa24 f000 	lsr.w	r0, r4, r0
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	4097      	lsls	r7, r2
 8000e7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e80:	4094      	lsls	r4, r2
 8000e82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e86:	0c23      	lsrs	r3, r4, #16
 8000e88:	fbbc f6f8 	udiv	r6, ip, r8
 8000e8c:	fa1f fe87 	uxth.w	lr, r7
 8000e90:	fb08 c116 	mls	r1, r8, r6, ip
 8000e94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e98:	fb06 f10e 	mul.w	r1, r6, lr
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	d909      	bls.n	8000eb4 <__udivmoddi4+0x60>
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ea6:	f080 8119 	bcs.w	80010dc <__udivmoddi4+0x288>
 8000eaa:	4299      	cmp	r1, r3
 8000eac:	f240 8116 	bls.w	80010dc <__udivmoddi4+0x288>
 8000eb0:	3e02      	subs	r6, #2
 8000eb2:	443b      	add	r3, r7
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ebc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x8c>
 8000ecc:	193c      	adds	r4, r7, r4
 8000ece:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed2:	f080 8105 	bcs.w	80010e0 <__udivmoddi4+0x28c>
 8000ed6:	45a6      	cmp	lr, r4
 8000ed8:	f240 8102 	bls.w	80010e0 <__udivmoddi4+0x28c>
 8000edc:	3802      	subs	r0, #2
 8000ede:	443c      	add	r4, r7
 8000ee0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	2600      	movs	r6, #0
 8000eea:	b11d      	cbz	r5, 8000ef4 <__udivmoddi4+0xa0>
 8000eec:	40d4      	lsrs	r4, r2
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	b902      	cbnz	r2, 8000efe <__udivmoddi4+0xaa>
 8000efc:	deff      	udf	#255	; 0xff
 8000efe:	fab2 f282 	clz	r2, r2
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	d150      	bne.n	8000fa8 <__udivmoddi4+0x154>
 8000f06:	1bcb      	subs	r3, r1, r7
 8000f08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	2601      	movs	r6, #1
 8000f12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000f16:	0c21      	lsrs	r1, r4, #16
 8000f18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f20:	fb08 f30c 	mul.w	r3, r8, ip
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d907      	bls.n	8000f38 <__udivmoddi4+0xe4>
 8000f28:	1879      	adds	r1, r7, r1
 8000f2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0xe2>
 8000f30:	428b      	cmp	r3, r1
 8000f32:	f200 80e9 	bhi.w	8001108 <__udivmoddi4+0x2b4>
 8000f36:	4684      	mov	ip, r0
 8000f38:	1ac9      	subs	r1, r1, r3
 8000f3a:	b2a3      	uxth	r3, r4
 8000f3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000f48:	fb08 f800 	mul.w	r8, r8, r0
 8000f4c:	45a0      	cmp	r8, r4
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x10c>
 8000f50:	193c      	adds	r4, r7, r4
 8000f52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x10a>
 8000f58:	45a0      	cmp	r8, r4
 8000f5a:	f200 80d9 	bhi.w	8001110 <__udivmoddi4+0x2bc>
 8000f5e:	4618      	mov	r0, r3
 8000f60:	eba4 0408 	sub.w	r4, r4, r8
 8000f64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f68:	e7bf      	b.n	8000eea <__udivmoddi4+0x96>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d909      	bls.n	8000f82 <__udivmoddi4+0x12e>
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	f000 80b1 	beq.w	80010d6 <__udivmoddi4+0x282>
 8000f74:	2600      	movs	r6, #0
 8000f76:	e9c5 0100 	strd	r0, r1, [r5]
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	4631      	mov	r1, r6
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	fab3 f683 	clz	r6, r3
 8000f86:	2e00      	cmp	r6, #0
 8000f88:	d14a      	bne.n	8001020 <__udivmoddi4+0x1cc>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d302      	bcc.n	8000f94 <__udivmoddi4+0x140>
 8000f8e:	4282      	cmp	r2, r0
 8000f90:	f200 80b8 	bhi.w	8001104 <__udivmoddi4+0x2b0>
 8000f94:	1a84      	subs	r4, r0, r2
 8000f96:	eb61 0103 	sbc.w	r1, r1, r3
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	468c      	mov	ip, r1
 8000f9e:	2d00      	cmp	r5, #0
 8000fa0:	d0a8      	beq.n	8000ef4 <__udivmoddi4+0xa0>
 8000fa2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000fa6:	e7a5      	b.n	8000ef4 <__udivmoddi4+0xa0>
 8000fa8:	f1c2 0320 	rsb	r3, r2, #32
 8000fac:	fa20 f603 	lsr.w	r6, r0, r3
 8000fb0:	4097      	lsls	r7, r2
 8000fb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000fb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fba:	40d9      	lsrs	r1, r3
 8000fbc:	4330      	orrs	r0, r6
 8000fbe:	0c03      	lsrs	r3, r0, #16
 8000fc0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000fc4:	fa1f f887 	uxth.w	r8, r7
 8000fc8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000fcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd0:	fb06 f108 	mul.w	r1, r6, r8
 8000fd4:	4299      	cmp	r1, r3
 8000fd6:	fa04 f402 	lsl.w	r4, r4, r2
 8000fda:	d909      	bls.n	8000ff0 <__udivmoddi4+0x19c>
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	f106 3cff 	add.w	ip, r6, #4294967295
 8000fe2:	f080 808d 	bcs.w	8001100 <__udivmoddi4+0x2ac>
 8000fe6:	4299      	cmp	r1, r3
 8000fe8:	f240 808a 	bls.w	8001100 <__udivmoddi4+0x2ac>
 8000fec:	3e02      	subs	r6, #2
 8000fee:	443b      	add	r3, r7
 8000ff0:	1a5b      	subs	r3, r3, r1
 8000ff2:	b281      	uxth	r1, r0
 8000ff4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ff8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ffc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001000:	fb00 f308 	mul.w	r3, r0, r8
 8001004:	428b      	cmp	r3, r1
 8001006:	d907      	bls.n	8001018 <__udivmoddi4+0x1c4>
 8001008:	1879      	adds	r1, r7, r1
 800100a:	f100 3cff 	add.w	ip, r0, #4294967295
 800100e:	d273      	bcs.n	80010f8 <__udivmoddi4+0x2a4>
 8001010:	428b      	cmp	r3, r1
 8001012:	d971      	bls.n	80010f8 <__udivmoddi4+0x2a4>
 8001014:	3802      	subs	r0, #2
 8001016:	4439      	add	r1, r7
 8001018:	1acb      	subs	r3, r1, r3
 800101a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800101e:	e778      	b.n	8000f12 <__udivmoddi4+0xbe>
 8001020:	f1c6 0c20 	rsb	ip, r6, #32
 8001024:	fa03 f406 	lsl.w	r4, r3, r6
 8001028:	fa22 f30c 	lsr.w	r3, r2, ip
 800102c:	431c      	orrs	r4, r3
 800102e:	fa20 f70c 	lsr.w	r7, r0, ip
 8001032:	fa01 f306 	lsl.w	r3, r1, r6
 8001036:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800103a:	fa21 f10c 	lsr.w	r1, r1, ip
 800103e:	431f      	orrs	r7, r3
 8001040:	0c3b      	lsrs	r3, r7, #16
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fa1f f884 	uxth.w	r8, r4
 800104a:	fb0e 1119 	mls	r1, lr, r9, r1
 800104e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001052:	fb09 fa08 	mul.w	sl, r9, r8
 8001056:	458a      	cmp	sl, r1
 8001058:	fa02 f206 	lsl.w	r2, r2, r6
 800105c:	fa00 f306 	lsl.w	r3, r0, r6
 8001060:	d908      	bls.n	8001074 <__udivmoddi4+0x220>
 8001062:	1861      	adds	r1, r4, r1
 8001064:	f109 30ff 	add.w	r0, r9, #4294967295
 8001068:	d248      	bcs.n	80010fc <__udivmoddi4+0x2a8>
 800106a:	458a      	cmp	sl, r1
 800106c:	d946      	bls.n	80010fc <__udivmoddi4+0x2a8>
 800106e:	f1a9 0902 	sub.w	r9, r9, #2
 8001072:	4421      	add	r1, r4
 8001074:	eba1 010a 	sub.w	r1, r1, sl
 8001078:	b2bf      	uxth	r7, r7
 800107a:	fbb1 f0fe 	udiv	r0, r1, lr
 800107e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001082:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001086:	fb00 f808 	mul.w	r8, r0, r8
 800108a:	45b8      	cmp	r8, r7
 800108c:	d907      	bls.n	800109e <__udivmoddi4+0x24a>
 800108e:	19e7      	adds	r7, r4, r7
 8001090:	f100 31ff 	add.w	r1, r0, #4294967295
 8001094:	d22e      	bcs.n	80010f4 <__udivmoddi4+0x2a0>
 8001096:	45b8      	cmp	r8, r7
 8001098:	d92c      	bls.n	80010f4 <__udivmoddi4+0x2a0>
 800109a:	3802      	subs	r0, #2
 800109c:	4427      	add	r7, r4
 800109e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80010a2:	eba7 0708 	sub.w	r7, r7, r8
 80010a6:	fba0 8902 	umull	r8, r9, r0, r2
 80010aa:	454f      	cmp	r7, r9
 80010ac:	46c6      	mov	lr, r8
 80010ae:	4649      	mov	r1, r9
 80010b0:	d31a      	bcc.n	80010e8 <__udivmoddi4+0x294>
 80010b2:	d017      	beq.n	80010e4 <__udivmoddi4+0x290>
 80010b4:	b15d      	cbz	r5, 80010ce <__udivmoddi4+0x27a>
 80010b6:	ebb3 020e 	subs.w	r2, r3, lr
 80010ba:	eb67 0701 	sbc.w	r7, r7, r1
 80010be:	fa07 fc0c 	lsl.w	ip, r7, ip
 80010c2:	40f2      	lsrs	r2, r6
 80010c4:	ea4c 0202 	orr.w	r2, ip, r2
 80010c8:	40f7      	lsrs	r7, r6
 80010ca:	e9c5 2700 	strd	r2, r7, [r5]
 80010ce:	2600      	movs	r6, #0
 80010d0:	4631      	mov	r1, r6
 80010d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d6:	462e      	mov	r6, r5
 80010d8:	4628      	mov	r0, r5
 80010da:	e70b      	b.n	8000ef4 <__udivmoddi4+0xa0>
 80010dc:	4606      	mov	r6, r0
 80010de:	e6e9      	b.n	8000eb4 <__udivmoddi4+0x60>
 80010e0:	4618      	mov	r0, r3
 80010e2:	e6fd      	b.n	8000ee0 <__udivmoddi4+0x8c>
 80010e4:	4543      	cmp	r3, r8
 80010e6:	d2e5      	bcs.n	80010b4 <__udivmoddi4+0x260>
 80010e8:	ebb8 0e02 	subs.w	lr, r8, r2
 80010ec:	eb69 0104 	sbc.w	r1, r9, r4
 80010f0:	3801      	subs	r0, #1
 80010f2:	e7df      	b.n	80010b4 <__udivmoddi4+0x260>
 80010f4:	4608      	mov	r0, r1
 80010f6:	e7d2      	b.n	800109e <__udivmoddi4+0x24a>
 80010f8:	4660      	mov	r0, ip
 80010fa:	e78d      	b.n	8001018 <__udivmoddi4+0x1c4>
 80010fc:	4681      	mov	r9, r0
 80010fe:	e7b9      	b.n	8001074 <__udivmoddi4+0x220>
 8001100:	4666      	mov	r6, ip
 8001102:	e775      	b.n	8000ff0 <__udivmoddi4+0x19c>
 8001104:	4630      	mov	r0, r6
 8001106:	e74a      	b.n	8000f9e <__udivmoddi4+0x14a>
 8001108:	f1ac 0c02 	sub.w	ip, ip, #2
 800110c:	4439      	add	r1, r7
 800110e:	e713      	b.n	8000f38 <__udivmoddi4+0xe4>
 8001110:	3802      	subs	r0, #2
 8001112:	443c      	add	r4, r7
 8001114:	e724      	b.n	8000f60 <__udivmoddi4+0x10c>
 8001116:	bf00      	nop

08001118 <__aeabi_idiv0>:
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001120:	ed2d 8b02 	vpush	{d8}
 8001124:	b08e      	sub	sp, #56	; 0x38
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001128:	f001 fcc2 	bl	8002ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112c:	f000 f9bc 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001130:	f000 fc22 	bl	8001978 <MX_GPIO_Init>
  MX_DMA_Init();
 8001134:	f000 fc00 	bl	8001938 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001138:	f000 fbd4 	bl	80018e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800113c:	f000 fa6e 	bl	800161c <MX_TIM2_Init>
  MX_ADC1_Init();
 8001140:	f000 fa1a 	bl	8001578 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001144:	f000 fab6 	bl	80016b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001148:	f000 fb2a 	bl	80017a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800114c:	f000 fb76 	bl	800183c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001150:	48b5      	ldr	r0, [pc, #724]	; (8001428 <main+0x30c>)
 8001152:	f003 fe75 	bl	8004e40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim3);
 8001156:	48b5      	ldr	r0, [pc, #724]	; (800142c <main+0x310>)
 8001158:	f003 fe18 	bl	8004d8c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800115c:	2100      	movs	r1, #0
 800115e:	48b3      	ldr	r0, [pc, #716]	; (800142c <main+0x310>)
 8001160:	f003 ff2a 	bl	8004fb8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8001164:	48b2      	ldr	r0, [pc, #712]	; (8001430 <main+0x314>)
 8001166:	f003 fe6b 	bl	8004e40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 800116a:	48b2      	ldr	r0, [pc, #712]	; (8001434 <main+0x318>)
 800116c:	f003 fe68 	bl	8004e40 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, ADCData, 4);
 8001170:	2204      	movs	r2, #4
 8001172:	49b1      	ldr	r1, [pc, #708]	; (8001438 <main+0x31c>)
 8001174:	48b1      	ldr	r0, [pc, #708]	; (800143c <main+0x320>)
 8001176:	f001 fe91 	bl	8002e9c <HAL_ADC_Start_DMA>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800117a:	213c      	movs	r1, #60	; 0x3c
 800117c:	48ad      	ldr	r0, [pc, #692]	; (8001434 <main+0x318>)
 800117e:	f004 f871 	bl	8005264 <HAL_TIM_Encoder_Start>
	{
	char temp[] = "Hello world\r\n please type something\r\n";
 8001182:	4baf      	ldr	r3, [pc, #700]	; (8001440 <main+0x324>)
 8001184:	1d3c      	adds	r4, r7, #4
 8001186:	461d      	mov	r5, r3
 8001188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001194:	6020      	str	r0, [r4, #0]
 8001196:	3404      	adds	r4, #4
 8001198:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)temp,strlen(temp) ,10);
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f81f 	bl	80001e0 <strlen>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	1d39      	adds	r1, r7, #4
 80011a8:	230a      	movs	r3, #10
 80011aa:	48a6      	ldr	r0, [pc, #664]	; (8001444 <main+0x328>)
 80011ac:	f004 ff35 	bl	800601a <HAL_UART_Transmit>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		check = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	48a4      	ldr	r0, [pc, #656]	; (8001448 <main+0x32c>)
 80011b6:	f003 f8db 	bl	8004370 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	4ba3      	ldr	r3, [pc, #652]	; (800144c <main+0x330>)
 80011c0:	601a      	str	r2, [r3, #0]
		//UART Part
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 4);
 80011c2:	2204      	movs	r2, #4
 80011c4:	49a2      	ldr	r1, [pc, #648]	; (8001450 <main+0x334>)
 80011c6:	489f      	ldr	r0, [pc, #636]	; (8001444 <main+0x328>)
 80011c8:	f004 ffb9 	bl	800613e <HAL_UART_Receive_IT>
		int16_t inputchar = UARTRecieveIT();
 80011cc:	f000 fc9a 	bl	8001b04 <UARTRecieveIT>
 80011d0:	4603      	mov	r3, r0
 80011d2:	86fb      	strh	r3, [r7, #54]	; 0x36
		if(inputchar!=-1)
 80011d4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d011      	beq.n	8001202 <main+0xe6>
		{

			sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
 80011de:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80011e2:	461a      	mov	r2, r3
 80011e4:	499b      	ldr	r1, [pc, #620]	; (8001454 <main+0x338>)
 80011e6:	489c      	ldr	r0, [pc, #624]	; (8001458 <main+0x33c>)
 80011e8:	f005 fd64 	bl	8006cb4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80011ec:	489a      	ldr	r0, [pc, #616]	; (8001458 <main+0x33c>)
 80011ee:	f7fe fff7 	bl	80001e0 <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	4997      	ldr	r1, [pc, #604]	; (8001458 <main+0x33c>)
 80011fc:	4891      	ldr	r0, [pc, #580]	; (8001444 <main+0x328>)
 80011fe:	f004 ff0c 	bl	800601a <HAL_UART_Transmit>
		}
		//PWM set
		if(emergency==0){
 8001202:	4b96      	ldr	r3, [pc, #600]	; (800145c <main+0x340>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1d2      	bne.n	80011b0 <main+0x94>
			if(require==9988){
 800120a:	4b95      	ldr	r3, [pc, #596]	; (8001460 <main+0x344>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8001464 <main+0x348>
 8001214:	eef4 7a47 	vcmp.f32	s15, s14
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d10c      	bne.n	8001238 <main+0x11c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001224:	4888      	ldr	r0, [pc, #544]	; (8001448 <main+0x32c>)
 8001226:	f003 f8bb 	bl	80043a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001230:	4885      	ldr	r0, [pc, #532]	; (8001448 <main+0x32c>)
 8001232:	f003 f8b5 	bl	80043a0 <HAL_GPIO_WritePin>
 8001236:	e028      	b.n	800128a <main+0x16e>
			}
			else if(require>0){
 8001238:	4b89      	ldr	r3, [pc, #548]	; (8001460 <main+0x344>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	dd0c      	ble.n	8001262 <main+0x146>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124e:	487e      	ldr	r0, [pc, #504]	; (8001448 <main+0x32c>)
 8001250:	f003 f8a6 	bl	80043a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 7100 	mov.w	r1, #512	; 0x200
 800125a:	487b      	ldr	r0, [pc, #492]	; (8001448 <main+0x32c>)
 800125c:	f003 f8a0 	bl	80043a0 <HAL_GPIO_WritePin>
 8001260:	e013      	b.n	800128a <main+0x16e>
			}
			else if(require<0){
 8001262:	4b7f      	ldr	r3, [pc, #508]	; (8001460 <main+0x344>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	d50b      	bpl.n	800128a <main+0x16e>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001278:	4873      	ldr	r0, [pc, #460]	; (8001448 <main+0x32c>)
 800127a:	f003 f891 	bl	80043a0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001284:	4870      	ldr	r0, [pc, #448]	; (8001448 <main+0x32c>)
 8001286:	f003 f88b 	bl	80043a0 <HAL_GPIO_WritePin>
			}
			if (micros() - Timestamp_Encoder >= 100)
 800128a:	f001 f943 	bl	8002514 <micros>
 800128e:	4b76      	ldr	r3, [pc, #472]	; (8001468 <main+0x34c>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	ebb0 0802 	subs.w	r8, r0, r2
 8001298:	eb61 0903 	sbc.w	r9, r1, r3
 800129c:	f1b9 0f00 	cmp.w	r9, #0
 80012a0:	bf08      	it	eq
 80012a2:	f1b8 0f64 	cmpeq.w	r8, #100	; 0x64
 80012a6:	d32b      	bcc.n	8001300 <main+0x1e4>
			{
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 80012a8:	4b70      	ldr	r3, [pc, #448]	; (800146c <main+0x350>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b5f      	ldr	r3, [pc, #380]	; (800142c <main+0x310>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
				Timestamp_Encoder = micros();
 80012b2:	f001 f92f 	bl	8002514 <micros>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	496b      	ldr	r1, [pc, #428]	; (8001468 <main+0x34c>)
 80012bc:	e9c1 2300 	strd	r2, r3, [r1]
				EncoderVel =((2*EncoderVel + EncoderVelocity_Update())/3);
 80012c0:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <main+0x354>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80012ca:	f000 fd0b 	bl	8001ce4 <EncoderVelocity_Update>
 80012ce:	eef0 7a40 	vmov.f32	s15, s0
 80012d2:	ee38 7a27 	vadd.f32	s14, s16, s15
 80012d6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80012da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012de:	4b64      	ldr	r3, [pc, #400]	; (8001470 <main+0x354>)
 80012e0:	edc3 7a00 	vstr	s15, [r3]
				vrpm = EncoderVel / 524288 *60 ;
 80012e4:	4b62      	ldr	r3, [pc, #392]	; (8001470 <main+0x354>)
 80012e6:	ed93 7a00 	vldr	s14, [r3]
 80012ea:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001474 <main+0x358>
 80012ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f2:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001478 <main+0x35c>
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fa:	4b60      	ldr	r3, [pc, #384]	; (800147c <main+0x360>)
 80012fc:	edc3 7a00 	vstr	s15, [r3]
			}
			sclk[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	4851      	ldr	r0, [pc, #324]	; (8001448 <main+0x32c>)
 8001304:	f003 f834 	bl	8004370 <HAL_GPIO_ReadPin>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <main+0x364>)
 800130e:	601a      	str	r2, [r3, #0]
			if(zerostate == 1){
 8001310:	4b5c      	ldr	r3, [pc, #368]	; (8001484 <main+0x368>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d11e      	bne.n	8001356 <main+0x23a>
				if(sclk[0] == 0 && sclk[1] == 1){
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <main+0x364>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d11a      	bne.n	8001356 <main+0x23a>
 8001320:	4b57      	ldr	r3, [pc, #348]	; (8001480 <main+0x364>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d116      	bne.n	8001356 <main+0x23a>
					pwm = 0;
 8001328:	4b50      	ldr	r3, [pc, #320]	; (800146c <main+0x350>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
					position = 0;
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <main+0x36c>)
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
					require = 0;
 8001336:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <main+0x344>)
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
					zerostate = 0;
 800133e:	4b51      	ldr	r3, [pc, #324]	; (8001484 <main+0x368>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
					error = (TIM5->CNT);
 8001344:	4b51      	ldr	r3, [pc, #324]	; (800148c <main+0x370>)
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	ee07 3a90 	vmov	s15, r3
 800134c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001350:	4b4f      	ldr	r3, [pc, #316]	; (8001490 <main+0x374>)
 8001352:	edc3 7a00 	vstr	s15, [r3]
				}
			}
			sclk[1]=sclk[0];
 8001356:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <main+0x364>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a49      	ldr	r2, [pc, #292]	; (8001480 <main+0x364>)
 800135c:	6053      	str	r3, [r2, #4]
			position = ((TIM5->CNT) - error)/524288*360;
 800135e:	4b4b      	ldr	r3, [pc, #300]	; (800148c <main+0x370>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800136a:	4b49      	ldr	r3, [pc, #292]	; (8001490 <main+0x374>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001374:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001474 <main+0x358>
 8001378:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800137c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001494 <main+0x378>
 8001380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <main+0x36c>)
 8001386:	edc3 7a00 	vstr	s15, [r3]
			if(position<0){
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <main+0x36c>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	d509      	bpl.n	80013ae <main+0x292>
				position = 360 + position;
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <main+0x36c>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001494 <main+0x378>
 80013a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a8:	4b37      	ldr	r3, [pc, #220]	; (8001488 <main+0x36c>)
 80013aa:	edc3 7a00 	vstr	s15, [r3]
			}
			if (micros() - Timestamp_Encoder2 >= 100000)
 80013ae:	f001 f8b1 	bl	8002514 <micros>
 80013b2:	4b39      	ldr	r3, [pc, #228]	; (8001498 <main+0x37c>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	ebb0 0a02 	subs.w	sl, r0, r2
 80013bc:	eb61 0b03 	sbc.w	fp, r1, r3
 80013c0:	4a36      	ldr	r2, [pc, #216]	; (800149c <main+0x380>)
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	455b      	cmp	r3, fp
 80013c8:	bf08      	it	eq
 80013ca:	4552      	cmpeq	r2, sl
 80013cc:	f4bf aef0 	bcs.w	80011b0 <main+0x94>
			{
				int st1 = position;
 80013d0:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <main+0x36c>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013da:	ee17 3a90 	vmov	r3, s15
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
				int st2 = vrpm*6;
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <main+0x360>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013f2:	ee17 3a90 	vmov	r3, s15
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				sprintf(status,"Position is %d degree Velocity is %d degree/second \r\n",st1,st2);
 80013f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013fc:	4928      	ldr	r1, [pc, #160]	; (80014a0 <main+0x384>)
 80013fe:	4829      	ldr	r0, [pc, #164]	; (80014a4 <main+0x388>)
 8001400:	f005 fc58 	bl	8006cb4 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)status,strlen(status) ,10);
 8001404:	4827      	ldr	r0, [pc, #156]	; (80014a4 <main+0x388>)
 8001406:	f7fe feeb 	bl	80001e0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	230a      	movs	r3, #10
 8001410:	4924      	ldr	r1, [pc, #144]	; (80014a4 <main+0x388>)
 8001412:	480c      	ldr	r0, [pc, #48]	; (8001444 <main+0x328>)
 8001414:	f004 fe01 	bl	800601a <HAL_UART_Transmit>
				Timestamp_Encoder2 = micros();
 8001418:	f001 f87c 	bl	8002514 <micros>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	491d      	ldr	r1, [pc, #116]	; (8001498 <main+0x37c>)
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
	{
 8001426:	e6c3      	b.n	80011b0 <main+0x94>
 8001428:	20000320 	.word	0x20000320
 800142c:	20000228 	.word	0x20000228
 8001430:	20000190 	.word	0x20000190
 8001434:	200001dc 	.word	0x200001dc
 8001438:	20000094 	.word	0x20000094
 800143c:	20000270 	.word	0x20000270
 8001440:	08007744 	.word	0x08007744
 8001444:	20000368 	.word	0x20000368
 8001448:	40020000 	.word	0x40020000
 800144c:	2000016c 	.word	0x2000016c
 8001450:	200000f0 	.word	0x200000f0
 8001454:	080076f8 	.word	0x080076f8
 8001458:	200000d0 	.word	0x200000d0
 800145c:	20000168 	.word	0x20000168
 8001460:	200000cc 	.word	0x200000cc
 8001464:	461c1000 	.word	0x461c1000
 8001468:	200000b8 	.word	0x200000b8
 800146c:	20000164 	.word	0x20000164
 8001470:	200000b0 	.word	0x200000b0
 8001474:	49000000 	.word	0x49000000
 8001478:	42700000 	.word	0x42700000
 800147c:	200000c8 	.word	0x200000c8
 8001480:	20000114 	.word	0x20000114
 8001484:	20000110 	.word	0x20000110
 8001488:	2000011c 	.word	0x2000011c
 800148c:	40000c00 	.word	0x40000c00
 8001490:	20000120 	.word	0x20000120
 8001494:	43b40000 	.word	0x43b40000
 8001498:	200000c0 	.word	0x200000c0
 800149c:	0001869f 	.word	0x0001869f
 80014a0:	0800770c 	.word	0x0800770c
 80014a4:	200003bc 	.word	0x200003bc

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	; 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 fbf4 	bl	8006ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <SystemClock_Config+0xc8>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <SystemClock_Config+0xc8>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <SystemClock_Config+0xc8>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <SystemClock_Config+0xcc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <SystemClock_Config+0xcc>)
 80014f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <SystemClock_Config+0xcc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001504:	2302      	movs	r3, #2
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001508:	2301      	movs	r3, #1
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800150c:	2310      	movs	r3, #16
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001510:	2302      	movs	r3, #2
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001514:	2300      	movs	r3, #0
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001518:	2308      	movs	r3, #8
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800151c:	2364      	movs	r3, #100	; 0x64
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001520:	2302      	movs	r3, #2
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001524:	2304      	movs	r3, #4
 8001526:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4618      	mov	r0, r3
 800152e:	f002 ff69 	bl	8004404 <HAL_RCC_OscConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001538:	f001 f806 	bl	8002548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153c:	230f      	movs	r3, #15
 800153e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2103      	movs	r1, #3
 8001558:	4618      	mov	r0, r3
 800155a:	f003 f9cb 	bl	80048f4 <HAL_RCC_ClockConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001564:	f000 fff0 	bl	8002548 <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3750      	adds	r7, #80	; 0x50
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800157e:	463b      	mov	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_ADC1_Init+0x9c>)
 800158c:	4a22      	ldr	r2, [pc, #136]	; (8001618 <MX_ADC1_Init+0xa0>)
 800158e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001590:	4b20      	ldr	r3, [pc, #128]	; (8001614 <MX_ADC1_Init+0x9c>)
 8001592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001596:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <MX_ADC1_Init+0x9c>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015b4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015d8:	2201      	movs	r2, #1
 80015da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015de:	f001 fad9 	bl	8002b94 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80015e8:	f000 ffae 	bl	8002548 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80015ec:	2311      	movs	r3, #17
 80015ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80015f4:	2305      	movs	r3, #5
 80015f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_ADC1_Init+0x9c>)
 80015fe:	f001 fd65 	bl	80030cc <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001608:	f000 ff9e 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000270 	.word	0x20000270
 8001618:	40012000 	.word	0x40012000

0800161c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	463b      	mov	r3, r7
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001638:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_TIM2_Init+0x94>)
 800163a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800163e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_TIM2_Init+0x94>)
 8001642:	2263      	movs	r2, #99	; 0x63
 8001644:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_TIM2_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_TIM2_Init+0x94>)
 800164e:	f04f 32ff 	mov.w	r2, #4294967295
 8001652:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_TIM2_Init+0x94>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_TIM2_Init+0x94>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001660:	4813      	ldr	r0, [pc, #76]	; (80016b0 <MX_TIM2_Init+0x94>)
 8001662:	f003 fb43 	bl	8004cec <HAL_TIM_Base_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800166c:	f000 ff6c 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001674:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	4619      	mov	r1, r3
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <MX_TIM2_Init+0x94>)
 800167e:	f004 f845 	bl	800570c <HAL_TIM_ConfigClockSource>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001688:	f000 ff5e 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_TIM2_Init+0x94>)
 800169a:	f004 fbef 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016a4:	f000 ff50 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000320 	.word	0x20000320

080016b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08e      	sub	sp, #56	; 0x38
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	615a      	str	r2, [r3, #20]
 80016e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e4:	4b2c      	ldr	r3, [pc, #176]	; (8001798 <MX_TIM3_Init+0xe4>)
 80016e6:	4a2d      	ldr	r2, [pc, #180]	; (800179c <MX_TIM3_Init+0xe8>)
 80016e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016ea:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <MX_TIM3_Init+0xe4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b29      	ldr	r3, [pc, #164]	; (8001798 <MX_TIM3_Init+0xe4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80016f6:	4b28      	ldr	r3, [pc, #160]	; (8001798 <MX_TIM3_Init+0xe4>)
 80016f8:	f242 7210 	movw	r2, #10000	; 0x2710
 80016fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <MX_TIM3_Init+0xe4>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <MX_TIM3_Init+0xe4>)
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800170a:	4823      	ldr	r0, [pc, #140]	; (8001798 <MX_TIM3_Init+0xe4>)
 800170c:	f003 faee 	bl	8004cec <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001716:	f000 ff17 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001724:	4619      	mov	r1, r3
 8001726:	481c      	ldr	r0, [pc, #112]	; (8001798 <MX_TIM3_Init+0xe4>)
 8001728:	f003 fff0 	bl	800570c <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001732:	f000 ff09 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001736:	4818      	ldr	r0, [pc, #96]	; (8001798 <MX_TIM3_Init+0xe4>)
 8001738:	f003 fbe4 	bl	8004f04 <HAL_TIM_PWM_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001742:	f000 ff01 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001746:	2320      	movs	r3, #32
 8001748:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	4619      	mov	r1, r3
 8001754:	4810      	ldr	r0, [pc, #64]	; (8001798 <MX_TIM3_Init+0xe4>)
 8001756:	f004 fb91 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001760:	f000 fef2 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001764:	2360      	movs	r3, #96	; 0x60
 8001766:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2200      	movs	r2, #0
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <MX_TIM3_Init+0xe4>)
 800177c:	f003 ff08 	bl	8005590 <HAL_TIM_PWM_ConfigChannel>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001786:	f000 fedf 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <MX_TIM3_Init+0xe4>)
 800178c:	f001 f818 	bl	80027c0 <HAL_TIM_MspPostInit>

}
 8001790:	bf00      	nop
 8001792:	3738      	adds	r7, #56	; 0x38
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000228 	.word	0x20000228
 800179c:	40000400 	.word	0x40000400

080017a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_TIM4_Init+0x94>)
 80017be:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <MX_TIM4_Init+0x98>)
 80017c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_TIM4_Init+0x94>)
 80017c4:	2263      	movs	r2, #99	; 0x63
 80017c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_TIM4_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_TIM4_Init+0x94>)
 80017d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_TIM4_Init+0x94>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_TIM4_Init+0x94>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017e2:	4814      	ldr	r0, [pc, #80]	; (8001834 <MX_TIM4_Init+0x94>)
 80017e4:	f003 fa82 	bl	8004cec <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80017ee:	f000 feab 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	4619      	mov	r1, r3
 80017fe:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_TIM4_Init+0x94>)
 8001800:	f003 ff84 	bl	800570c <HAL_TIM_ConfigClockSource>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800180a:	f000 fe9d 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	4619      	mov	r1, r3
 800181a:	4806      	ldr	r0, [pc, #24]	; (8001834 <MX_TIM4_Init+0x94>)
 800181c:	f004 fb2e 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001826:	f000 fe8f 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000190 	.word	0x20000190
 8001838:	40000800 	.word	0x40000800

0800183c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2224      	movs	r2, #36	; 0x24
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f005 fa2a 	bl	8006ca4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <MX_TIM5_Init+0xa0>)
 800185a:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <MX_TIM5_Init+0xa4>)
 800185c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800185e:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <MX_TIM5_Init+0xa0>)
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <MX_TIM5_Init+0xa0>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 524288;
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <MX_TIM5_Init+0xa0>)
 800186c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001870:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_TIM5_Init+0xa0>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_TIM5_Init+0xa0>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800187e:	2303      	movs	r3, #3
 8001880:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001886:	2301      	movs	r3, #1
 8001888:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001896:	2301      	movs	r3, #1
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <MX_TIM5_Init+0xa0>)
 80018aa:	f003 fc35 	bl	8005118 <HAL_TIM_Encoder_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80018b4:	f000 fe48 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_TIM5_Init+0xa0>)
 80018c6:	f004 fad9 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80018d0:	f000 fe3a 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3730      	adds	r7, #48	; 0x30
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200001dc 	.word	0x200001dc
 80018e0:	40000c00 	.word	0x40000c00

080018e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <MX_USART2_UART_Init+0x50>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART2_UART_Init+0x4c>)
 800191c:	f004 fb30 	bl	8005f80 <HAL_UART_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001926:	f000 fe0f 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000368 	.word	0x20000368
 8001934:	40004400 	.word	0x40004400

08001938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_DMA_Init+0x3c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <MX_DMA_Init+0x3c>)
 8001948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_DMA_Init+0x3c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2038      	movs	r0, #56	; 0x38
 8001960:	f001 ff49 	bl	80037f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001964:	2038      	movs	r0, #56	; 0x38
 8001966:	f001 ff62 	bl	800382e <HAL_NVIC_EnableIRQ>

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800

08001978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <MX_GPIO_Init+0x118>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a3e      	ldr	r2, [pc, #248]	; (8001a90 <MX_GPIO_Init+0x118>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a37      	ldr	r2, [pc, #220]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a30      	ldr	r2, [pc, #192]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <MX_GPIO_Init+0x118>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001a04:	4823      	ldr	r0, [pc, #140]	; (8001a94 <MX_GPIO_Init+0x11c>)
 8001a06:	f002 fccb 	bl	80043a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <MX_GPIO_Init+0x120>)
 8001a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	481f      	ldr	r0, [pc, #124]	; (8001a9c <MX_GPIO_Init+0x124>)
 8001a20:	f002 fb22 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001a24:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4815      	ldr	r0, [pc, #84]	; (8001a94 <MX_GPIO_Init+0x11c>)
 8001a3e:	f002 fb13 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8001a42:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	480f      	ldr	r0, [pc, #60]	; (8001a94 <MX_GPIO_Init+0x11c>)
 8001a58:	f002 fb06 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <MX_GPIO_Init+0x120>)
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4808      	ldr	r0, [pc, #32]	; (8001a94 <MX_GPIO_Init+0x11c>)
 8001a72:	f002 faf9 	bl	8004068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2028      	movs	r0, #40	; 0x28
 8001a7c:	f001 febb 	bl	80037f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a80:	2028      	movs	r0, #40	; 0x28
 8001a82:	f001 fed4 	bl	800382e <HAL_NVIC_EnableIRQ>

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	10310000 	.word	0x10310000
 8001a9c:	40020800 	.word	0x40020800

08001aa0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_11)
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ab0:	d11e      	bne.n	8001af0 <HAL_GPIO_EXTI_Callback+0x50>
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0){
 8001ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ab6:	4810      	ldr	r0, [pc, #64]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001ab8:	f002 fc5a 	bl	8004370 <HAL_GPIO_ReadPin>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d113      	bne.n	8001aea <HAL_GPIO_EXTI_Callback+0x4a>
			emergency = 1;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ace:	480a      	ldr	r0, [pc, #40]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001ad0:	f002 fc66 	bl	80043a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ada:	4807      	ldr	r0, [pc, #28]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001adc:	f002 fc60 	bl	80043a0 <HAL_GPIO_WritePin>
			pwm = 9000;
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ae2:	f242 3228 	movw	r2, #9000	; 0x2328
 8001ae6:	601a      	str	r2, [r3, #0]
		}else{
			emergency = 0;
		}

	}
}
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_EXTI_Callback+0x50>
			emergency = 0;
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40020000 	.word	0x40020000
 8001afc:	20000168 	.word	0x20000168
 8001b00:	20000164 	.word	0x20000164

08001b04 <UARTRecieveIT>:
int16_t UARTRecieveIT()
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8001b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b0e:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <UARTRecieveIT+0x54>)
 8001b12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <UARTRecieveIT+0x54>)
 8001b18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <UARTRecieveIT+0x58>)
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d010      	beq.n	8001b48 <UARTRecieveIT+0x44>
	{
		data=RxDataBuffer[dataPos];
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <UARTRecieveIT+0x58>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <UARTRecieveIT+0x5c>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <UARTRecieveIT+0x58>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3301      	adds	r3, #1
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <UARTRecieveIT+0x54>)
 8001b38:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001b3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b3e:	fb02 f201 	mul.w	r2, r2, r1
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <UARTRecieveIT+0x58>)
 8001b46:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	20000368 	.word	0x20000368
 8001b5c:	20000170 	.word	0x20000170
 8001b60:	200000f0 	.word	0x200000f0

08001b64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	6078      	str	r0, [r7, #4]
	sprintf(TxDataBuffer, "Received:[%d%d%d%d]\r\n", RxDataBuffer[0],RxDataBuffer[1],RxDataBuffer[2],RxDataBuffer[3]);
 8001b6c:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001b74:	785b      	ldrb	r3, [r3, #1]
 8001b76:	4618      	mov	r0, r3
 8001b78:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001b7a:	789b      	ldrb	r3, [r3, #2]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001b80:	78db      	ldrb	r3, [r3, #3]
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	9200      	str	r2, [sp, #0]
 8001b86:	4603      	mov	r3, r0
 8001b88:	460a      	mov	r2, r1
 8001b8a:	494b      	ldr	r1, [pc, #300]	; (8001cb8 <HAL_UART_RxCpltCallback+0x154>)
 8001b8c:	484b      	ldr	r0, [pc, #300]	; (8001cbc <HAL_UART_RxCpltCallback+0x158>)
 8001b8e:	f005 f891 	bl	8006cb4 <siprintf>
	a0 = RxDataBuffer[0];
 8001b92:	4b48      	ldr	r3, [pc, #288]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <HAL_UART_RxCpltCallback+0x15c>)
 8001b9a:	601a      	str	r2, [r3, #0]
	a1 = RxDataBuffer[1];
 8001b9c:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001b9e:	785b      	ldrb	r3, [r3, #1]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b48      	ldr	r3, [pc, #288]	; (8001cc4 <HAL_UART_RxCpltCallback+0x160>)
 8001ba4:	601a      	str	r2, [r3, #0]
	a2 = RxDataBuffer[2];
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001ba8:	789b      	ldrb	r3, [r3, #2]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_UART_RxCpltCallback+0x164>)
 8001bae:	601a      	str	r2, [r3, #0]
	a3 = RxDataBuffer[3];
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001bb2:	78db      	ldrb	r3, [r3, #3]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <HAL_UART_RxCpltCallback+0x168>)
 8001bb8:	601a      	str	r2, [r3, #0]
	if(a0 == 115 && a1 == 116 && a2 == 111 && a3 == 112){ //stop
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_UART_RxCpltCallback+0x15c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b73      	cmp	r3, #115	; 0x73
 8001bc0:	d110      	bne.n	8001be4 <HAL_UART_RxCpltCallback+0x80>
 8001bc2:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_UART_RxCpltCallback+0x160>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b74      	cmp	r3, #116	; 0x74
 8001bc8:	d10c      	bne.n	8001be4 <HAL_UART_RxCpltCallback+0x80>
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_UART_RxCpltCallback+0x164>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b6f      	cmp	r3, #111	; 0x6f
 8001bd0:	d108      	bne.n	8001be4 <HAL_UART_RxCpltCallback+0x80>
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_UART_RxCpltCallback+0x168>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b70      	cmp	r3, #112	; 0x70
 8001bd8:	d104      	bne.n	8001be4 <HAL_UART_RxCpltCallback+0x80>
		require = 0;
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_UART_RxCpltCallback+0x16c>)
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e058      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x132>
	}
	else if(a0 == 115 && a1 == 101 && a2 == 116 && a3 == 48){ //set0
 8001be4:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <HAL_UART_RxCpltCallback+0x15c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b73      	cmp	r3, #115	; 0x73
 8001bea:	d116      	bne.n	8001c1a <HAL_UART_RxCpltCallback+0xb6>
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_UART_RxCpltCallback+0x160>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b65      	cmp	r3, #101	; 0x65
 8001bf2:	d112      	bne.n	8001c1a <HAL_UART_RxCpltCallback+0xb6>
 8001bf4:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_UART_RxCpltCallback+0x164>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b74      	cmp	r3, #116	; 0x74
 8001bfa:	d10e      	bne.n	8001c1a <HAL_UART_RxCpltCallback+0xb6>
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_UART_RxCpltCallback+0x168>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b30      	cmp	r3, #48	; 0x30
 8001c02:	d10a      	bne.n	8001c1a <HAL_UART_RxCpltCallback+0xb6>
		require = 3;
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_UART_RxCpltCallback+0x16c>)
 8001c06:	4a33      	ldr	r2, [pc, #204]	; (8001cd4 <HAL_UART_RxCpltCallback+0x170>)
 8001c08:	601a      	str	r2, [r3, #0]
		pwm = 1000;
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_UART_RxCpltCallback+0x174>)
 8001c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c10:	601a      	str	r2, [r3, #0]
		zerostate = 1;
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_UART_RxCpltCallback+0x178>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e03d      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x132>
	}
	else if(a0 == 43){ //+
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_UART_RxCpltCallback+0x15c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b2b      	cmp	r3, #43	; 0x2b
 8001c20:	d11a      	bne.n	8001c58 <HAL_UART_RxCpltCallback+0xf4>
		require = ((RxDataBuffer[1]-48)*100) + ((RxDataBuffer[2]-48)*10) + ((RxDataBuffer[3]-48)*1);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001c24:	785b      	ldrb	r3, [r3, #1]
 8001c26:	3b30      	subs	r3, #48	; 0x30
 8001c28:	2264      	movs	r2, #100	; 0x64
 8001c2a:	fb02 f103 	mul.w	r1, r2, r3
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001c30:	789b      	ldrb	r3, [r3, #2]
 8001c32:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	18ca      	adds	r2, r1, r3
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001c42:	78db      	ldrb	r3, [r3, #3]
 8001c44:	3b30      	subs	r3, #48	; 0x30
 8001c46:	4413      	add	r3, r2
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_UART_RxCpltCallback+0x16c>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
 8001c56:	e01e      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x132>
	}
	else if(a0 == 45){ //-
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_UART_RxCpltCallback+0x15c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b2d      	cmp	r3, #45	; 0x2d
 8001c5e:	d11a      	bne.n	8001c96 <HAL_UART_RxCpltCallback+0x132>
			require = -1*(((RxDataBuffer[1]-48)*100) + ((RxDataBuffer[2]-48)*10) + ((RxDataBuffer[3]-48)*1));
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001c62:	785b      	ldrb	r3, [r3, #1]
 8001c64:	3b30      	subs	r3, #48	; 0x30
 8001c66:	2264      	movs	r2, #100	; 0x64
 8001c68:	fb02 f103 	mul.w	r1, r2, r3
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001c6e:	789b      	ldrb	r3, [r3, #2]
 8001c70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	18ca      	adds	r2, r1, r3
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_UART_RxCpltCallback+0x150>)
 8001c80:	78db      	ldrb	r3, [r3, #3]
 8001c82:	3b30      	subs	r3, #48	; 0x30
 8001c84:	4413      	add	r3, r2
 8001c86:	425b      	negs	r3, r3
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_UART_RxCpltCallback+0x16c>)
 8001c92:	edc3 7a00 	vstr	s15, [r3]
		}
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer),1000);
 8001c96:	4809      	ldr	r0, [pc, #36]	; (8001cbc <HAL_UART_RxCpltCallback+0x158>)
 8001c98:	f7fe faa2 	bl	80001e0 <strlen>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca4:	4905      	ldr	r1, [pc, #20]	; (8001cbc <HAL_UART_RxCpltCallback+0x158>)
 8001ca6:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <HAL_UART_RxCpltCallback+0x17c>)
 8001ca8:	f004 f9b7 	bl	800601a <HAL_UART_Transmit>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200000f0 	.word	0x200000f0
 8001cb8:	0800776c 	.word	0x0800776c
 8001cbc:	200000d0 	.word	0x200000d0
 8001cc0:	200003b8 	.word	0x200003b8
 8001cc4:	200001d8 	.word	0x200001d8
 8001cc8:	2000031c 	.word	0x2000031c
 8001ccc:	20000224 	.word	0x20000224
 8001cd0:	200000cc 	.word	0x200000cc
 8001cd4:	40400000 	.word	0x40400000
 8001cd8:	20000164 	.word	0x20000164
 8001cdc:	20000110 	.word	0x20000110
 8001ce0:	20000368 	.word	0x20000368

08001ce4 <EncoderVelocity_Update>:
#define  HTIM_ENCODER htim5
#define  MAX_SUBPOSITION_OVERFLOW 262144
#define  MAX_ENCODER_PERIOD 524288

float EncoderVelocity_Update()
{
 8001ce4:	b5b0      	push	{r4, r5, r7, lr}
 8001ce6:	ed2d 8b02 	vpush	{d8}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <EncoderVelocity_Update+0xb4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	60fb      	str	r3, [r7, #12]
	uint64_t EncoderNowTimestamp = micros();
 8001cf6:	f000 fc0d 	bl	8002514 <micros>
 8001cfa:	e9c7 0100 	strd	r0, r1, [r7]


	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <EncoderVelocity_Update+0xb8>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d08:	1a84      	subs	r4, r0, r2
 8001d0a:	eb61 0503 	sbc.w	r5, r1, r3
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <EncoderVelocity_Update+0xbc>)
 8001d10:	e9c3 4500 	strd	r4, r5, [r3]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <EncoderVelocity_Update+0xc0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <EncoderVelocity_Update+0xc4>)
 8001d20:	601a      	str	r2, [r3, #0]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001d22:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <EncoderVelocity_Update+0xc4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d2a:	db06      	blt.n	8001d3a <EncoderVelocity_Update+0x56>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <EncoderVelocity_Update+0xc4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8001d34:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <EncoderVelocity_Update+0xc4>)
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	e00a      	b.n	8001d50 <EncoderVelocity_Update+0x6c>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <EncoderVelocity_Update+0xc4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f513 2f80 	cmn.w	r3, #262144	; 0x40000
 8001d42:	dc05      	bgt.n	8001d50 <EncoderVelocity_Update+0x6c>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <EncoderVelocity_Update+0xc4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 8001d4c:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <EncoderVelocity_Update+0xc4>)
 8001d4e:	6013      	str	r3, [r2, #0]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <EncoderVelocity_Update+0xc0>)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001d56:	4911      	ldr	r1, [pc, #68]	; (8001d9c <EncoderVelocity_Update+0xb8>)
 8001d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d5c:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <EncoderVelocity_Update+0xc4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <EncoderVelocity_Update+0xc8>)
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <EncoderVelocity_Update+0xbc>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7ff f80c 	bl	8000d98 <__aeabi_ul2f>
 8001d80:	ee07 0a10 	vmov	s14, r0
 8001d84:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	ecbd 8b02 	vpop	{d8}
 8001d94:	bdb0      	pop	{r4, r5, r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200001dc 	.word	0x200001dc
 8001d9c:	20000178 	.word	0x20000178
 8001da0:	200003b0 	.word	0x200003b0
 8001da4:	20000180 	.word	0x20000180
 8001da8:	200002b8 	.word	0x200002b8
 8001dac:	000f4240 	.word	0x000f4240

08001db0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4aa4      	ldr	r2, [pc, #656]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d109      	bne.n	8001dd6 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		_micros += 4294967295;
 8001dc2:	4ba4      	ldr	r3, [pc, #656]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001dcc:	f143 0500 	adc.w	r5, r3, #0
 8001dd0:	4ba0      	ldr	r3, [pc, #640]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001dd2:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if(htim == &htim4)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a9f      	ldr	r2, [pc, #636]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	f040 8368 	bne.w	80024b0 <HAL_TIM_PeriodElapsedCallback+0x700>
	{
		if(emergency == 0){
 8001de0:	4b9e      	ldr	r3, [pc, #632]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 8363 	bne.w	80024b0 <HAL_TIM_PeriodElapsedCallback+0x700>
			if(input == 1){
 8001dea:	4b9d      	ldr	r3, [pc, #628]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	f040 819d 	bne.w	800212e <HAL_TIM_PeriodElapsedCallback+0x37e>
						ttrajec = 0;
 8001df4:	4b9b      	ldr	r3, [pc, #620]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
			//			vmax = 1.04;
			//			ptg = 2*pi;
						if(ptg < (2*pi/360*position)){
 8001dfc:	4b9a      	ldr	r3, [pc, #616]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e06:	eddf 6a99 	vldr	s13, [pc, #612]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001e0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e0e:	4b98      	ldr	r3, [pc, #608]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e18:	4b96      	ldr	r3, [pc, #600]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	dd66      	ble.n	8001ef6 <HAL_TIM_PeriodElapsedCallback+0x146>
							if (((2*pi/360*position)-ptg) <= (2*pi -(2*pi/360*position)+ ptg)){
 8001e28:	4b8f      	ldr	r3, [pc, #572]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e32:	eddf 6a8e 	vldr	s13, [pc, #568]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001e36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e3a:	4b8d      	ldr	r3, [pc, #564]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e44:	4b8b      	ldr	r3, [pc, #556]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e4e:	4b86      	ldr	r3, [pc, #536]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e58:	4b83      	ldr	r3, [pc, #524]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e62:	eddf 5a82 	vldr	s11, [pc, #520]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001e66:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001e6a:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e6c:	edd3 7a00 	vldr	s15, [r3]
 8001e70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e78:	4b7e      	ldr	r3, [pc, #504]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8a:	d816      	bhi.n	8001eba <HAL_TIM_PeriodElapsedCallback+0x10a>
								distance = ptg - (2*pi/360*position);
 8001e8c:	4b79      	ldr	r3, [pc, #484]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	4b75      	ldr	r3, [pc, #468]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e94:	edd3 7a00 	vldr	s15, [r3]
 8001e98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e9c:	ed9f 6a73 	vldr	s12, [pc, #460]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001ea0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ea4:	4b72      	ldr	r3, [pc, #456]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001ea6:	edd3 7a00 	vldr	s15, [r3]
 8001eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb2:	4b71      	ldr	r3, [pc, #452]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001eb4:	edc3 7a00 	vstr	s15, [r3]
 8001eb8:	e09b      	b.n	8001ff2 <HAL_TIM_PeriodElapsedCallback+0x242>
							}
							else{
								distance = 2*pi -(2*pi/360*position)+ ptg;
 8001eba:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ec4:	4b68      	ldr	r3, [pc, #416]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ece:	ed9f 6a67 	vldr	s12, [pc, #412]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001ed2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001ed6:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ee4:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ef0:	edc3 7a00 	vstr	s15, [r3]
 8001ef4:	e07d      	b.n	8001ff2 <HAL_TIM_PeriodElapsedCallback+0x242>
							}
						}
						else if (ptg >= (2*pi/360*position)){
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f00:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001f04:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f08:	4b59      	ldr	r3, [pc, #356]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f12:	4b58      	ldr	r3, [pc, #352]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	d867      	bhi.n	8001ff2 <HAL_TIM_PeriodElapsedCallback+0x242>
							if (ptg - (2*pi/360*position) <= 2*pi - ptg + (2*pi/360*position)){
 8001f22:	4b54      	ldr	r3, [pc, #336]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f32:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001f36:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001f3a:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f48:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f52:	4b48      	ldr	r3, [pc, #288]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f5c:	4b42      	ldr	r3, [pc, #264]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f5e:	edd3 7a00 	vldr	s15, [r3]
 8001f62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f66:	eddf 5a41 	vldr	s11, [pc, #260]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001f6a:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001f6e:	4b40      	ldr	r3, [pc, #256]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001f70:	edd3 7a00 	vldr	s15, [r3]
 8001f74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	d816      	bhi.n	8001fb4 <HAL_TIM_PeriodElapsedCallback+0x204>
								distance = ptg - (2*pi/360*position);
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001f88:	ed93 7a00 	vldr	s14, [r3]
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f96:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001f9a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001fa0:	edd3 7a00 	vldr	s15, [r3]
 8001fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fac:	4b32      	ldr	r3, [pc, #200]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001fae:	edc3 7a00 	vstr	s15, [r3]
 8001fb2:	e01e      	b.n	8001ff2 <HAL_TIM_PeriodElapsedCallback+0x242>
							}
							else{
								distance = -(2*pi - ptg + (2*pi/360*position));
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fd2:	ed9f 6a26 	vldr	s12, [pc, #152]	; 800206c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8001fd6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe8:	eef1 7a67 	vneg.f32	s15, s15
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001fee:	edc3 7a00 	vstr	s15, [r3]
							}
						}
						if(distance>=0)rotationtime = (3.00*distance)/(2*vmax);
 8001ff2:	4b21      	ldr	r3, [pc, #132]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	db42      	blt.n	8002088 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe faa6 	bl	8000558 <__aeabi_f2d>
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002012:	f7fe faf9 	bl	8000608 <__aeabi_dmul>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4614      	mov	r4, r2
 800201c:	461d      	mov	r5, r3
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002028:	ee17 0a90 	vmov	r0, s15
 800202c:	f7fe fa94 	bl	8000558 <__aeabi_f2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4620      	mov	r0, r4
 8002036:	4629      	mov	r1, r5
 8002038:	f7fe fc10 	bl	800085c <__aeabi_ddiv>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fd90 	bl	8000b68 <__aeabi_d2f>
 8002048:	4603      	mov	r3, r0
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e042      	b.n	80020d6 <HAL_TIM_PeriodElapsedCallback+0x326>
 8002050:	20000320 	.word	0x20000320
 8002054:	200000a8 	.word	0x200000a8
 8002058:	20000190 	.word	0x20000190
 800205c:	20000168 	.word	0x20000168
 8002060:	20000160 	.word	0x20000160
 8002064:	20000154 	.word	0x20000154
 8002068:	20000000 	.word	0x20000000
 800206c:	43b40000 	.word	0x43b40000
 8002070:	2000011c 	.word	0x2000011c
 8002074:	20000140 	.word	0x20000140
 8002078:	20000150 	.word	0x20000150
 800207c:	40080000 	.word	0x40080000
 8002080:	20000144 	.word	0x20000144
 8002084:	20000148 	.word	0x20000148
						else rotationtime = -(3.00*distance)/(2*vmax) ;
 8002088:	4b6a      	ldr	r3, [pc, #424]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x484>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa63 	bl	8000558 <__aeabi_f2d>
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	4b68      	ldr	r3, [pc, #416]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8002098:	f7fe fab6 	bl	8000608 <__aeabi_dmul>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4690      	mov	r8, r2
 80020a2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80020a6:	4b65      	ldr	r3, [pc, #404]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020b0:	ee17 0a90 	vmov	r0, s15
 80020b4:	f7fe fa50 	bl	8000558 <__aeabi_f2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4640      	mov	r0, r8
 80020be:	4649      	mov	r1, r9
 80020c0:	f7fe fbcc 	bl	800085c <__aeabi_ddiv>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4610      	mov	r0, r2
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fd4c 	bl	8000b68 <__aeabi_d2f>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4a5b      	ldr	r2, [pc, #364]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80020d4:	6013      	str	r3, [r2, #0]
						a = 2 * sqrt(vmax) / rotationtime;
 80020d6:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fa3c 	bl	8000558 <__aeabi_f2d>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	ec43 2b10 	vmov	d0, r2, r3
 80020e8:	f005 fa12 	bl	8007510 <sqrt>
 80020ec:	ec51 0b10 	vmov	r0, r1, d0
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	f7fe f8d2 	bl	800029c <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4614      	mov	r4, r2
 80020fe:	461d      	mov	r5, r3
 8002100:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0x490>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fa27 	bl	8000558 <__aeabi_f2d>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4620      	mov	r0, r4
 8002110:	4629      	mov	r1, r5
 8002112:	f7fe fba3 	bl	800085c <__aeabi_ddiv>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f7fe fd23 	bl	8000b68 <__aeabi_d2f>
 8002122:	4603      	mov	r3, r0
 8002124:	4a47      	ldr	r2, [pc, #284]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002126:	6013      	str	r3, [r2, #0]
						input = 0;
 8002128:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
//					if(distance>=0){
//						require = -(a*a*ttrajec*ttrajec)+(2*sqrt(vmax)*a*ttrajec);
//					}else{
//						require = (a*a*ttrajec*ttrajec)-(2*sqrt(vmax)*a*ttrajec);
//					}
					if(distance >=0){
 800212e:	4b41      	ldr	r3, [pc, #260]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0x484>)
 8002130:	edd3 7a00 	vldr	s15, [r3]
 8002134:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213c:	f2c0 808c 	blt.w	8002258 <HAL_TIM_PeriodElapsedCallback+0x4a8>
						calculatedp = (-(a*a*ttrajec*ttrajec*ttrajec/3) + (sqrt(vmax)*a*ttrajec*ttrajec)) + previous;
 8002140:	4b40      	ldr	r3, [pc, #256]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002142:	ed93 7a00 	vldr	s14, [r3]
 8002146:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002150:	4b3e      	ldr	r3, [pc, #248]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215a:	4b3c      	ldr	r3, [pc, #240]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002164:	4b39      	ldr	r3, [pc, #228]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800216e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002176:	eef1 7a67 	vneg.f32	s15, s15
 800217a:	ee17 3a90 	vmov	r3, s15
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9ea 	bl	8000558 <__aeabi_f2d>
 8002184:	4604      	mov	r4, r0
 8002186:	460d      	mov	r5, r1
 8002188:	4b2c      	ldr	r3, [pc, #176]	; (800223c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe f9e3 	bl	8000558 <__aeabi_f2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	ec43 2b10 	vmov	d0, r2, r3
 800219a:	f005 f9b9 	bl	8007510 <sqrt>
 800219e:	ec59 8b10 	vmov	r8, r9, d0
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0x494>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9d6 	bl	8000558 <__aeabi_f2d>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4640      	mov	r0, r8
 80021b2:	4649      	mov	r1, r9
 80021b4:	f7fe fa28 	bl	8000608 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4690      	mov	r8, r2
 80021be:	4699      	mov	r9, r3
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f9c7 	bl	8000558 <__aeabi_f2d>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4640      	mov	r0, r8
 80021d0:	4649      	mov	r1, r9
 80021d2:	f7fe fa19 	bl	8000608 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4690      	mov	r8, r2
 80021dc:	4699      	mov	r9, r3
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b8 	bl	8000558 <__aeabi_f2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4640      	mov	r0, r8
 80021ee:	4649      	mov	r1, r9
 80021f0:	f7fe fa0a 	bl	8000608 <__aeabi_dmul>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4620      	mov	r0, r4
 80021fa:	4629      	mov	r1, r5
 80021fc:	f7fe f84e 	bl	800029c <__adddf3>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4614      	mov	r4, r2
 8002206:	461d      	mov	r5, r3
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f9a3 	bl	8000558 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe f83f 	bl	800029c <__adddf3>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fc9f 	bl	8000b68 <__aeabi_d2f>
 800222a:	4603      	mov	r3, r0
 800222c:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e087      	b.n	8002342 <HAL_TIM_PeriodElapsedCallback+0x592>
 8002232:	bf00      	nop
 8002234:	20000150 	.word	0x20000150
 8002238:	40080000 	.word	0x40080000
 800223c:	20000144 	.word	0x20000144
 8002240:	20000148 	.word	0x20000148
 8002244:	2000014c 	.word	0x2000014c
 8002248:	20000160 	.word	0x20000160
 800224c:	20000154 	.word	0x20000154
 8002250:	2000015c 	.word	0x2000015c
 8002254:	20000158 	.word	0x20000158
					}else{
						calculatedp = ((a*a*ttrajec*ttrajec*ttrajec/3) - (sqrt(vmax)*a*ttrajec*ttrajec)) + previous;
 8002258:	4b9b      	ldr	r3, [pc, #620]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 800225a:	ed93 7a00 	vldr	s14, [r3]
 800225e:	4b9a      	ldr	r3, [pc, #616]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002268:	4b98      	ldr	r3, [pc, #608]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002272:	4b96      	ldr	r3, [pc, #600]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800227c:	4b93      	ldr	r3, [pc, #588]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800228a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800228e:	ee16 0a90 	vmov	r0, s13
 8002292:	f7fe f961 	bl	8000558 <__aeabi_f2d>
 8002296:	4604      	mov	r4, r0
 8002298:	460d      	mov	r5, r1
 800229a:	4b8d      	ldr	r3, [pc, #564]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f95a 	bl	8000558 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	ec43 2b10 	vmov	d0, r2, r3
 80022ac:	f005 f930 	bl	8007510 <sqrt>
 80022b0:	ec59 8b10 	vmov	r8, r9, d0
 80022b4:	4b84      	ldr	r3, [pc, #528]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94d 	bl	8000558 <__aeabi_f2d>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4640      	mov	r0, r8
 80022c4:	4649      	mov	r1, r9
 80022c6:	f7fe f99f 	bl	8000608 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4690      	mov	r8, r2
 80022d0:	4699      	mov	r9, r3
 80022d2:	4b7e      	ldr	r3, [pc, #504]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f93e 	bl	8000558 <__aeabi_f2d>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4640      	mov	r0, r8
 80022e2:	4649      	mov	r1, r9
 80022e4:	f7fe f990 	bl	8000608 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4690      	mov	r8, r2
 80022ee:	4699      	mov	r9, r3
 80022f0:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe f92f 	bl	8000558 <__aeabi_f2d>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4640      	mov	r0, r8
 8002300:	4649      	mov	r1, r9
 8002302:	f7fe f981 	bl	8000608 <__aeabi_dmul>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4620      	mov	r0, r4
 800230c:	4629      	mov	r1, r5
 800230e:	f7fd ffc3 	bl	8000298 <__aeabi_dsub>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4614      	mov	r4, r2
 8002318:	461d      	mov	r5, r3
 800231a:	4b6e      	ldr	r3, [pc, #440]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f91a 	bl	8000558 <__aeabi_f2d>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fd ffb6 	bl	800029c <__adddf3>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe fc16 	bl	8000b68 <__aeabi_d2f>
 800233c:	4603      	mov	r3, r0
 800233e:	4a66      	ldr	r2, [pc, #408]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8002340:	6013      	str	r3, [r2, #0]
					}
					ttrajec += 0.001;
 8002342:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f906 	bl	8000558 <__aeabi_f2d>
 800234c:	a35c      	add	r3, pc, #368	; (adr r3, 80024c0 <HAL_TIM_PeriodElapsedCallback+0x710>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fd ffa3 	bl	800029c <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fc03 	bl	8000b68 <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
 8002364:	4a59      	ldr	r2, [pc, #356]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8002366:	6013      	str	r3, [r2, #0]
					if(ttrajec >= rotationtime){
 8002368:	4b58      	ldr	r3, [pc, #352]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 800236a:	ed93 7a00 	vldr	s14, [r3]
 800236e:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237c:	db18      	blt.n	80023b0 <HAL_TIM_PeriodElapsedCallback+0x600>
						a = 0;
 800237e:	4b52      	ldr	r3, [pc, #328]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
						previous = 2*pi/360*position;
 8002386:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002390:	eddf 6a54 	vldr	s13, [pc, #336]	; 80024e4 <HAL_TIM_PeriodElapsedCallback+0x734>
 8002394:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x738>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a2:	4b4c      	ldr	r3, [pc, #304]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80023a4:	edc3 7a00 	vstr	s15, [r3]
						sumpid = 0;
 80023a8:	4b50      	ldr	r3, [pc, #320]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
					}
					// PID
					velocity = EncoderVel / 524288 *(2*pi);
 80023b0:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80023b2:	edd3 7a00 	vldr	s15, [r3]
 80023b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80024f4 <HAL_TIM_PeriodElapsedCallback+0x744>
 80023ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023be:	4b48      	ldr	r3, [pc, #288]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023cc:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80023ce:	edc3 7a00 	vstr	s15, [r3]
					if(require<0){
 80023d2:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x74c>)
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e0:	d50a      	bpl.n	80023f8 <HAL_TIM_PeriodElapsedCallback+0x648>
						errorpid[0] = velocity -require;
 80023e2:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	4b44      	ldr	r3, [pc, #272]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x74c>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f2:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80023f4:	edc3 7a00 	vstr	s15, [r3]
					}
					if(require>=0){
 80023f8:	4b40      	ldr	r3, [pc, #256]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x74c>)
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	db0a      	blt.n	800241e <HAL_TIM_PeriodElapsedCallback+0x66e>
						errorpid[0] = require - velocity;
 8002408:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x74c>)
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002418:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x750>)
 800241a:	edc3 7a00 	vstr	s15, [r3]
					}
					sumpid = sumpid +errorpid[0];
 800241e:	4b38      	ldr	r3, [pc, #224]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002420:	ed93 7a00 	vldr	s14, [r3]
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8002430:	edc3 7a00 	vstr	s15, [r3]
					pwm = Kp*errorpid[0] + Ki * sumpid + Kd * (errorpid[0]-errorpid[1]);
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002436:	ed93 7a00 	vldr	s14, [r3]
 800243a:	4b32      	ldr	r3, [pc, #200]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x754>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002444:	4b30      	ldr	r3, [pc, #192]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8002446:	edd3 6a00 	vldr	s13, [r3]
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0x73c>)
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002458:	4b29      	ldr	r3, [pc, #164]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x750>)
 800245a:	edd3 6a00 	vldr	s13, [r3]
 800245e:	4b28      	ldr	r3, [pc, #160]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002460:	edd3 7a01 	vldr	s15, [r3, #4]
 8002464:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <HAL_TIM_PeriodElapsedCallback+0x75c>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800247a:	ee17 2a90 	vmov	r2, s15
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8002480:	601a      	str	r2, [r3, #0]
					errorpid[1] = errorpid[0];
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8002488:	6053      	str	r3, [r2, #4]
					if(pwm<0){
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x760>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	da04      	bge.n	800249c <HAL_TIM_PeriodElapsedCallback+0x6ec>
						pwm = -pwm;
 8002492:	4b1f      	ldr	r3, [pc, #124]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	425b      	negs	r3, r3
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x760>)
 800249a:	6013      	str	r3, [r2, #0]
					}
					if(pwm>9001) pwm = 9000;
 800249c:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x760>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f242 3229 	movw	r2, #9001	; 0x2329
 80024a4:	4293      	cmp	r3, r2
 80024a6:	dd03      	ble.n	80024b0 <HAL_TIM_PeriodElapsedCallback+0x700>
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_TIM_PeriodElapsedCallback+0x760>)
 80024aa:	f242 3228 	movw	r2, #9000	; 0x2328
 80024ae:	601a      	str	r2, [r3, #0]
		}
	}
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024ba:	bf00      	nop
 80024bc:	f3af 8000 	nop.w
 80024c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80024c4:	3f50624d 	.word	0x3f50624d
 80024c8:	2000014c 	.word	0x2000014c
 80024cc:	20000154 	.word	0x20000154
 80024d0:	20000144 	.word	0x20000144
 80024d4:	2000015c 	.word	0x2000015c
 80024d8:	20000158 	.word	0x20000158
 80024dc:	20000148 	.word	0x20000148
 80024e0:	20000000 	.word	0x20000000
 80024e4:	43b40000 	.word	0x43b40000
 80024e8:	2000011c 	.word	0x2000011c
 80024ec:	20000138 	.word	0x20000138
 80024f0:	200000b0 	.word	0x200000b0
 80024f4:	49000000 	.word	0x49000000
 80024f8:	2000013c 	.word	0x2000013c
 80024fc:	200000cc 	.word	0x200000cc
 8002500:	20000130 	.word	0x20000130
 8002504:	20000124 	.word	0x20000124
 8002508:	20000128 	.word	0x20000128
 800250c:	2000012c 	.word	0x2000012c
 8002510:	20000164 	.word	0x20000164

08002514 <micros>:
uint64_t micros()
{
 8002514:	b4b0      	push	{r4, r5, r7}
 8002516:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <micros+0x2c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	4618      	mov	r0, r3
 8002520:	f04f 0100 	mov.w	r1, #0
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <micros+0x30>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	1884      	adds	r4, r0, r2
 800252c:	eb41 0503 	adc.w	r5, r1, r3
 8002530:	4622      	mov	r2, r4
 8002532:	462b      	mov	r3, r5
}
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	bcb0      	pop	{r4, r5, r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000320 	.word	0x20000320
 8002544:	200000a8 	.word	0x200000a8

08002548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002550:	e7fe      	b.n	8002550 <Error_Handler+0x8>
	...

08002554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_MspInit+0x4c>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	4a0f      	ldr	r2, [pc, #60]	; (80025a0 <HAL_MspInit+0x4c>)
 8002564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002568:	6453      	str	r3, [r2, #68]	; 0x44
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_MspInit+0x4c>)
 800256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	607b      	str	r3, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	603b      	str	r3, [r7, #0]
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_MspInit+0x4c>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <HAL_MspInit+0x4c>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_MspInit+0x4c>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002592:	2007      	movs	r0, #7
 8002594:	f001 f924 	bl	80037e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a26      	ldr	r2, [pc, #152]	; (800264c <HAL_ADC_MspInit+0xa8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d146      	bne.n	8002644 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b25      	ldr	r3, [pc, #148]	; (8002650 <HAL_ADC_MspInit+0xac>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a24      	ldr	r2, [pc, #144]	; (8002650 <HAL_ADC_MspInit+0xac>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <HAL_ADC_MspInit+0xac>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 80025d4:	4a20      	ldr	r2, [pc, #128]	; (8002658 <HAL_ADC_MspInit+0xb4>)
 80025d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e4:	4b1b      	ldr	r3, [pc, #108]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 80025ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025f2:	4b18      	ldr	r3, [pc, #96]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 80025f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 80025fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002600:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 8002604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002608:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800260a:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 800260c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002610:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 8002614:	2200      	movs	r2, #0
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002618:	480e      	ldr	r0, [pc, #56]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 800261a:	f001 f923 	bl	8003864 <HAL_DMA_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 8002624:	f7ff ff90 	bl	8002548 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_ADC_MspInit+0xb0>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	2100      	movs	r1, #0
 8002638:	2012      	movs	r0, #18
 800263a:	f001 f8dc 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800263e:	2012      	movs	r0, #18
 8002640:	f001 f8f5 	bl	800382e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40012000 	.word	0x40012000
 8002650:	40023800 	.word	0x40023800
 8002654:	200002bc 	.word	0x200002bc
 8002658:	40026410 	.word	0x40026410

0800265c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d116      	bne.n	800269c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	4b28      	ldr	r3, [pc, #160]	; (8002714 <HAL_TIM_Base_MspInit+0xb8>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a27      	ldr	r2, [pc, #156]	; (8002714 <HAL_TIM_Base_MspInit+0xb8>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_TIM_Base_MspInit+0xb8>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	201c      	movs	r0, #28
 8002690:	f001 f8b1 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002694:	201c      	movs	r0, #28
 8002696:	f001 f8ca 	bl	800382e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800269a:	e036      	b.n	800270a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <HAL_TIM_Base_MspInit+0xbc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d116      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_TIM_Base_MspInit+0xb8>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_TIM_Base_MspInit+0xb8>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_TIM_Base_MspInit+0xb8>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	201d      	movs	r0, #29
 80026c8:	f001 f895 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026cc:	201d      	movs	r0, #29
 80026ce:	f001 f8ae 	bl	800382e <HAL_NVIC_EnableIRQ>
}
 80026d2:	e01a      	b.n	800270a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_TIM_Base_MspInit+0xc0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d115      	bne.n	800270a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_TIM_Base_MspInit+0xb8>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <HAL_TIM_Base_MspInit+0xb8>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	6413      	str	r3, [r2, #64]	; 0x40
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_TIM_Base_MspInit+0xb8>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	201e      	movs	r0, #30
 8002700:	f001 f879 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002704:	201e      	movs	r0, #30
 8002706:	f001 f892 	bl	800382e <HAL_NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800

08002720 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_TIM_Encoder_MspInit+0x94>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d133      	bne.n	80027aa <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <HAL_TIM_Encoder_MspInit+0x98>)
 800274c:	f043 0308 	orr.w	r3, r3, #8
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_TIM_Encoder_MspInit+0x98>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800277a:	2303      	movs	r3, #3
 800277c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800278a:	2302      	movs	r3, #2
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4619      	mov	r1, r3
 8002794:	4809      	ldr	r0, [pc, #36]	; (80027bc <HAL_TIM_Encoder_MspInit+0x9c>)
 8002796:	f001 fc67 	bl	8004068 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	2032      	movs	r0, #50	; 0x32
 80027a0:	f001 f829 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80027a4:	2032      	movs	r0, #50	; 0x32
 80027a6:	f001 f842 	bl	800382e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80027aa:	bf00      	nop
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40000c00 	.word	0x40000c00
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020000 	.word	0x40020000

080027c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b088      	sub	sp, #32
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a12      	ldr	r2, [pc, #72]	; (8002828 <HAL_TIM_MspPostInit+0x68>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d11d      	bne.n	800281e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_TIM_MspPostInit+0x6c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a10      	ldr	r2, [pc, #64]	; (800282c <HAL_TIM_MspPostInit+0x6c>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_TIM_MspPostInit+0x6c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027fe:	2340      	movs	r3, #64	; 0x40
 8002800:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800280e:	2302      	movs	r3, #2
 8002810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	4619      	mov	r1, r3
 8002818:	4805      	ldr	r0, [pc, #20]	; (8002830 <HAL_TIM_MspPostInit+0x70>)
 800281a:	f001 fc25 	bl	8004068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800281e:	bf00      	nop
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40000400 	.word	0x40000400
 800282c:	40023800 	.word	0x40023800
 8002830:	40020000 	.word	0x40020000

08002834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <HAL_UART_MspInit+0x94>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d133      	bne.n	80028be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_UART_MspInit+0x98>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_UART_MspInit+0x98>)
 8002860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_UART_MspInit+0x98>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_UART_MspInit+0x98>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_UART_MspInit+0x98>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_UART_MspInit+0x98>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800288e:	230c      	movs	r3, #12
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800289e:	2307      	movs	r3, #7
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4809      	ldr	r0, [pc, #36]	; (80028d0 <HAL_UART_MspInit+0x9c>)
 80028aa:	f001 fbdd 	bl	8004068 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	2026      	movs	r0, #38	; 0x26
 80028b4:	f000 ff9f 	bl	80037f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028b8:	2026      	movs	r0, #38	; 0x26
 80028ba:	f000 ffb8 	bl	800382e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028be:	bf00      	nop
 80028c0:	3728      	adds	r7, #40	; 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40004400 	.word	0x40004400
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020000 	.word	0x40020000

080028d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <NMI_Handler+0x4>

080028da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028de:	e7fe      	b.n	80028de <HardFault_Handler+0x4>

080028e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <MemManage_Handler+0x4>

080028e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <BusFault_Handler+0x4>

080028ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <UsageFault_Handler+0x4>

080028f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002920:	f000 f918 	bl	8002b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}

08002928 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800292c:	4802      	ldr	r0, [pc, #8]	; (8002938 <ADC_IRQHandler+0x10>)
 800292e:	f000 f974 	bl	8002c1a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000270 	.word	0x20000270

0800293c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <TIM2_IRQHandler+0x10>)
 8002942:	f002 fd1d 	bl	8005380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000320 	.word	0x20000320

08002950 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002954:	4802      	ldr	r0, [pc, #8]	; (8002960 <TIM3_IRQHandler+0x10>)
 8002956:	f002 fd13 	bl	8005380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000228 	.word	0x20000228

08002964 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <TIM4_IRQHandler+0x10>)
 800296a:	f002 fd09 	bl	8005380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000190 	.word	0x20000190

08002978 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <USART2_IRQHandler+0x10>)
 800297e:	f003 fc0f 	bl	80061a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000368 	.word	0x20000368

0800298c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002990:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002994:	f001 fd1e 	bl	80043d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002998:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800299c:	f001 fd1a 	bl	80043d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <TIM5_IRQHandler+0x10>)
 80029aa:	f002 fce9 	bl	8005380 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200001dc 	.word	0x200001dc

080029b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <DMA2_Stream0_IRQHandler+0x10>)
 80029be:	f001 f8e9 	bl	8003b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200002bc 	.word	0x200002bc

080029cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d4:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <_sbrk+0x5c>)
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <_sbrk+0x60>)
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e0:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <_sbrk+0x64>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <_sbrk+0x64>)
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <_sbrk+0x68>)
 80029ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <_sbrk+0x64>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d207      	bcs.n	8002a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029fc:	f004 f928 	bl	8006c50 <__errno>
 8002a00:	4603      	mov	r3, r0
 8002a02:	220c      	movs	r2, #12
 8002a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	e009      	b.n	8002a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <_sbrk+0x64>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <_sbrk+0x64>)
 8002a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20020000 	.word	0x20020000
 8002a2c:	00000400 	.word	0x00000400
 8002a30:	20000184 	.word	0x20000184
 8002a34:	20000438 	.word	0x20000438

08002a38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <SystemInit+0x20>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <SystemInit+0x20>)
 8002a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a60:	480d      	ldr	r0, [pc, #52]	; (8002a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a62:	490e      	ldr	r1, [pc, #56]	; (8002a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a68:	e002      	b.n	8002a70 <LoopCopyDataInit>

08002a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6e:	3304      	adds	r3, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a74:	d3f9      	bcc.n	8002a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a78:	4c0b      	ldr	r4, [pc, #44]	; (8002aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a7c:	e001      	b.n	8002a82 <LoopFillZerobss>

08002a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a80:	3204      	adds	r2, #4

08002a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a84:	d3fb      	bcc.n	8002a7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a86:	f7ff ffd7 	bl	8002a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f004 f8e7 	bl	8006c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8e:	f7fe fb45 	bl	800111c <main>
  bx  lr    
 8002a92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a9c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002aa0:	080077e8 	.word	0x080077e8
  ldr r2, =_sbss
 8002aa4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002aa8:	20000434 	.word	0x20000434

08002aac <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <DMA1_Stream0_IRQHandler>
	...

08002ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_Init+0x40>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <HAL_Init+0x40>)
 8002aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002abe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_Init+0x40>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_Init+0x40>)
 8002ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <HAL_Init+0x40>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad8:	2003      	movs	r0, #3
 8002ada:	f000 fe81 	bl	80037e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f000 f808 	bl	8002af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae4:	f7ff fd36 	bl	8002554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023c00 	.word	0x40023c00

08002af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_InitTick+0x54>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_InitTick+0x58>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	4619      	mov	r1, r3
 8002b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fe99 	bl	800384a <HAL_SYSTICK_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00e      	b.n	8002b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b0f      	cmp	r3, #15
 8002b26:	d80a      	bhi.n	8002b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f000 fe61 	bl	80037f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b34:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <HAL_InitTick+0x5c>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	2000000c 	.word	0x2000000c
 8002b50:	20000008 	.word	0x20000008

08002b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_IncTick+0x20>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_IncTick+0x24>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_IncTick+0x24>)
 8002b66:	6013      	str	r3, [r2, #0]
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	2000000c 	.word	0x2000000c
 8002b78:	20000420 	.word	0x20000420

08002b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <HAL_GetTick+0x14>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000420 	.word	0x20000420

08002b94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e033      	b.n	8002c12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fcf6 	bl	80025a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d118      	bne.n	8002c04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bda:	f023 0302 	bic.w	r3, r3, #2
 8002bde:	f043 0202 	orr.w	r2, r3, #2
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fba2 	bl	8003330 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
 8002c02:	e001      	b.n	8002c08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	bf0c      	ite	eq
 8002c4e:	2301      	moveq	r3, #1
 8002c50:	2300      	movne	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d049      	beq.n	8002cf0 <HAL_ADC_IRQHandler+0xd6>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d046      	beq.n	8002cf0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d12b      	bne.n	8002ce0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d127      	bne.n	8002ce0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d006      	beq.n	8002cac <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d119      	bne.n	8002ce0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0220 	bic.w	r2, r2, #32
 8002cba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f9cb 	bl	800307c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f06f 0212 	mvn.w	r2, #18
 8002cee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d057      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x1b8>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d054      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d139      	bne.n	8002dc2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d12b      	bne.n	8002dc2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d124      	bne.n	8002dc2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d11d      	bne.n	8002dc2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d119      	bne.n	8002dc2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d9c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d105      	bne.n	8002dc2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f043 0201 	orr.w	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fc32 	bl	800362c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 020c 	mvn.w	r2, #12
 8002dd0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d017      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x21a>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d014      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10d      	bne.n	8002e34 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f93d 	bl	80030a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f06f 0201 	mvn.w	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e58:	bf0c      	ite	eq
 8002e5a:	2301      	moveq	r3, #1
 8002e5c:	2300      	movne	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d015      	beq.n	8002e94 <HAL_ADC_IRQHandler+0x27a>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d012      	beq.n	8002e94 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f043 0202 	orr.w	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0220 	mvn.w	r2, #32
 8002e82:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f917 	bl	80030b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f06f 0220 	mvn.w	r2, #32
 8002e92:	601a      	str	r2, [r3, #0]
  }
}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_Start_DMA+0x1e>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e0ce      	b.n	8003058 <HAL_ADC_Start_DMA+0x1bc>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d018      	beq.n	8002f02 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ee0:	4b5f      	ldr	r3, [pc, #380]	; (8003060 <HAL_ADC_Start_DMA+0x1c4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5f      	ldr	r2, [pc, #380]	; (8003064 <HAL_ADC_Start_DMA+0x1c8>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0c9a      	lsrs	r2, r3, #18
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ef4:	e002      	b.n	8002efc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f9      	bne.n	8002ef6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f10:	d107      	bne.n	8002f22 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f20:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	f040 8086 	bne.w	800303e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d007      	beq.n	8002f64 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d106      	bne.n	8002f80 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	f023 0206 	bic.w	r2, r3, #6
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
 8002f7e:	e002      	b.n	8002f86 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f8e:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_ADC_Start_DMA+0x1cc>)
 8002f90:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	4a35      	ldr	r2, [pc, #212]	; (800306c <HAL_ADC_Start_DMA+0x1d0>)
 8002f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	4a34      	ldr	r2, [pc, #208]	; (8003070 <HAL_ADC_Start_DMA+0x1d4>)
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	4a33      	ldr	r2, [pc, #204]	; (8003074 <HAL_ADC_Start_DMA+0x1d8>)
 8002fa8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fb2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fc2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	334c      	adds	r3, #76	; 0x4c
 8002fde:	4619      	mov	r1, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f000 fcec 	bl	80039c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10f      	bne.n	8003014 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d129      	bne.n	8003056 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	e020      	b.n	8003056 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a17      	ldr	r2, [pc, #92]	; (8003078 <HAL_ADC_Start_DMA+0x1dc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d11b      	bne.n	8003056 <HAL_ADC_Start_DMA+0x1ba>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d114      	bne.n	8003056 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	e00b      	b.n	8003056 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f043 0210 	orr.w	r2, r3, #16
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000004 	.word	0x20000004
 8003064:	431bde83 	.word	0x431bde83
 8003068:	40012300 	.word	0x40012300
 800306c:	08003529 	.word	0x08003529
 8003070:	080035e3 	.word	0x080035e3
 8003074:	080035ff 	.word	0x080035ff
 8003078:	40012000 	.word	0x40012000

0800307c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1c>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e113      	b.n	8003310 <HAL_ADC_ConfigChannel+0x244>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b09      	cmp	r3, #9
 80030f6:	d925      	bls.n	8003144 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68d9      	ldr	r1, [r3, #12]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	3b1e      	subs	r3, #30
 800310e:	2207      	movs	r2, #7
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43da      	mvns	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	400a      	ands	r2, r1
 800311c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68d9      	ldr	r1, [r3, #12]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	4618      	mov	r0, r3
 8003130:	4603      	mov	r3, r0
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4403      	add	r3, r0
 8003136:	3b1e      	subs	r3, #30
 8003138:	409a      	lsls	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	e022      	b.n	800318a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6919      	ldr	r1, [r3, #16]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	2207      	movs	r2, #7
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	400a      	ands	r2, r1
 8003166:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6919      	ldr	r1, [r3, #16]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	4618      	mov	r0, r3
 800317a:	4603      	mov	r3, r0
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4403      	add	r3, r0
 8003180:	409a      	lsls	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b06      	cmp	r3, #6
 8003190:	d824      	bhi.n	80031dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	3b05      	subs	r3, #5
 80031a4:	221f      	movs	r2, #31
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	400a      	ands	r2, r1
 80031b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4618      	mov	r0, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b05      	subs	r3, #5
 80031ce:	fa00 f203 	lsl.w	r2, r0, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	635a      	str	r2, [r3, #52]	; 0x34
 80031da:	e04c      	b.n	8003276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d824      	bhi.n	800322e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	3b23      	subs	r3, #35	; 0x23
 80031f6:	221f      	movs	r2, #31
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43da      	mvns	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	400a      	ands	r2, r1
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	4618      	mov	r0, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	3b23      	subs	r3, #35	; 0x23
 8003220:	fa00 f203 	lsl.w	r2, r0, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
 800322c:	e023      	b.n	8003276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	3b41      	subs	r3, #65	; 0x41
 8003240:	221f      	movs	r2, #31
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	400a      	ands	r2, r1
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	4618      	mov	r0, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	3b41      	subs	r3, #65	; 0x41
 800326a:	fa00 f203 	lsl.w	r2, r0, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003276:	4b29      	ldr	r3, [pc, #164]	; (800331c <HAL_ADC_ConfigChannel+0x250>)
 8003278:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a28      	ldr	r2, [pc, #160]	; (8003320 <HAL_ADC_ConfigChannel+0x254>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d10f      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1d8>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b12      	cmp	r3, #18
 800328a:	d10b      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <HAL_ADC_ConfigChannel+0x254>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d12b      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x23a>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_ADC_ConfigChannel+0x258>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <HAL_ADC_ConfigChannel+0x1f4>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b11      	cmp	r3, #17
 80032be:	d122      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <HAL_ADC_ConfigChannel+0x258>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d111      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_ADC_ConfigChannel+0x25c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_ADC_ConfigChannel+0x260>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	0c9a      	lsrs	r2, r3, #18
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032f8:	e002      	b.n	8003300 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f9      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40012300 	.word	0x40012300
 8003320:	40012000 	.word	0x40012000
 8003324:	10000012 	.word	0x10000012
 8003328:	20000004 	.word	0x20000004
 800332c:	431bde83 	.word	0x431bde83

08003330 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003338:	4b79      	ldr	r3, [pc, #484]	; (8003520 <ADC_Init+0x1f0>)
 800333a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	021a      	lsls	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	4a58      	ldr	r2, [pc, #352]	; (8003524 <ADC_Init+0x1f4>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d022      	beq.n	800340e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6899      	ldr	r1, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	e00f      	b.n	800342e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800341c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800342c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0202 	bic.w	r2, r2, #2
 800343c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6899      	ldr	r1, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7e1b      	ldrb	r3, [r3, #24]
 8003448:	005a      	lsls	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01b      	beq.n	8003494 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800347a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	3b01      	subs	r3, #1
 8003488:	035a      	lsls	r2, r3, #13
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	e007      	b.n	80034a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	3b01      	subs	r3, #1
 80034c0:	051a      	lsls	r2, r3, #20
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034e6:	025a      	lsls	r2, r3, #9
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6899      	ldr	r1, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	029a      	lsls	r2, r3, #10
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40012300 	.word	0x40012300
 8003524:	0f000001 	.word	0x0f000001

08003528 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800353e:	2b00      	cmp	r3, #0
 8003540:	d13c      	bne.n	80035bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d12b      	bne.n	80035b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003560:	2b00      	cmp	r3, #0
 8003562:	d127      	bne.n	80035b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800357c:	2b00      	cmp	r3, #0
 800357e:	d119      	bne.n	80035b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0220 	bic.w	r2, r2, #32
 800358e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f043 0201 	orr.w	r2, r3, #1
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff fd61 	bl	800307c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035ba:	e00e      	b.n	80035da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff fd75 	bl	80030b8 <HAL_ADC_ErrorCallback>
}
 80035ce:	e004      	b.n	80035da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	4798      	blx	r3
}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff fd4d 	bl	8003090 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035f6:	bf00      	nop
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2240      	movs	r2, #64	; 0x40
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f043 0204 	orr.w	r2, r3, #4
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff fd4a 	bl	80030b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800365c:	4013      	ands	r3, r2
 800365e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800366c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <__NVIC_SetPriorityGrouping+0x44>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	60d3      	str	r3, [r2, #12]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <__NVIC_GetPriorityGrouping+0x18>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	f003 0307 	and.w	r3, r3, #7
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	db0b      	blt.n	80036ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	4907      	ldr	r1, [pc, #28]	; (80036dc <__NVIC_EnableIRQ+0x38>)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2001      	movs	r0, #1
 80036c6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e100 	.word	0xe000e100

080036e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	6039      	str	r1, [r7, #0]
 80036ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	db0a      	blt.n	800370a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	490c      	ldr	r1, [pc, #48]	; (800372c <__NVIC_SetPriority+0x4c>)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	0112      	lsls	r2, r2, #4
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	440b      	add	r3, r1
 8003704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003708:	e00a      	b.n	8003720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4908      	ldr	r1, [pc, #32]	; (8003730 <__NVIC_SetPriority+0x50>)
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	3b04      	subs	r3, #4
 8003718:	0112      	lsls	r2, r2, #4
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	440b      	add	r3, r1
 800371e:	761a      	strb	r2, [r3, #24]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000e100 	.word	0xe000e100
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003734:	b480      	push	{r7}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f1c3 0307 	rsb	r3, r3, #7
 800374e:	2b04      	cmp	r3, #4
 8003750:	bf28      	it	cs
 8003752:	2304      	movcs	r3, #4
 8003754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3304      	adds	r3, #4
 800375a:	2b06      	cmp	r3, #6
 800375c:	d902      	bls.n	8003764 <NVIC_EncodePriority+0x30>
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3b03      	subs	r3, #3
 8003762:	e000      	b.n	8003766 <NVIC_EncodePriority+0x32>
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003768:	f04f 32ff 	mov.w	r2, #4294967295
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43da      	mvns	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	401a      	ands	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800377c:	f04f 31ff 	mov.w	r1, #4294967295
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	43d9      	mvns	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	4313      	orrs	r3, r2
         );
}
 800378e:	4618      	mov	r0, r3
 8003790:	3724      	adds	r7, #36	; 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ac:	d301      	bcc.n	80037b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00f      	b.n	80037d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b2:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <SysTick_Config+0x40>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ba:	210f      	movs	r1, #15
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	f7ff ff8e 	bl	80036e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <SysTick_Config+0x40>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ca:	4b04      	ldr	r3, [pc, #16]	; (80037dc <SysTick_Config+0x40>)
 80037cc:	2207      	movs	r2, #7
 80037ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	e000e010 	.word	0xe000e010

080037e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff29 	bl	8003640 <__NVIC_SetPriorityGrouping>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	4603      	mov	r3, r0
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003808:	f7ff ff3e 	bl	8003688 <__NVIC_GetPriorityGrouping>
 800380c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	6978      	ldr	r0, [r7, #20]
 8003814:	f7ff ff8e 	bl	8003734 <NVIC_EncodePriority>
 8003818:	4602      	mov	r2, r0
 800381a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ff5d 	bl	80036e0 <__NVIC_SetPriority>
}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff31 	bl	80036a4 <__NVIC_EnableIRQ>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ffa2 	bl	800379c <SysTick_Config>
 8003858:	4603      	mov	r3, r0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff f984 	bl	8002b7c <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e099      	b.n	80039b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a0:	e00f      	b.n	80038c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038a2:	f7ff f96b 	bl	8002b7c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d908      	bls.n	80038c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2203      	movs	r2, #3
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e078      	b.n	80039b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e8      	bne.n	80038a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4b38      	ldr	r3, [pc, #224]	; (80039bc <HAL_DMA_Init+0x158>)
 80038dc:	4013      	ands	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003906:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b04      	cmp	r3, #4
 800391a:	d107      	bne.n	800392c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003924:	4313      	orrs	r3, r2
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f023 0307 	bic.w	r3, r3, #7
 8003942:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	2b04      	cmp	r3, #4
 8003954:	d117      	bne.n	8003986 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00e      	beq.n	8003986 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fb01 	bl	8003f70 <DMA_CheckFifoParam>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2240      	movs	r2, #64	; 0x40
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003982:	2301      	movs	r3, #1
 8003984:	e016      	b.n	80039b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 fab8 	bl	8003f04 <DMA_CalcBaseAndBitshift>
 8003994:	4603      	mov	r3, r0
 8003996:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	223f      	movs	r2, #63	; 0x3f
 800399e:	409a      	lsls	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	f010803f 	.word	0xf010803f

080039c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_DMA_Start_IT+0x26>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e040      	b.n	8003a68 <HAL_DMA_Start_IT+0xa8>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d12f      	bne.n	8003a5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fa4a 	bl	8003ea8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	223f      	movs	r2, #63	; 0x3f
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0216 	orr.w	r2, r2, #22
 8003a2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0208 	orr.w	r2, r2, #8
 8003a46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e005      	b.n	8003a66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
 8003a64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a7e:	f7ff f87d 	bl	8002b7c <HAL_GetTick>
 8003a82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d008      	beq.n	8003aa2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e052      	b.n	8003b48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0216 	bic.w	r2, r2, #22
 8003ab0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ac0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_DMA_Abort+0x62>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0208 	bic.w	r2, r2, #8
 8003ae0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af2:	e013      	b.n	8003b1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003af4:	f7ff f842 	bl	8002b7c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d90c      	bls.n	8003b1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2203      	movs	r2, #3
 8003b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e015      	b.n	8003b48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e4      	bne.n	8003af4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	223f      	movs	r2, #63	; 0x3f
 8003b30:	409a      	lsls	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d004      	beq.n	8003b6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00c      	b.n	8003b88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2205      	movs	r2, #5
 8003b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ba0:	4b92      	ldr	r3, [pc, #584]	; (8003dec <HAL_DMA_IRQHandler+0x258>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a92      	ldr	r2, [pc, #584]	; (8003df0 <HAL_DMA_IRQHandler+0x25c>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0a9b      	lsrs	r3, r3, #10
 8003bac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01a      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d013      	beq.n	8003c00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0204 	bic.w	r2, r2, #4
 8003be6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bec:	2208      	movs	r2, #8
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf8:	f043 0201 	orr.w	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	2201      	movs	r2, #1
 8003c06:	409a      	lsls	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d012      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c22:	2201      	movs	r2, #1
 8003c24:	409a      	lsls	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	f043 0202 	orr.w	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d012      	beq.n	8003c6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c58:	2204      	movs	r2, #4
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	f043 0204 	orr.w	r2, r3, #4
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c70:	2210      	movs	r2, #16
 8003c72:	409a      	lsls	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d043      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d03c      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	2210      	movs	r2, #16
 8003c90:	409a      	lsls	r2, r3
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d018      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d024      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
 8003cc2:	e01f      	b.n	8003d04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01b      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
 8003cd4:	e016      	b.n	8003d04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d107      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0208 	bic.w	r2, r2, #8
 8003cf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d08:	2220      	movs	r2, #32
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 808e 	beq.w	8003e32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8086 	beq.w	8003e32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d136      	bne.n	8003dac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0216 	bic.w	r2, r2, #22
 8003d4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_DMA_IRQHandler+0x1da>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0208 	bic.w	r2, r2, #8
 8003d7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d82:	223f      	movs	r2, #63	; 0x3f
 8003d84:	409a      	lsls	r2, r3
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d07d      	beq.n	8003e9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
        }
        return;
 8003daa:	e078      	b.n	8003e9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01c      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d108      	bne.n	8003dda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d030      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
 8003dd8:	e02b      	b.n	8003e32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d027      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
 8003dea:	e022      	b.n	8003e32 <HAL_DMA_IRQHandler+0x29e>
 8003dec:	20000004 	.word	0x20000004
 8003df0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0210 	bic.w	r2, r2, #16
 8003e10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d032      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d022      	beq.n	8003e8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2205      	movs	r2, #5
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	3301      	adds	r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d307      	bcc.n	8003e7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f2      	bne.n	8003e5e <HAL_DMA_IRQHandler+0x2ca>
 8003e78:	e000      	b.n	8003e7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	4798      	blx	r3
 8003e9c:	e000      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e9e:	bf00      	nop
    }
  }
}
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop

08003ea8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ec4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d108      	bne.n	8003ee8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ee6:	e007      	b.n	8003ef8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	3b10      	subs	r3, #16
 8003f14:	4a14      	ldr	r2, [pc, #80]	; (8003f68 <DMA_CalcBaseAndBitshift+0x64>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f1e:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <DMA_CalcBaseAndBitshift+0x68>)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d909      	bls.n	8003f46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f3a:	f023 0303 	bic.w	r3, r3, #3
 8003f3e:	1d1a      	adds	r2, r3, #4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	659a      	str	r2, [r3, #88]	; 0x58
 8003f44:	e007      	b.n	8003f56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	aaaaaaab 	.word	0xaaaaaaab
 8003f6c:	0800779c 	.word	0x0800779c

08003f70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d11f      	bne.n	8003fca <DMA_CheckFifoParam+0x5a>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d856      	bhi.n	800403e <DMA_CheckFifoParam+0xce>
 8003f90:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <DMA_CheckFifoParam+0x28>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fa9 	.word	0x08003fa9
 8003f9c:	08003fbb 	.word	0x08003fbb
 8003fa0:	08003fa9 	.word	0x08003fa9
 8003fa4:	0800403f 	.word	0x0800403f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d046      	beq.n	8004042 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb8:	e043      	b.n	8004042 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fc2:	d140      	bne.n	8004046 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc8:	e03d      	b.n	8004046 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fd2:	d121      	bne.n	8004018 <DMA_CheckFifoParam+0xa8>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d837      	bhi.n	800404a <DMA_CheckFifoParam+0xda>
 8003fda:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <DMA_CheckFifoParam+0x70>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08003ff7 	.word	0x08003ff7
 8003fe8:	08003ff1 	.word	0x08003ff1
 8003fec:	08004009 	.word	0x08004009
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff4:	e030      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d025      	beq.n	800404e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004006:	e022      	b.n	800404e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004010:	d11f      	bne.n	8004052 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004016:	e01c      	b.n	8004052 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d903      	bls.n	8004026 <DMA_CheckFifoParam+0xb6>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d003      	beq.n	800402c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004024:	e018      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
      break;
 800402a:	e015      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00e      	beq.n	8004056 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
      break;
 800403c:	e00b      	b.n	8004056 <DMA_CheckFifoParam+0xe6>
      break;
 800403e:	bf00      	nop
 8004040:	e00a      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;
 8004042:	bf00      	nop
 8004044:	e008      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;
 8004046:	bf00      	nop
 8004048:	e006      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;
 800404a:	bf00      	nop
 800404c:	e004      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;
 800404e:	bf00      	nop
 8004050:	e002      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;   
 8004052:	bf00      	nop
 8004054:	e000      	b.n	8004058 <DMA_CheckFifoParam+0xe8>
      break;
 8004056:	bf00      	nop
    }
  } 
  
  return status; 
 8004058:	7bfb      	ldrb	r3, [r7, #15]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop

08004068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004068:	b480      	push	{r7}
 800406a:	b089      	sub	sp, #36	; 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e159      	b.n	8004338 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004084:	2201      	movs	r2, #1
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	429a      	cmp	r2, r3
 800409e:	f040 8148 	bne.w	8004332 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d005      	beq.n	80040ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d130      	bne.n	800411c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040f0:	2201      	movs	r2, #1
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 0201 	and.w	r2, r3, #1
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b03      	cmp	r3, #3
 8004126:	d017      	beq.n	8004158 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	2203      	movs	r2, #3
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4013      	ands	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689a      	ldr	r2, [r3, #8]
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d123      	bne.n	80041ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	08da      	lsrs	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3208      	adds	r2, #8
 800416c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	220f      	movs	r2, #15
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	08da      	lsrs	r2, r3, #3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3208      	adds	r2, #8
 80041a6:	69b9      	ldr	r1, [r7, #24]
 80041a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	2203      	movs	r2, #3
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80a2 	beq.w	8004332 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	4b57      	ldr	r3, [pc, #348]	; (8004350 <HAL_GPIO_Init+0x2e8>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	4a56      	ldr	r2, [pc, #344]	; (8004350 <HAL_GPIO_Init+0x2e8>)
 80041f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041fc:	6453      	str	r3, [r2, #68]	; 0x44
 80041fe:	4b54      	ldr	r3, [pc, #336]	; (8004350 <HAL_GPIO_Init+0x2e8>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800420a:	4a52      	ldr	r2, [pc, #328]	; (8004354 <HAL_GPIO_Init+0x2ec>)
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	3302      	adds	r3, #2
 8004212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	220f      	movs	r2, #15
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a49      	ldr	r2, [pc, #292]	; (8004358 <HAL_GPIO_Init+0x2f0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d019      	beq.n	800426a <HAL_GPIO_Init+0x202>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a48      	ldr	r2, [pc, #288]	; (800435c <HAL_GPIO_Init+0x2f4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_GPIO_Init+0x1fe>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a47      	ldr	r2, [pc, #284]	; (8004360 <HAL_GPIO_Init+0x2f8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00d      	beq.n	8004262 <HAL_GPIO_Init+0x1fa>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a46      	ldr	r2, [pc, #280]	; (8004364 <HAL_GPIO_Init+0x2fc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <HAL_GPIO_Init+0x1f6>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a45      	ldr	r2, [pc, #276]	; (8004368 <HAL_GPIO_Init+0x300>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_GPIO_Init+0x1f2>
 8004256:	2304      	movs	r3, #4
 8004258:	e008      	b.n	800426c <HAL_GPIO_Init+0x204>
 800425a:	2307      	movs	r3, #7
 800425c:	e006      	b.n	800426c <HAL_GPIO_Init+0x204>
 800425e:	2303      	movs	r3, #3
 8004260:	e004      	b.n	800426c <HAL_GPIO_Init+0x204>
 8004262:	2302      	movs	r3, #2
 8004264:	e002      	b.n	800426c <HAL_GPIO_Init+0x204>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <HAL_GPIO_Init+0x204>
 800426a:	2300      	movs	r3, #0
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	f002 0203 	and.w	r2, r2, #3
 8004272:	0092      	lsls	r2, r2, #2
 8004274:	4093      	lsls	r3, r2
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800427c:	4935      	ldr	r1, [pc, #212]	; (8004354 <HAL_GPIO_Init+0x2ec>)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	3302      	adds	r3, #2
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800428a:	4b38      	ldr	r3, [pc, #224]	; (800436c <HAL_GPIO_Init+0x304>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042ae:	4a2f      	ldr	r2, [pc, #188]	; (800436c <HAL_GPIO_Init+0x304>)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042b4:	4b2d      	ldr	r3, [pc, #180]	; (800436c <HAL_GPIO_Init+0x304>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042d8:	4a24      	ldr	r2, [pc, #144]	; (800436c <HAL_GPIO_Init+0x304>)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <HAL_GPIO_Init+0x304>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4013      	ands	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004302:	4a1a      	ldr	r2, [pc, #104]	; (800436c <HAL_GPIO_Init+0x304>)
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004308:	4b18      	ldr	r3, [pc, #96]	; (800436c <HAL_GPIO_Init+0x304>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800432c:	4a0f      	ldr	r2, [pc, #60]	; (800436c <HAL_GPIO_Init+0x304>)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	3301      	adds	r3, #1
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b0f      	cmp	r3, #15
 800433c:	f67f aea2 	bls.w	8004084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3724      	adds	r7, #36	; 0x24
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40023800 	.word	0x40023800
 8004354:	40013800 	.word	0x40013800
 8004358:	40020000 	.word	0x40020000
 800435c:	40020400 	.word	0x40020400
 8004360:	40020800 	.word	0x40020800
 8004364:	40020c00 	.word	0x40020c00
 8004368:	40021000 	.word	0x40021000
 800436c:	40013c00 	.word	0x40013c00

08004370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	887b      	ldrh	r3, [r7, #2]
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	e001      	b.n	8004392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	807b      	strh	r3, [r7, #2]
 80043ac:	4613      	mov	r3, r2
 80043ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043b0:	787b      	ldrb	r3, [r7, #1]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043b6:	887a      	ldrh	r2, [r7, #2]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043bc:	e003      	b.n	80043c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043be:	887b      	ldrh	r3, [r7, #2]
 80043c0:	041a      	lsls	r2, r3, #16
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	619a      	str	r2, [r3, #24]
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d006      	beq.n	80043f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043ea:	4a05      	ldr	r2, [pc, #20]	; (8004400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fd fb54 	bl	8001aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 80043f8:	bf00      	nop
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40013c00 	.word	0x40013c00

08004404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e264      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d075      	beq.n	800450e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004422:	4ba3      	ldr	r3, [pc, #652]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	2b04      	cmp	r3, #4
 800442c:	d00c      	beq.n	8004448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442e:	4ba0      	ldr	r3, [pc, #640]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004436:	2b08      	cmp	r3, #8
 8004438:	d112      	bne.n	8004460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443a:	4b9d      	ldr	r3, [pc, #628]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004446:	d10b      	bne.n	8004460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	4b99      	ldr	r3, [pc, #612]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d05b      	beq.n	800450c <HAL_RCC_OscConfig+0x108>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d157      	bne.n	800450c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e23f      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d106      	bne.n	8004478 <HAL_RCC_OscConfig+0x74>
 800446a:	4b91      	ldr	r3, [pc, #580]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a90      	ldr	r2, [pc, #576]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e01d      	b.n	80044b4 <HAL_RCC_OscConfig+0xb0>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0x98>
 8004482:	4b8b      	ldr	r3, [pc, #556]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a8a      	ldr	r2, [pc, #552]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b88      	ldr	r3, [pc, #544]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a87      	ldr	r2, [pc, #540]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e00b      	b.n	80044b4 <HAL_RCC_OscConfig+0xb0>
 800449c:	4b84      	ldr	r3, [pc, #528]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a83      	ldr	r2, [pc, #524]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80044a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	4b81      	ldr	r3, [pc, #516]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a80      	ldr	r2, [pc, #512]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80044ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d013      	beq.n	80044e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fe fb5e 	bl	8002b7c <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c4:	f7fe fb5a 	bl	8002b7c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e204      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	4b76      	ldr	r3, [pc, #472]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0xc0>
 80044e2:	e014      	b.n	800450e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fe fb4a 	bl	8002b7c <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fe fb46 	bl	8002b7c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e1f0      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	4b6c      	ldr	r3, [pc, #432]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0xe8>
 800450a:	e000      	b.n	800450e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d063      	beq.n	80045e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800451a:	4b65      	ldr	r3, [pc, #404]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00b      	beq.n	800453e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004526:	4b62      	ldr	r3, [pc, #392]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800452e:	2b08      	cmp	r3, #8
 8004530:	d11c      	bne.n	800456c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004532:	4b5f      	ldr	r3, [pc, #380]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d116      	bne.n	800456c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453e:	4b5c      	ldr	r3, [pc, #368]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_RCC_OscConfig+0x152>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d001      	beq.n	8004556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e1c4      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004556:	4b56      	ldr	r3, [pc, #344]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	4952      	ldr	r1, [pc, #328]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	e03a      	b.n	80045e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004574:	4b4f      	ldr	r3, [pc, #316]	; (80046b4 <HAL_RCC_OscConfig+0x2b0>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fe faff 	bl	8002b7c <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004582:	f7fe fafb 	bl	8002b7c <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e1a5      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004594:	4b46      	ldr	r3, [pc, #280]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0f0      	beq.n	8004582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a0:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4940      	ldr	r1, [pc, #256]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]
 80045b4:	e015      	b.n	80045e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b6:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <HAL_RCC_OscConfig+0x2b0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fe fade 	bl	8002b7c <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c4:	f7fe fada 	bl	8002b7c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e184      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d6:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d030      	beq.n	8004650 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d016      	beq.n	8004624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f6:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <HAL_RCC_OscConfig+0x2b4>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fc:	f7fe fabe 	bl	8002b7c <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004604:	f7fe faba 	bl	8002b7c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e164      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x200>
 8004622:	e015      	b.n	8004650 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004624:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <HAL_RCC_OscConfig+0x2b4>)
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462a:	f7fe faa7 	bl	8002b7c <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004632:	f7fe faa3 	bl	8002b7c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e14d      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004644:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f0      	bne.n	8004632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80a0 	beq.w	800479e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004662:	4b13      	ldr	r3, [pc, #76]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10f      	bne.n	800468e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a0e      	ldr	r2, [pc, #56]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_RCC_OscConfig+0x2b8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d121      	bne.n	80046de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <HAL_RCC_OscConfig+0x2b8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a07      	ldr	r2, [pc, #28]	; (80046bc <HAL_RCC_OscConfig+0x2b8>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a6:	f7fe fa69 	bl	8002b7c <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	e011      	b.n	80046d2 <HAL_RCC_OscConfig+0x2ce>
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	42470000 	.word	0x42470000
 80046b8:	42470e80 	.word	0x42470e80
 80046bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c0:	f7fe fa5c 	bl	8002b7c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e106      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d2:	4b85      	ldr	r3, [pc, #532]	; (80048e8 <HAL_RCC_OscConfig+0x4e4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d106      	bne.n	80046f4 <HAL_RCC_OscConfig+0x2f0>
 80046e6:	4b81      	ldr	r3, [pc, #516]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a80      	ldr	r2, [pc, #512]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	e01c      	b.n	800472e <HAL_RCC_OscConfig+0x32a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	d10c      	bne.n	8004716 <HAL_RCC_OscConfig+0x312>
 80046fc:	4b7b      	ldr	r3, [pc, #492]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a7a      	ldr	r2, [pc, #488]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
 8004708:	4b78      	ldr	r3, [pc, #480]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a77      	ldr	r2, [pc, #476]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
 8004714:	e00b      	b.n	800472e <HAL_RCC_OscConfig+0x32a>
 8004716:	4b75      	ldr	r3, [pc, #468]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	4a74      	ldr	r2, [pc, #464]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	; 0x70
 8004722:	4b72      	ldr	r3, [pc, #456]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4a71      	ldr	r2, [pc, #452]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d015      	beq.n	8004762 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004736:	f7fe fa21 	bl	8002b7c <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473c:	e00a      	b.n	8004754 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800473e:	f7fe fa1d 	bl	8002b7c <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f241 3288 	movw	r2, #5000	; 0x1388
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e0c5      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	4b65      	ldr	r3, [pc, #404]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ee      	beq.n	800473e <HAL_RCC_OscConfig+0x33a>
 8004760:	e014      	b.n	800478c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004762:	f7fe fa0b 	bl	8002b7c <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fe fa07 	bl	8002b7c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	; 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e0af      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004780:	4b5a      	ldr	r3, [pc, #360]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1ee      	bne.n	800476a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004792:	4b56      	ldr	r3, [pc, #344]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4a55      	ldr	r2, [pc, #340]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 809b 	beq.w	80048de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047a8:	4b50      	ldr	r3, [pc, #320]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 030c 	and.w	r3, r3, #12
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d05c      	beq.n	800486e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d141      	bne.n	8004840 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047bc:	4b4c      	ldr	r3, [pc, #304]	; (80048f0 <HAL_RCC_OscConfig+0x4ec>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7fe f9db 	bl	8002b7c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ca:	f7fe f9d7 	bl	8002b7c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e081      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047dc:	4b43      	ldr	r3, [pc, #268]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f0      	bne.n	80047ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	019b      	lsls	r3, r3, #6
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	3b01      	subs	r3, #1
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	061b      	lsls	r3, r3, #24
 800480c:	4937      	ldr	r1, [pc, #220]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004812:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <HAL_RCC_OscConfig+0x4ec>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004818:	f7fe f9b0 	bl	8002b7c <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004820:	f7fe f9ac 	bl	8002b7c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e056      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x41c>
 800483e:	e04e      	b.n	80048de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004840:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <HAL_RCC_OscConfig+0x4ec>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004846:	f7fe f999 	bl	8002b7c <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800484e:	f7fe f995 	bl	8002b7c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e03f      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004860:	4b22      	ldr	r3, [pc, #136]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f0      	bne.n	800484e <HAL_RCC_OscConfig+0x44a>
 800486c:	e037      	b.n	80048de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e032      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800487a:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <HAL_RCC_OscConfig+0x4e8>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d028      	beq.n	80048da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004892:	429a      	cmp	r2, r3
 8004894:	d121      	bne.n	80048da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d11a      	bne.n	80048da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048aa:	4013      	ands	r3, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d111      	bne.n	80048da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	3b01      	subs	r3, #1
 80048c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d107      	bne.n	80048da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40007000 	.word	0x40007000
 80048ec:	40023800 	.word	0x40023800
 80048f0:	42470060 	.word	0x42470060

080048f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0cc      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004908:	4b68      	ldr	r3, [pc, #416]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d90c      	bls.n	8004930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004916:	4b65      	ldr	r3, [pc, #404]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b63      	ldr	r3, [pc, #396]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0b8      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d020      	beq.n	800497e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004948:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4a58      	ldr	r2, [pc, #352]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004960:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a52      	ldr	r2, [pc, #328]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800496a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800496c:	4b50      	ldr	r3, [pc, #320]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	494d      	ldr	r1, [pc, #308]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d044      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d107      	bne.n	80049a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b47      	ldr	r3, [pc, #284]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d119      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e07f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b2:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e06f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c2:	4b3b      	ldr	r3, [pc, #236]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e067      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049d2:	4b37      	ldr	r3, [pc, #220]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f023 0203 	bic.w	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	4934      	ldr	r1, [pc, #208]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e4:	f7fe f8ca 	bl	8002b7c <HAL_GetTick>
 80049e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ec:	f7fe f8c6 	bl	8002b7c <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e04f      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	4b2b      	ldr	r3, [pc, #172]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 020c 	and.w	r2, r3, #12
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d1eb      	bne.n	80049ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a14:	4b25      	ldr	r3, [pc, #148]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d20c      	bcs.n	8004a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a22:	4b22      	ldr	r3, [pc, #136]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2a:	4b20      	ldr	r3, [pc, #128]	; (8004aac <HAL_RCC_ClockConfig+0x1b8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d001      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e032      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4916      	ldr	r1, [pc, #88]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a66:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	490e      	ldr	r1, [pc, #56]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a7a:	f000 f821 	bl	8004ac0 <HAL_RCC_GetSysClockFreq>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 030f 	and.w	r3, r3, #15
 8004a8a:	490a      	ldr	r1, [pc, #40]	; (8004ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	5ccb      	ldrb	r3, [r1, r3]
 8004a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a92:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_RCC_ClockConfig+0x1c8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe f82a 	bl	8002af4 <HAL_InitTick>

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023c00 	.word	0x40023c00
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	08007784 	.word	0x08007784
 8004ab8:	20000004 	.word	0x20000004
 8004abc:	20000008 	.word	0x20000008

08004ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ad8:	4b67      	ldr	r3, [pc, #412]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 030c 	and.w	r3, r3, #12
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d00d      	beq.n	8004b00 <HAL_RCC_GetSysClockFreq+0x40>
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	f200 80bd 	bhi.w	8004c64 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0x34>
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d003      	beq.n	8004afa <HAL_RCC_GetSysClockFreq+0x3a>
 8004af2:	e0b7      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004af6:	60bb      	str	r3, [r7, #8]
       break;
 8004af8:	e0b7      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004afa:	4b61      	ldr	r3, [pc, #388]	; (8004c80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004afc:	60bb      	str	r3, [r7, #8]
      break;
 8004afe:	e0b4      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b00:	4b5d      	ldr	r3, [pc, #372]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b0a:	4b5b      	ldr	r3, [pc, #364]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d04d      	beq.n	8004bb2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b16:	4b58      	ldr	r3, [pc, #352]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	099b      	lsrs	r3, r3, #6
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b26:	f04f 0100 	mov.w	r1, #0
 8004b2a:	ea02 0800 	and.w	r8, r2, r0
 8004b2e:	ea03 0901 	and.w	r9, r3, r1
 8004b32:	4640      	mov	r0, r8
 8004b34:	4649      	mov	r1, r9
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	014b      	lsls	r3, r1, #5
 8004b40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b44:	0142      	lsls	r2, r0, #5
 8004b46:	4610      	mov	r0, r2
 8004b48:	4619      	mov	r1, r3
 8004b4a:	ebb0 0008 	subs.w	r0, r0, r8
 8004b4e:	eb61 0109 	sbc.w	r1, r1, r9
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	018b      	lsls	r3, r1, #6
 8004b5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b60:	0182      	lsls	r2, r0, #6
 8004b62:	1a12      	subs	r2, r2, r0
 8004b64:	eb63 0301 	sbc.w	r3, r3, r1
 8004b68:	f04f 0000 	mov.w	r0, #0
 8004b6c:	f04f 0100 	mov.w	r1, #0
 8004b70:	00d9      	lsls	r1, r3, #3
 8004b72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b76:	00d0      	lsls	r0, r2, #3
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	eb12 0208 	adds.w	r2, r2, r8
 8004b80:	eb43 0309 	adc.w	r3, r3, r9
 8004b84:	f04f 0000 	mov.w	r0, #0
 8004b88:	f04f 0100 	mov.w	r1, #0
 8004b8c:	0259      	lsls	r1, r3, #9
 8004b8e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b92:	0250      	lsls	r0, r2, #9
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	f7fc f93e 	bl	8000e24 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4613      	mov	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e04a      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb2:	4b31      	ldr	r3, [pc, #196]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	099b      	lsrs	r3, r3, #6
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bc2:	f04f 0100 	mov.w	r1, #0
 8004bc6:	ea02 0400 	and.w	r4, r2, r0
 8004bca:	ea03 0501 	and.w	r5, r3, r1
 8004bce:	4620      	mov	r0, r4
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	014b      	lsls	r3, r1, #5
 8004bdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004be0:	0142      	lsls	r2, r0, #5
 8004be2:	4610      	mov	r0, r2
 8004be4:	4619      	mov	r1, r3
 8004be6:	1b00      	subs	r0, r0, r4
 8004be8:	eb61 0105 	sbc.w	r1, r1, r5
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	018b      	lsls	r3, r1, #6
 8004bf6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bfa:	0182      	lsls	r2, r0, #6
 8004bfc:	1a12      	subs	r2, r2, r0
 8004bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	00d9      	lsls	r1, r3, #3
 8004c0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c10:	00d0      	lsls	r0, r2, #3
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	1912      	adds	r2, r2, r4
 8004c18:	eb45 0303 	adc.w	r3, r5, r3
 8004c1c:	f04f 0000 	mov.w	r0, #0
 8004c20:	f04f 0100 	mov.w	r1, #0
 8004c24:	0299      	lsls	r1, r3, #10
 8004c26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c2a:	0290      	lsls	r0, r2, #10
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	f7fc f8f2 	bl	8000e24 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	3301      	adds	r3, #1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	60bb      	str	r3, [r7, #8]
      break;
 8004c62:	e002      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c66:	60bb      	str	r3, [r7, #8]
      break;
 8004c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	00f42400 	.word	0x00f42400
 8004c80:	007a1200 	.word	0x007a1200

08004c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c88:	4b03      	ldr	r3, [pc, #12]	; (8004c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000004 	.word	0x20000004

08004c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ca0:	f7ff fff0 	bl	8004c84 <HAL_RCC_GetHCLKFreq>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	0a9b      	lsrs	r3, r3, #10
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	4903      	ldr	r1, [pc, #12]	; (8004cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb2:	5ccb      	ldrb	r3, [r1, r3]
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	08007794 	.word	0x08007794

08004cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cc8:	f7ff ffdc 	bl	8004c84 <HAL_RCC_GetHCLKFreq>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	0b5b      	lsrs	r3, r3, #13
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	4903      	ldr	r1, [pc, #12]	; (8004ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cda:	5ccb      	ldrb	r3, [r1, r3]
 8004cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	08007794 	.word	0x08007794

08004cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e041      	b.n	8004d82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fd fca2 	bl	800265c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f000 fdda 	bl	80058e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d001      	beq.n	8004da4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e03c      	b.n	8004e1e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <HAL_TIM_Base_Start+0xa0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d018      	beq.n	8004de8 <HAL_TIM_Base_Start+0x5c>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d013      	beq.n	8004de8 <HAL_TIM_Base_Start+0x5c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1a      	ldr	r2, [pc, #104]	; (8004e30 <HAL_TIM_Base_Start+0xa4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00e      	beq.n	8004de8 <HAL_TIM_Base_Start+0x5c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_TIM_Base_Start+0xa8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_TIM_Base_Start+0x5c>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_TIM_Base_Start+0xac>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_TIM_Base_Start+0x5c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <HAL_TIM_Base_Start+0xb0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d111      	bne.n	8004e0c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b06      	cmp	r3, #6
 8004df8:	d010      	beq.n	8004e1c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0a:	e007      	b.n	8004e1c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0201 	orr.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40010000 	.word	0x40010000
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40000c00 	.word	0x40000c00
 8004e3c:	40014000 	.word	0x40014000

08004e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d001      	beq.n	8004e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e044      	b.n	8004ee2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d018      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x6c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e82:	d013      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x6c>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00e      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x6c>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x6c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a17      	ldr	r2, [pc, #92]	; (8004efc <HAL_TIM_Base_Start_IT+0xbc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x6c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d111      	bne.n	8004ed0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b06      	cmp	r3, #6
 8004ebc:	d010      	beq.n	8004ee0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ece:	e007      	b.n	8004ee0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40010000 	.word	0x40010000
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	40014000 	.word	0x40014000

08004f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e041      	b.n	8004f9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f839 	bl	8004fa2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f000 fcce 	bl	80058e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
	...

08004fb8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d109      	bne.n	8004fdc <HAL_TIM_PWM_Start+0x24>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	bf14      	ite	ne
 8004fd4:	2301      	movne	r3, #1
 8004fd6:	2300      	moveq	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	e022      	b.n	8005022 <HAL_TIM_PWM_Start+0x6a>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d109      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0x3e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	bf14      	ite	ne
 8004fee:	2301      	movne	r3, #1
 8004ff0:	2300      	moveq	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	e015      	b.n	8005022 <HAL_TIM_PWM_Start+0x6a>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b08      	cmp	r3, #8
 8004ffa:	d109      	bne.n	8005010 <HAL_TIM_PWM_Start+0x58>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b01      	cmp	r3, #1
 8005006:	bf14      	ite	ne
 8005008:	2301      	movne	r3, #1
 800500a:	2300      	moveq	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	e008      	b.n	8005022 <HAL_TIM_PWM_Start+0x6a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e068      	b.n	80050fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <HAL_TIM_PWM_Start+0x82>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005038:	e013      	b.n	8005062 <HAL_TIM_PWM_Start+0xaa>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b04      	cmp	r3, #4
 800503e:	d104      	bne.n	800504a <HAL_TIM_PWM_Start+0x92>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005048:	e00b      	b.n	8005062 <HAL_TIM_PWM_Start+0xaa>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d104      	bne.n	800505a <HAL_TIM_PWM_Start+0xa2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005058:	e003      	b.n	8005062 <HAL_TIM_PWM_Start+0xaa>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2201      	movs	r2, #1
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fee0 	bl	8005e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a23      	ldr	r2, [pc, #140]	; (8005104 <HAL_TIM_PWM_Start+0x14c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d107      	bne.n	800508a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005088:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <HAL_TIM_PWM_Start+0x14c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d018      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x10e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509c:	d013      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x10e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a19      	ldr	r2, [pc, #100]	; (8005108 <HAL_TIM_PWM_Start+0x150>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00e      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x10e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a17      	ldr	r2, [pc, #92]	; (800510c <HAL_TIM_PWM_Start+0x154>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x10e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a16      	ldr	r2, [pc, #88]	; (8005110 <HAL_TIM_PWM_Start+0x158>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_TIM_PWM_Start+0x10e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a14      	ldr	r2, [pc, #80]	; (8005114 <HAL_TIM_PWM_Start+0x15c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d111      	bne.n	80050ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b06      	cmp	r3, #6
 80050d6:	d010      	beq.n	80050fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e8:	e007      	b.n	80050fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0201 	orr.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40010000 	.word	0x40010000
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40000c00 	.word	0x40000c00
 8005114:	40014000 	.word	0x40014000

08005118 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e097      	b.n	800525c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fd faed 	bl	8002720 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800515c:	f023 0307 	bic.w	r3, r3, #7
 8005160:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	3304      	adds	r3, #4
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f000 fbb9 	bl	80058e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	4313      	orrs	r3, r2
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051b8:	f023 030c 	bic.w	r3, r3, #12
 80051bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	4313      	orrs	r3, r2
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	011a      	lsls	r2, r3, #4
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	031b      	lsls	r3, r3, #12
 80051e8:	4313      	orrs	r3, r2
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	4313      	orrs	r3, r2
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005274:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800527c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005284:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800528c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d110      	bne.n	80052b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d102      	bne.n	80052a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800529a:	7b7b      	ldrb	r3, [r7, #13]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d001      	beq.n	80052a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e069      	b.n	8005378 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b4:	e031      	b.n	800531a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d110      	bne.n	80052de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d102      	bne.n	80052c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052c2:	7b3b      	ldrb	r3, [r7, #12]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d001      	beq.n	80052cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e055      	b.n	8005378 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052dc:	e01d      	b.n	800531a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d108      	bne.n	80052f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052e4:	7bbb      	ldrb	r3, [r7, #14]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d105      	bne.n	80052f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ea:	7b7b      	ldrb	r3, [r7, #13]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d102      	bne.n	80052f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052f0:	7b3b      	ldrb	r3, [r7, #12]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d001      	beq.n	80052fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e03e      	b.n	8005378 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2202      	movs	r2, #2
 8005306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_TIM_Encoder_Start+0xc4>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b04      	cmp	r3, #4
 8005324:	d008      	beq.n	8005338 <HAL_TIM_Encoder_Start+0xd4>
 8005326:	e00f      	b.n	8005348 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2201      	movs	r2, #1
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fd7d 	bl	8005e30 <TIM_CCxChannelCmd>
      break;
 8005336:	e016      	b.n	8005366 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2201      	movs	r2, #1
 800533e:	2104      	movs	r1, #4
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fd75 	bl	8005e30 <TIM_CCxChannelCmd>
      break;
 8005346:	e00e      	b.n	8005366 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2201      	movs	r2, #1
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fd6d 	bl	8005e30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2201      	movs	r2, #1
 800535c:	2104      	movs	r1, #4
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fd66 	bl	8005e30 <TIM_CCxChannelCmd>
      break;
 8005364:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0201 	orr.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	d122      	bne.n	80053dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d11b      	bne.n	80053dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0202 	mvn.w	r2, #2
 80053ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fa70 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fa62 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa73 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d122      	bne.n	8005430 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d11b      	bne.n	8005430 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0204 	mvn.w	r2, #4
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa46 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa38 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fa49 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b08      	cmp	r3, #8
 800543c:	d122      	bne.n	8005484 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0308 	and.w	r3, r3, #8
 8005448:	2b08      	cmp	r3, #8
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0208 	mvn.w	r2, #8
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2204      	movs	r2, #4
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa1c 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa0e 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fa1f 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	2b10      	cmp	r3, #16
 8005490:	d122      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b10      	cmp	r3, #16
 800549e:	d11b      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0210 	mvn.w	r2, #16
 80054a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2208      	movs	r2, #8
 80054ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f9f2 	bl	80058a8 <HAL_TIM_IC_CaptureCallback>
 80054c4:	e005      	b.n	80054d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f9e4 	bl	8005894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f9f5 	bl	80058bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10e      	bne.n	8005504 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d107      	bne.n	8005504 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f06f 0201 	mvn.w	r2, #1
 80054fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fc fc56 	bl	8001db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b80      	cmp	r3, #128	; 0x80
 8005510:	d10e      	bne.n	8005530 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551c:	2b80      	cmp	r3, #128	; 0x80
 800551e:	d107      	bne.n	8005530 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fd1e 	bl	8005f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	2b40      	cmp	r3, #64	; 0x40
 800553c:	d10e      	bne.n	800555c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d107      	bne.n	800555c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f9ba 	bl	80058d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b20      	cmp	r3, #32
 8005568:	d10e      	bne.n	8005588 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0320 	and.w	r3, r3, #32
 8005574:	2b20      	cmp	r3, #32
 8005576:	d107      	bne.n	8005588 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0220 	mvn.w	r2, #32
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fce8 	bl	8005f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055a6:	2302      	movs	r3, #2
 80055a8:	e0ac      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x174>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b0c      	cmp	r3, #12
 80055b6:	f200 809f 	bhi.w	80056f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055f5 	.word	0x080055f5
 80055c4:	080056f9 	.word	0x080056f9
 80055c8:	080056f9 	.word	0x080056f9
 80055cc:	080056f9 	.word	0x080056f9
 80055d0:	08005635 	.word	0x08005635
 80055d4:	080056f9 	.word	0x080056f9
 80055d8:	080056f9 	.word	0x080056f9
 80055dc:	080056f9 	.word	0x080056f9
 80055e0:	08005677 	.word	0x08005677
 80055e4:	080056f9 	.word	0x080056f9
 80055e8:	080056f9 	.word	0x080056f9
 80055ec:	080056f9 	.word	0x080056f9
 80055f0:	080056b7 	.word	0x080056b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f9f2 	bl	80059e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0208 	orr.w	r2, r2, #8
 800560e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0204 	bic.w	r2, r2, #4
 800561e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6999      	ldr	r1, [r3, #24]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	691a      	ldr	r2, [r3, #16]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	619a      	str	r2, [r3, #24]
      break;
 8005632:	e062      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fa38 	bl	8005ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6999      	ldr	r1, [r3, #24]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	021a      	lsls	r2, r3, #8
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	619a      	str	r2, [r3, #24]
      break;
 8005674:	e041      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fa83 	bl	8005b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0208 	orr.w	r2, r2, #8
 8005690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69da      	ldr	r2, [r3, #28]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0204 	bic.w	r2, r2, #4
 80056a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69d9      	ldr	r1, [r3, #28]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	61da      	str	r2, [r3, #28]
      break;
 80056b4:	e021      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 facd 	bl	8005c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	69d9      	ldr	r1, [r3, #28]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	021a      	lsls	r2, r3, #8
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	61da      	str	r2, [r3, #28]
      break;
 80056f6:	e000      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80056f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIM_ConfigClockSource+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e0b3      	b.n	800588c <HAL_TIM_ConfigClockSource+0x180>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005742:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800574a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800575c:	d03e      	beq.n	80057dc <HAL_TIM_ConfigClockSource+0xd0>
 800575e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005762:	f200 8087 	bhi.w	8005874 <HAL_TIM_ConfigClockSource+0x168>
 8005766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576a:	f000 8085 	beq.w	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 800576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005772:	d87f      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 8005774:	2b70      	cmp	r3, #112	; 0x70
 8005776:	d01a      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0xa2>
 8005778:	2b70      	cmp	r3, #112	; 0x70
 800577a:	d87b      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 800577c:	2b60      	cmp	r3, #96	; 0x60
 800577e:	d050      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x116>
 8005780:	2b60      	cmp	r3, #96	; 0x60
 8005782:	d877      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 8005784:	2b50      	cmp	r3, #80	; 0x50
 8005786:	d03c      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0xf6>
 8005788:	2b50      	cmp	r3, #80	; 0x50
 800578a:	d873      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d058      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x136>
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d86f      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 8005794:	2b30      	cmp	r3, #48	; 0x30
 8005796:	d064      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x156>
 8005798:	2b30      	cmp	r3, #48	; 0x30
 800579a:	d86b      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 800579c:	2b20      	cmp	r3, #32
 800579e:	d060      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x156>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d867      	bhi.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d05c      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x156>
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d05a      	beq.n	8005862 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057ac:	e062      	b.n	8005874 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6899      	ldr	r1, [r3, #8]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f000 fb17 	bl	8005df0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	609a      	str	r2, [r3, #8]
      break;
 80057da:	e04e      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6899      	ldr	r1, [r3, #8]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f000 fb00 	bl	8005df0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057fe:	609a      	str	r2, [r3, #8]
      break;
 8005800:	e03b      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6859      	ldr	r1, [r3, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	461a      	mov	r2, r3
 8005810:	f000 fa74 	bl	8005cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2150      	movs	r1, #80	; 0x50
 800581a:	4618      	mov	r0, r3
 800581c:	f000 facd 	bl	8005dba <TIM_ITRx_SetConfig>
      break;
 8005820:	e02b      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	461a      	mov	r2, r3
 8005830:	f000 fa93 	bl	8005d5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2160      	movs	r1, #96	; 0x60
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fabd 	bl	8005dba <TIM_ITRx_SetConfig>
      break;
 8005840:	e01b      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	6859      	ldr	r1, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	461a      	mov	r2, r3
 8005850:	f000 fa54 	bl	8005cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2140      	movs	r1, #64	; 0x40
 800585a:	4618      	mov	r0, r3
 800585c:	f000 faad 	bl	8005dba <TIM_ITRx_SetConfig>
      break;
 8005860:	e00b      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4619      	mov	r1, r3
 800586c:	4610      	mov	r0, r2
 800586e:	f000 faa4 	bl	8005dba <TIM_ITRx_SetConfig>
        break;
 8005872:	e002      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005874:	bf00      	nop
 8005876:	e000      	b.n	800587a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005878:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a34      	ldr	r2, [pc, #208]	; (80059c8 <TIM_Base_SetConfig+0xe4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00f      	beq.n	800591c <TIM_Base_SetConfig+0x38>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005902:	d00b      	beq.n	800591c <TIM_Base_SetConfig+0x38>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a31      	ldr	r2, [pc, #196]	; (80059cc <TIM_Base_SetConfig+0xe8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d007      	beq.n	800591c <TIM_Base_SetConfig+0x38>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a30      	ldr	r2, [pc, #192]	; (80059d0 <TIM_Base_SetConfig+0xec>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d003      	beq.n	800591c <TIM_Base_SetConfig+0x38>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a2f      	ldr	r2, [pc, #188]	; (80059d4 <TIM_Base_SetConfig+0xf0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d108      	bne.n	800592e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a25      	ldr	r2, [pc, #148]	; (80059c8 <TIM_Base_SetConfig+0xe4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01b      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593c:	d017      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a22      	ldr	r2, [pc, #136]	; (80059cc <TIM_Base_SetConfig+0xe8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a21      	ldr	r2, [pc, #132]	; (80059d0 <TIM_Base_SetConfig+0xec>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00f      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a20      	ldr	r2, [pc, #128]	; (80059d4 <TIM_Base_SetConfig+0xf0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a1f      	ldr	r2, [pc, #124]	; (80059d8 <TIM_Base_SetConfig+0xf4>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <TIM_Base_SetConfig+0xf8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_Base_SetConfig+0x8a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a1d      	ldr	r2, [pc, #116]	; (80059e0 <TIM_Base_SetConfig+0xfc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d108      	bne.n	8005980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	689a      	ldr	r2, [r3, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a08      	ldr	r2, [pc, #32]	; (80059c8 <TIM_Base_SetConfig+0xe4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d103      	bne.n	80059b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	615a      	str	r2, [r3, #20]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800

080059e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f023 0201 	bic.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0302 	bic.w	r3, r3, #2
 8005a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a1c      	ldr	r2, [pc, #112]	; (8005aac <TIM_OC1_SetConfig+0xc8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10c      	bne.n	8005a5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0308 	bic.w	r3, r3, #8
 8005a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f023 0304 	bic.w	r3, r3, #4
 8005a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a13      	ldr	r2, [pc, #76]	; (8005aac <TIM_OC1_SetConfig+0xc8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d111      	bne.n	8005a86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	621a      	str	r2, [r3, #32]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	40010000 	.word	0x40010000

08005ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0210 	bic.w	r2, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0320 	bic.w	r3, r3, #32
 8005afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <TIM_OC2_SetConfig+0xd4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d10d      	bne.n	8005b2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a15      	ldr	r2, [pc, #84]	; (8005b84 <TIM_OC2_SetConfig+0xd4>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d113      	bne.n	8005b5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40010000 	.word	0x40010000

08005b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <TIM_OC3_SetConfig+0xd0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10d      	bne.n	8005c02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <TIM_OC3_SetConfig+0xd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d113      	bne.n	8005c32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	621a      	str	r2, [r3, #32]
}
 8005c4c:	bf00      	nop
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40010000 	.word	0x40010000

08005c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	021b      	lsls	r3, r3, #8
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	031b      	lsls	r3, r3, #12
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a10      	ldr	r2, [pc, #64]	; (8005cf8 <TIM_OC4_SetConfig+0x9c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d109      	bne.n	8005cd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	019b      	lsls	r3, r3, #6
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40010000 	.word	0x40010000

08005cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f023 0201 	bic.w	r2, r3, #1
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f023 030a 	bic.w	r3, r3, #10
 8005d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b087      	sub	sp, #28
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f023 0210 	bic.w	r2, r3, #16
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	031b      	lsls	r3, r3, #12
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	621a      	str	r2, [r3, #32]
}
 8005dae:	bf00      	nop
 8005db0:	371c      	adds	r7, #28
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f043 0307 	orr.w	r3, r3, #7
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	609a      	str	r2, [r3, #8]
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	021a      	lsls	r2, r3, #8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	609a      	str	r2, [r3, #8]
}
 8005e24:	bf00      	nop
 8005e26:	371c      	adds	r7, #28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 031f 	and.w	r3, r3, #31
 8005e42:	2201      	movs	r2, #1
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a1a      	ldr	r2, [r3, #32]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	401a      	ands	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a1a      	ldr	r2, [r3, #32]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 031f 	and.w	r3, r3, #31
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	fa01 f303 	lsl.w	r3, r1, r3
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	621a      	str	r2, [r3, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
	...

08005e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e050      	b.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d018      	beq.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee0:	d013      	beq.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00e      	beq.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a16      	ldr	r2, [pc, #88]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d009      	beq.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d004      	beq.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d10c      	bne.n	8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40010000 	.word	0x40010000
 8005f48:	40000400 	.word	0x40000400
 8005f4c:	40000800 	.word	0x40000800
 8005f50:	40000c00 	.word	0x40000c00
 8005f54:	40014000 	.word	0x40014000

08005f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e03f      	b.n	8006012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fc fc44 	bl	8002834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	; 0x24
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fc7b 	bl	80068c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695a      	ldr	r2, [r3, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b08a      	sub	sp, #40	; 0x28
 800601e:	af02      	add	r7, sp, #8
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b20      	cmp	r3, #32
 8006038:	d17c      	bne.n	8006134 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <HAL_UART_Transmit+0x2c>
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e075      	b.n	8006136 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_UART_Transmit+0x3e>
 8006054:	2302      	movs	r3, #2
 8006056:	e06e      	b.n	8006136 <HAL_UART_Transmit+0x11c>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2221      	movs	r2, #33	; 0x21
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800606e:	f7fc fd85 	bl	8002b7c <HAL_GetTick>
 8006072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	88fa      	ldrh	r2, [r7, #6]
 8006078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006088:	d108      	bne.n	800609c <HAL_UART_Transmit+0x82>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d104      	bne.n	800609c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	e003      	b.n	80060a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80060ac:	e02a      	b.n	8006104 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2200      	movs	r2, #0
 80060b6:	2180      	movs	r1, #128	; 0x80
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fa3d 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e036      	b.n	8006136 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	3302      	adds	r3, #2
 80060e2:	61bb      	str	r3, [r7, #24]
 80060e4:	e007      	b.n	80060f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	3301      	adds	r3, #1
 80060f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1cf      	bne.n	80060ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2200      	movs	r2, #0
 8006116:	2140      	movs	r1, #64	; 0x40
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fa0d 	bl	8006538 <UART_WaitOnFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e006      	b.n	8006136 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	e000      	b.n	8006136 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006134:	2302      	movs	r3, #2
  }
}
 8006136:	4618      	mov	r0, r3
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	4613      	mov	r3, r2
 800614a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b20      	cmp	r3, #32
 8006156:	d11d      	bne.n	8006194 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_UART_Receive_IT+0x26>
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e016      	b.n	8006196 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_UART_Receive_IT+0x38>
 8006172:	2302      	movs	r3, #2
 8006174:	e00f      	b.n	8006196 <HAL_UART_Receive_IT+0x58>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	461a      	mov	r2, r3
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fa1e 	bl	80065cc <UART_Start_Receive_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	e000      	b.n	8006196 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006194:	2302      	movs	r3, #2
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
	...

080061a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	; 0x28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10d      	bne.n	80061f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <HAL_UART_IRQHandler+0x52>
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fad1 	bl	8006792 <UART_Receive_IT>
      return;
 80061f0:	e17c      	b.n	80064ec <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80b1 	beq.w	800635c <HAL_UART_IRQHandler+0x1bc>
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_UART_IRQHandler+0x70>
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 80a6 	beq.w	800635c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <HAL_UART_IRQHandler+0x90>
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	f043 0201 	orr.w	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_UART_IRQHandler+0xb0>
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	f043 0202 	orr.w	r2, r3, #2
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <HAL_UART_IRQHandler+0xd0>
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006268:	f043 0204 	orr.w	r2, r3, #4
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00f      	beq.n	800629a <HAL_UART_IRQHandler+0xfa>
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	d104      	bne.n	800628e <HAL_UART_IRQHandler+0xee>
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f043 0208 	orr.w	r2, r3, #8
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 811f 	beq.w	80064e2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <HAL_UART_IRQHandler+0x11e>
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fa6a 	bl	8006792 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	bf0c      	ite	eq
 80062cc:	2301      	moveq	r3, #1
 80062ce:	2300      	movne	r3, #0
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	f003 0308 	and.w	r3, r3, #8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d102      	bne.n	80062e6 <HAL_UART_IRQHandler+0x146>
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d031      	beq.n	800634a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f9aa 	bl	8006640 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d123      	bne.n	8006342 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695a      	ldr	r2, [r3, #20]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006308:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	2b00      	cmp	r3, #0
 8006310:	d013      	beq.n	800633a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006316:	4a77      	ldr	r2, [pc, #476]	; (80064f4 <HAL_UART_IRQHandler+0x354>)
 8006318:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	4618      	mov	r0, r3
 8006320:	f7fd fc16 	bl	8003b50 <HAL_DMA_Abort_IT>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d016      	beq.n	8006358 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006334:	4610      	mov	r0, r2
 8006336:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006338:	e00e      	b.n	8006358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f8e6 	bl	800650c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	e00a      	b.n	8006358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f8e2 	bl	800650c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006348:	e006      	b.n	8006358 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f8de 	bl	800650c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006356:	e0c4      	b.n	80064e2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006358:	bf00      	nop
    return;
 800635a:	e0c2      	b.n	80064e2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	2b01      	cmp	r3, #1
 8006362:	f040 80a2 	bne.w	80064aa <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 809c 	beq.w	80064aa <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8096 	beq.w	80064aa <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	2b40      	cmp	r3, #64	; 0x40
 80063a0:	d14f      	bne.n	8006442 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80063ac:	8a3b      	ldrh	r3, [r7, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8099 	beq.w	80064e6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063b8:	8a3a      	ldrh	r2, [r7, #16]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	f080 8093 	bcs.w	80064e6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	8a3a      	ldrh	r2, [r7, #16]
 80063c4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d0:	d02b      	beq.n	800642a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063e0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695a      	ldr	r2, [r3, #20]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0201 	bic.w	r2, r2, #1
 80063f0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695a      	ldr	r2, [r3, #20]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006400:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0210 	bic.w	r2, r2, #16
 800641e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	4618      	mov	r0, r3
 8006426:	f7fd fb23 	bl	8003a70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006432:	b29b      	uxth	r3, r3
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	b29b      	uxth	r3, r3
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f870 	bl	8006520 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006440:	e051      	b.n	80064e6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800644a:	b29b      	uxth	r3, r3
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d047      	beq.n	80064ea <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800645a:	8a7b      	ldrh	r3, [r7, #18]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d044      	beq.n	80064ea <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800646e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695a      	ldr	r2, [r3, #20]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0201 	bic.w	r2, r2, #1
 800647e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68da      	ldr	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0210 	bic.w	r2, r2, #16
 800649c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800649e:	8a7b      	ldrh	r3, [r7, #18]
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f83c 	bl	8006520 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80064a8:	e01f      	b.n	80064ea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <HAL_UART_IRQHandler+0x326>
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f8ff 	bl	80066c2 <UART_Transmit_IT>
    return;
 80064c4:	e012      	b.n	80064ec <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00d      	beq.n	80064ec <HAL_UART_IRQHandler+0x34c>
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f941 	bl	8006762 <UART_EndTransmit_IT>
    return;
 80064e0:	e004      	b.n	80064ec <HAL_UART_IRQHandler+0x34c>
    return;
 80064e2:	bf00      	nop
 80064e4:	e002      	b.n	80064ec <HAL_UART_IRQHandler+0x34c>
      return;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <HAL_UART_IRQHandler+0x34c>
      return;
 80064ea:	bf00      	nop
  }
}
 80064ec:	3728      	adds	r7, #40	; 0x28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	0800669b 	.word	0x0800669b

080064f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006548:	e02c      	b.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d028      	beq.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <UART_WaitOnFlagUntilTimeout+0x30>
 8006558:	f7fc fb10 	bl	8002b7c <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	429a      	cmp	r2, r3
 8006566:	d21d      	bcs.n	80065a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006576:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695a      	ldr	r2, [r3, #20]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e00f      	b.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	4013      	ands	r3, r2
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	bf0c      	ite	eq
 80065b4:	2301      	moveq	r3, #1
 80065b6:	2300      	movne	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d0c3      	beq.n	800654a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	4613      	mov	r3, r2
 80065d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	88fa      	ldrh	r2, [r7, #6]
 80065e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2222      	movs	r2, #34	; 0x22
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006610:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0201 	orr.w	r2, r2, #1
 8006620:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0220 	orr.w	r2, r2, #32
 8006630:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006656:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695a      	ldr	r2, [r3, #20]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0201 	bic.w	r2, r2, #1
 8006666:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	2b01      	cmp	r3, #1
 800666e:	d107      	bne.n	8006680 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0210 	bic.w	r2, r2, #16
 800667e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff ff29 	bl	800650c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ba:	bf00      	nop
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b21      	cmp	r3, #33	; 0x21
 80066d4:	d13e      	bne.n	8006754 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066de:	d114      	bne.n	800670a <UART_Transmit_IT+0x48>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d110      	bne.n	800670a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	1c9a      	adds	r2, r3, #2
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	621a      	str	r2, [r3, #32]
 8006708:	e008      	b.n	800671c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	1c59      	adds	r1, r3, #1
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6211      	str	r1, [r2, #32]
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4619      	mov	r1, r3
 800672a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10f      	bne.n	8006750 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800673e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800674e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	e000      	b.n	8006756 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006754:	2302      	movs	r3, #2
  }
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006778:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff feb8 	bl	80064f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b084      	sub	sp, #16
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b22      	cmp	r3, #34	; 0x22
 80067a4:	f040 8087 	bne.w	80068b6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b0:	d117      	bne.n	80067e2 <UART_Receive_IT+0x50>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d113      	bne.n	80067e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067da:	1c9a      	adds	r2, r3, #2
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	629a      	str	r2, [r3, #40]	; 0x28
 80067e0:	e026      	b.n	8006830 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d007      	beq.n	8006806 <UART_Receive_IT+0x74>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <UART_Receive_IT+0x82>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e008      	b.n	8006826 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006820:	b2da      	uxtb	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29b      	uxth	r3, r3
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	4619      	mov	r1, r3
 800683e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006840:	2b00      	cmp	r3, #0
 8006842:	d136      	bne.n	80068b2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0220 	bic.w	r2, r2, #32
 8006852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	2b01      	cmp	r3, #1
 8006882:	d10e      	bne.n	80068a2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0210 	bic.w	r2, r2, #16
 8006892:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff fe40 	bl	8006520 <HAL_UARTEx_RxEventCallback>
 80068a0:	e002      	b.n	80068a8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fb f95e 	bl	8001b64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e002      	b.n	80068b8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e000      	b.n	80068b8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80068b6:	2302      	movs	r3, #2
  }
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	b09f      	sub	sp, #124	; 0x7c
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d6:	68d9      	ldr	r1, [r3, #12]
 80068d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	ea40 0301 	orr.w	r3, r0, r1
 80068e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80068fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006904:	f021 010c 	bic.w	r1, r1, #12
 8006908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800690e:	430b      	orrs	r3, r1
 8006910:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800691c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691e:	6999      	ldr	r1, [r3, #24]
 8006920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	ea40 0301 	orr.w	r3, r0, r1
 8006928:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800692a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4bc5      	ldr	r3, [pc, #788]	; (8006c44 <UART_SetConfig+0x384>)
 8006930:	429a      	cmp	r2, r3
 8006932:	d004      	beq.n	800693e <UART_SetConfig+0x7e>
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4bc3      	ldr	r3, [pc, #780]	; (8006c48 <UART_SetConfig+0x388>)
 800693a:	429a      	cmp	r2, r3
 800693c:	d103      	bne.n	8006946 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800693e:	f7fe f9c1 	bl	8004cc4 <HAL_RCC_GetPCLK2Freq>
 8006942:	6778      	str	r0, [r7, #116]	; 0x74
 8006944:	e002      	b.n	800694c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006946:	f7fe f9a9 	bl	8004c9c <HAL_RCC_GetPCLK1Freq>
 800694a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800694c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006954:	f040 80b6 	bne.w	8006ac4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006958:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800695a:	461c      	mov	r4, r3
 800695c:	f04f 0500 	mov.w	r5, #0
 8006960:	4622      	mov	r2, r4
 8006962:	462b      	mov	r3, r5
 8006964:	1891      	adds	r1, r2, r2
 8006966:	6439      	str	r1, [r7, #64]	; 0x40
 8006968:	415b      	adcs	r3, r3
 800696a:	647b      	str	r3, [r7, #68]	; 0x44
 800696c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006970:	1912      	adds	r2, r2, r4
 8006972:	eb45 0303 	adc.w	r3, r5, r3
 8006976:	f04f 0000 	mov.w	r0, #0
 800697a:	f04f 0100 	mov.w	r1, #0
 800697e:	00d9      	lsls	r1, r3, #3
 8006980:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006984:	00d0      	lsls	r0, r2, #3
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	1911      	adds	r1, r2, r4
 800698c:	6639      	str	r1, [r7, #96]	; 0x60
 800698e:	416b      	adcs	r3, r5
 8006990:	667b      	str	r3, [r7, #100]	; 0x64
 8006992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	461a      	mov	r2, r3
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	1891      	adds	r1, r2, r2
 800699e:	63b9      	str	r1, [r7, #56]	; 0x38
 80069a0:	415b      	adcs	r3, r3
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80069ac:	f7fa fa3a 	bl	8000e24 <__aeabi_uldivmod>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4ba5      	ldr	r3, [pc, #660]	; (8006c4c <UART_SetConfig+0x38c>)
 80069b6:	fba3 2302 	umull	r2, r3, r3, r2
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	011e      	lsls	r6, r3, #4
 80069be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069c0:	461c      	mov	r4, r3
 80069c2:	f04f 0500 	mov.w	r5, #0
 80069c6:	4622      	mov	r2, r4
 80069c8:	462b      	mov	r3, r5
 80069ca:	1891      	adds	r1, r2, r2
 80069cc:	6339      	str	r1, [r7, #48]	; 0x30
 80069ce:	415b      	adcs	r3, r3
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
 80069d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80069d6:	1912      	adds	r2, r2, r4
 80069d8:	eb45 0303 	adc.w	r3, r5, r3
 80069dc:	f04f 0000 	mov.w	r0, #0
 80069e0:	f04f 0100 	mov.w	r1, #0
 80069e4:	00d9      	lsls	r1, r3, #3
 80069e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069ea:	00d0      	lsls	r0, r2, #3
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	1911      	adds	r1, r2, r4
 80069f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80069f4:	416b      	adcs	r3, r5
 80069f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	461a      	mov	r2, r3
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	1891      	adds	r1, r2, r2
 8006a04:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a06:	415b      	adcs	r3, r3
 8006a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a12:	f7fa fa07 	bl	8000e24 <__aeabi_uldivmod>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4b8c      	ldr	r3, [pc, #560]	; (8006c4c <UART_SetConfig+0x38c>)
 8006a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a20:	095b      	lsrs	r3, r3, #5
 8006a22:	2164      	movs	r1, #100	; 0x64
 8006a24:	fb01 f303 	mul.w	r3, r1, r3
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	3332      	adds	r3, #50	; 0x32
 8006a2e:	4a87      	ldr	r2, [pc, #540]	; (8006c4c <UART_SetConfig+0x38c>)
 8006a30:	fba2 2303 	umull	r2, r3, r2, r3
 8006a34:	095b      	lsrs	r3, r3, #5
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a3c:	441e      	add	r6, r3
 8006a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a40:	4618      	mov	r0, r3
 8006a42:	f04f 0100 	mov.w	r1, #0
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	1894      	adds	r4, r2, r2
 8006a4c:	623c      	str	r4, [r7, #32]
 8006a4e:	415b      	adcs	r3, r3
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
 8006a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a56:	1812      	adds	r2, r2, r0
 8006a58:	eb41 0303 	adc.w	r3, r1, r3
 8006a5c:	f04f 0400 	mov.w	r4, #0
 8006a60:	f04f 0500 	mov.w	r5, #0
 8006a64:	00dd      	lsls	r5, r3, #3
 8006a66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a6a:	00d4      	lsls	r4, r2, #3
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	462b      	mov	r3, r5
 8006a70:	1814      	adds	r4, r2, r0
 8006a72:	653c      	str	r4, [r7, #80]	; 0x50
 8006a74:	414b      	adcs	r3, r1
 8006a76:	657b      	str	r3, [r7, #84]	; 0x54
 8006a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	f04f 0300 	mov.w	r3, #0
 8006a82:	1891      	adds	r1, r2, r2
 8006a84:	61b9      	str	r1, [r7, #24]
 8006a86:	415b      	adcs	r3, r3
 8006a88:	61fb      	str	r3, [r7, #28]
 8006a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006a92:	f7fa f9c7 	bl	8000e24 <__aeabi_uldivmod>
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	4b6c      	ldr	r3, [pc, #432]	; (8006c4c <UART_SetConfig+0x38c>)
 8006a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	2164      	movs	r1, #100	; 0x64
 8006aa4:	fb01 f303 	mul.w	r3, r1, r3
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	3332      	adds	r3, #50	; 0x32
 8006aae:	4a67      	ldr	r2, [pc, #412]	; (8006c4c <UART_SetConfig+0x38c>)
 8006ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	f003 0207 	and.w	r2, r3, #7
 8006aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4432      	add	r2, r6
 8006ac0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ac2:	e0b9      	b.n	8006c38 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ac6:	461c      	mov	r4, r3
 8006ac8:	f04f 0500 	mov.w	r5, #0
 8006acc:	4622      	mov	r2, r4
 8006ace:	462b      	mov	r3, r5
 8006ad0:	1891      	adds	r1, r2, r2
 8006ad2:	6139      	str	r1, [r7, #16]
 8006ad4:	415b      	adcs	r3, r3
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006adc:	1912      	adds	r2, r2, r4
 8006ade:	eb45 0303 	adc.w	r3, r5, r3
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f04f 0100 	mov.w	r1, #0
 8006aea:	00d9      	lsls	r1, r3, #3
 8006aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006af0:	00d0      	lsls	r0, r2, #3
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	eb12 0804 	adds.w	r8, r2, r4
 8006afa:	eb43 0905 	adc.w	r9, r3, r5
 8006afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f04f 0100 	mov.w	r1, #0
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	008b      	lsls	r3, r1, #2
 8006b12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b16:	0082      	lsls	r2, r0, #2
 8006b18:	4640      	mov	r0, r8
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	f7fa f982 	bl	8000e24 <__aeabi_uldivmod>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4b49      	ldr	r3, [pc, #292]	; (8006c4c <UART_SetConfig+0x38c>)
 8006b26:	fba3 2302 	umull	r2, r3, r3, r2
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	011e      	lsls	r6, r3, #4
 8006b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b30:	4618      	mov	r0, r3
 8006b32:	f04f 0100 	mov.w	r1, #0
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	1894      	adds	r4, r2, r2
 8006b3c:	60bc      	str	r4, [r7, #8]
 8006b3e:	415b      	adcs	r3, r3
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b46:	1812      	adds	r2, r2, r0
 8006b48:	eb41 0303 	adc.w	r3, r1, r3
 8006b4c:	f04f 0400 	mov.w	r4, #0
 8006b50:	f04f 0500 	mov.w	r5, #0
 8006b54:	00dd      	lsls	r5, r3, #3
 8006b56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b5a:	00d4      	lsls	r4, r2, #3
 8006b5c:	4622      	mov	r2, r4
 8006b5e:	462b      	mov	r3, r5
 8006b60:	1814      	adds	r4, r2, r0
 8006b62:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b64:	414b      	adcs	r3, r1
 8006b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f04f 0100 	mov.w	r1, #0
 8006b72:	f04f 0200 	mov.w	r2, #0
 8006b76:	f04f 0300 	mov.w	r3, #0
 8006b7a:	008b      	lsls	r3, r1, #2
 8006b7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b80:	0082      	lsls	r2, r0, #2
 8006b82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006b86:	f7fa f94d 	bl	8000e24 <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4b2f      	ldr	r3, [pc, #188]	; (8006c4c <UART_SetConfig+0x38c>)
 8006b90:	fba3 1302 	umull	r1, r3, r3, r2
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	2164      	movs	r1, #100	; 0x64
 8006b98:	fb01 f303 	mul.w	r3, r1, r3
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	3332      	adds	r3, #50	; 0x32
 8006ba2:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <UART_SetConfig+0x38c>)
 8006ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bae:	441e      	add	r6, r3
 8006bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f04f 0100 	mov.w	r1, #0
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	1894      	adds	r4, r2, r2
 8006bbe:	603c      	str	r4, [r7, #0]
 8006bc0:	415b      	adcs	r3, r3
 8006bc2:	607b      	str	r3, [r7, #4]
 8006bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc8:	1812      	adds	r2, r2, r0
 8006bca:	eb41 0303 	adc.w	r3, r1, r3
 8006bce:	f04f 0400 	mov.w	r4, #0
 8006bd2:	f04f 0500 	mov.w	r5, #0
 8006bd6:	00dd      	lsls	r5, r3, #3
 8006bd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bdc:	00d4      	lsls	r4, r2, #3
 8006bde:	4622      	mov	r2, r4
 8006be0:	462b      	mov	r3, r5
 8006be2:	eb12 0a00 	adds.w	sl, r2, r0
 8006be6:	eb43 0b01 	adc.w	fp, r3, r1
 8006bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f04f 0100 	mov.w	r1, #0
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	008b      	lsls	r3, r1, #2
 8006bfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c02:	0082      	lsls	r2, r0, #2
 8006c04:	4650      	mov	r0, sl
 8006c06:	4659      	mov	r1, fp
 8006c08:	f7fa f90c 	bl	8000e24 <__aeabi_uldivmod>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4b0e      	ldr	r3, [pc, #56]	; (8006c4c <UART_SetConfig+0x38c>)
 8006c12:	fba3 1302 	umull	r1, r3, r3, r2
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	2164      	movs	r1, #100	; 0x64
 8006c1a:	fb01 f303 	mul.w	r3, r1, r3
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	011b      	lsls	r3, r3, #4
 8006c22:	3332      	adds	r3, #50	; 0x32
 8006c24:	4a09      	ldr	r2, [pc, #36]	; (8006c4c <UART_SetConfig+0x38c>)
 8006c26:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	f003 020f 	and.w	r2, r3, #15
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4432      	add	r2, r6
 8006c36:	609a      	str	r2, [r3, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	377c      	adds	r7, #124	; 0x7c
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c42:	bf00      	nop
 8006c44:	40011000 	.word	0x40011000
 8006c48:	40011400 	.word	0x40011400
 8006c4c:	51eb851f 	.word	0x51eb851f

08006c50 <__errno>:
 8006c50:	4b01      	ldr	r3, [pc, #4]	; (8006c58 <__errno+0x8>)
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	20000010 	.word	0x20000010

08006c5c <__libc_init_array>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4d0d      	ldr	r5, [pc, #52]	; (8006c94 <__libc_init_array+0x38>)
 8006c60:	4c0d      	ldr	r4, [pc, #52]	; (8006c98 <__libc_init_array+0x3c>)
 8006c62:	1b64      	subs	r4, r4, r5
 8006c64:	10a4      	asrs	r4, r4, #2
 8006c66:	2600      	movs	r6, #0
 8006c68:	42a6      	cmp	r6, r4
 8006c6a:	d109      	bne.n	8006c80 <__libc_init_array+0x24>
 8006c6c:	4d0b      	ldr	r5, [pc, #44]	; (8006c9c <__libc_init_array+0x40>)
 8006c6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ca0 <__libc_init_array+0x44>)
 8006c70:	f000 fd36 	bl	80076e0 <_init>
 8006c74:	1b64      	subs	r4, r4, r5
 8006c76:	10a4      	asrs	r4, r4, #2
 8006c78:	2600      	movs	r6, #0
 8006c7a:	42a6      	cmp	r6, r4
 8006c7c:	d105      	bne.n	8006c8a <__libc_init_array+0x2e>
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c84:	4798      	blx	r3
 8006c86:	3601      	adds	r6, #1
 8006c88:	e7ee      	b.n	8006c68 <__libc_init_array+0xc>
 8006c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8e:	4798      	blx	r3
 8006c90:	3601      	adds	r6, #1
 8006c92:	e7f2      	b.n	8006c7a <__libc_init_array+0x1e>
 8006c94:	080077e0 	.word	0x080077e0
 8006c98:	080077e0 	.word	0x080077e0
 8006c9c:	080077e0 	.word	0x080077e0
 8006ca0:	080077e4 	.word	0x080077e4

08006ca4 <memset>:
 8006ca4:	4402      	add	r2, r0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d100      	bne.n	8006cae <memset+0xa>
 8006cac:	4770      	bx	lr
 8006cae:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb2:	e7f9      	b.n	8006ca8 <memset+0x4>

08006cb4 <siprintf>:
 8006cb4:	b40e      	push	{r1, r2, r3}
 8006cb6:	b500      	push	{lr}
 8006cb8:	b09c      	sub	sp, #112	; 0x70
 8006cba:	ab1d      	add	r3, sp, #116	; 0x74
 8006cbc:	9002      	str	r0, [sp, #8]
 8006cbe:	9006      	str	r0, [sp, #24]
 8006cc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cc4:	4809      	ldr	r0, [pc, #36]	; (8006cec <siprintf+0x38>)
 8006cc6:	9107      	str	r1, [sp, #28]
 8006cc8:	9104      	str	r1, [sp, #16]
 8006cca:	4909      	ldr	r1, [pc, #36]	; (8006cf0 <siprintf+0x3c>)
 8006ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd0:	9105      	str	r1, [sp, #20]
 8006cd2:	6800      	ldr	r0, [r0, #0]
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	a902      	add	r1, sp, #8
 8006cd8:	f000 f868 	bl	8006dac <_svfiprintf_r>
 8006cdc:	9b02      	ldr	r3, [sp, #8]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	b01c      	add	sp, #112	; 0x70
 8006ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ce8:	b003      	add	sp, #12
 8006cea:	4770      	bx	lr
 8006cec:	20000010 	.word	0x20000010
 8006cf0:	ffff0208 	.word	0xffff0208

08006cf4 <__ssputs_r>:
 8006cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf8:	688e      	ldr	r6, [r1, #8]
 8006cfa:	429e      	cmp	r6, r3
 8006cfc:	4682      	mov	sl, r0
 8006cfe:	460c      	mov	r4, r1
 8006d00:	4690      	mov	r8, r2
 8006d02:	461f      	mov	r7, r3
 8006d04:	d838      	bhi.n	8006d78 <__ssputs_r+0x84>
 8006d06:	898a      	ldrh	r2, [r1, #12]
 8006d08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d0c:	d032      	beq.n	8006d74 <__ssputs_r+0x80>
 8006d0e:	6825      	ldr	r5, [r4, #0]
 8006d10:	6909      	ldr	r1, [r1, #16]
 8006d12:	eba5 0901 	sub.w	r9, r5, r1
 8006d16:	6965      	ldr	r5, [r4, #20]
 8006d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d20:	3301      	adds	r3, #1
 8006d22:	444b      	add	r3, r9
 8006d24:	106d      	asrs	r5, r5, #1
 8006d26:	429d      	cmp	r5, r3
 8006d28:	bf38      	it	cc
 8006d2a:	461d      	movcc	r5, r3
 8006d2c:	0553      	lsls	r3, r2, #21
 8006d2e:	d531      	bpl.n	8006d94 <__ssputs_r+0xa0>
 8006d30:	4629      	mov	r1, r5
 8006d32:	f000 fb47 	bl	80073c4 <_malloc_r>
 8006d36:	4606      	mov	r6, r0
 8006d38:	b950      	cbnz	r0, 8006d50 <__ssputs_r+0x5c>
 8006d3a:	230c      	movs	r3, #12
 8006d3c:	f8ca 3000 	str.w	r3, [sl]
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d46:	81a3      	strh	r3, [r4, #12]
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d50:	6921      	ldr	r1, [r4, #16]
 8006d52:	464a      	mov	r2, r9
 8006d54:	f000 fabe 	bl	80072d4 <memcpy>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	6126      	str	r6, [r4, #16]
 8006d66:	6165      	str	r5, [r4, #20]
 8006d68:	444e      	add	r6, r9
 8006d6a:	eba5 0509 	sub.w	r5, r5, r9
 8006d6e:	6026      	str	r6, [r4, #0]
 8006d70:	60a5      	str	r5, [r4, #8]
 8006d72:	463e      	mov	r6, r7
 8006d74:	42be      	cmp	r6, r7
 8006d76:	d900      	bls.n	8006d7a <__ssputs_r+0x86>
 8006d78:	463e      	mov	r6, r7
 8006d7a:	4632      	mov	r2, r6
 8006d7c:	6820      	ldr	r0, [r4, #0]
 8006d7e:	4641      	mov	r1, r8
 8006d80:	f000 fab6 	bl	80072f0 <memmove>
 8006d84:	68a3      	ldr	r3, [r4, #8]
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	1b9b      	subs	r3, r3, r6
 8006d8a:	4432      	add	r2, r6
 8006d8c:	60a3      	str	r3, [r4, #8]
 8006d8e:	6022      	str	r2, [r4, #0]
 8006d90:	2000      	movs	r0, #0
 8006d92:	e7db      	b.n	8006d4c <__ssputs_r+0x58>
 8006d94:	462a      	mov	r2, r5
 8006d96:	f000 fb6f 	bl	8007478 <_realloc_r>
 8006d9a:	4606      	mov	r6, r0
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d1e1      	bne.n	8006d64 <__ssputs_r+0x70>
 8006da0:	6921      	ldr	r1, [r4, #16]
 8006da2:	4650      	mov	r0, sl
 8006da4:	f000 fabe 	bl	8007324 <_free_r>
 8006da8:	e7c7      	b.n	8006d3a <__ssputs_r+0x46>
	...

08006dac <_svfiprintf_r>:
 8006dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db0:	4698      	mov	r8, r3
 8006db2:	898b      	ldrh	r3, [r1, #12]
 8006db4:	061b      	lsls	r3, r3, #24
 8006db6:	b09d      	sub	sp, #116	; 0x74
 8006db8:	4607      	mov	r7, r0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	4614      	mov	r4, r2
 8006dbe:	d50e      	bpl.n	8006dde <_svfiprintf_r+0x32>
 8006dc0:	690b      	ldr	r3, [r1, #16]
 8006dc2:	b963      	cbnz	r3, 8006dde <_svfiprintf_r+0x32>
 8006dc4:	2140      	movs	r1, #64	; 0x40
 8006dc6:	f000 fafd 	bl	80073c4 <_malloc_r>
 8006dca:	6028      	str	r0, [r5, #0]
 8006dcc:	6128      	str	r0, [r5, #16]
 8006dce:	b920      	cbnz	r0, 8006dda <_svfiprintf_r+0x2e>
 8006dd0:	230c      	movs	r3, #12
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e0d1      	b.n	8006f7e <_svfiprintf_r+0x1d2>
 8006dda:	2340      	movs	r3, #64	; 0x40
 8006ddc:	616b      	str	r3, [r5, #20]
 8006dde:	2300      	movs	r3, #0
 8006de0:	9309      	str	r3, [sp, #36]	; 0x24
 8006de2:	2320      	movs	r3, #32
 8006de4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dec:	2330      	movs	r3, #48	; 0x30
 8006dee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f98 <_svfiprintf_r+0x1ec>
 8006df2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006df6:	f04f 0901 	mov.w	r9, #1
 8006dfa:	4623      	mov	r3, r4
 8006dfc:	469a      	mov	sl, r3
 8006dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e02:	b10a      	cbz	r2, 8006e08 <_svfiprintf_r+0x5c>
 8006e04:	2a25      	cmp	r2, #37	; 0x25
 8006e06:	d1f9      	bne.n	8006dfc <_svfiprintf_r+0x50>
 8006e08:	ebba 0b04 	subs.w	fp, sl, r4
 8006e0c:	d00b      	beq.n	8006e26 <_svfiprintf_r+0x7a>
 8006e0e:	465b      	mov	r3, fp
 8006e10:	4622      	mov	r2, r4
 8006e12:	4629      	mov	r1, r5
 8006e14:	4638      	mov	r0, r7
 8006e16:	f7ff ff6d 	bl	8006cf4 <__ssputs_r>
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f000 80aa 	beq.w	8006f74 <_svfiprintf_r+0x1c8>
 8006e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e22:	445a      	add	r2, fp
 8006e24:	9209      	str	r2, [sp, #36]	; 0x24
 8006e26:	f89a 3000 	ldrb.w	r3, [sl]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 80a2 	beq.w	8006f74 <_svfiprintf_r+0x1c8>
 8006e30:	2300      	movs	r3, #0
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295
 8006e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e3a:	f10a 0a01 	add.w	sl, sl, #1
 8006e3e:	9304      	str	r3, [sp, #16]
 8006e40:	9307      	str	r3, [sp, #28]
 8006e42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e46:	931a      	str	r3, [sp, #104]	; 0x68
 8006e48:	4654      	mov	r4, sl
 8006e4a:	2205      	movs	r2, #5
 8006e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e50:	4851      	ldr	r0, [pc, #324]	; (8006f98 <_svfiprintf_r+0x1ec>)
 8006e52:	f7f9 f9cd 	bl	80001f0 <memchr>
 8006e56:	9a04      	ldr	r2, [sp, #16]
 8006e58:	b9d8      	cbnz	r0, 8006e92 <_svfiprintf_r+0xe6>
 8006e5a:	06d0      	lsls	r0, r2, #27
 8006e5c:	bf44      	itt	mi
 8006e5e:	2320      	movmi	r3, #32
 8006e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e64:	0711      	lsls	r1, r2, #28
 8006e66:	bf44      	itt	mi
 8006e68:	232b      	movmi	r3, #43	; 0x2b
 8006e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e72:	2b2a      	cmp	r3, #42	; 0x2a
 8006e74:	d015      	beq.n	8006ea2 <_svfiprintf_r+0xf6>
 8006e76:	9a07      	ldr	r2, [sp, #28]
 8006e78:	4654      	mov	r4, sl
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	f04f 0c0a 	mov.w	ip, #10
 8006e80:	4621      	mov	r1, r4
 8006e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e86:	3b30      	subs	r3, #48	; 0x30
 8006e88:	2b09      	cmp	r3, #9
 8006e8a:	d94e      	bls.n	8006f2a <_svfiprintf_r+0x17e>
 8006e8c:	b1b0      	cbz	r0, 8006ebc <_svfiprintf_r+0x110>
 8006e8e:	9207      	str	r2, [sp, #28]
 8006e90:	e014      	b.n	8006ebc <_svfiprintf_r+0x110>
 8006e92:	eba0 0308 	sub.w	r3, r0, r8
 8006e96:	fa09 f303 	lsl.w	r3, r9, r3
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	46a2      	mov	sl, r4
 8006ea0:	e7d2      	b.n	8006e48 <_svfiprintf_r+0x9c>
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	1d19      	adds	r1, r3, #4
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	9103      	str	r1, [sp, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	bfbb      	ittet	lt
 8006eae:	425b      	neglt	r3, r3
 8006eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8006eb4:	9307      	strge	r3, [sp, #28]
 8006eb6:	9307      	strlt	r3, [sp, #28]
 8006eb8:	bfb8      	it	lt
 8006eba:	9204      	strlt	r2, [sp, #16]
 8006ebc:	7823      	ldrb	r3, [r4, #0]
 8006ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8006ec0:	d10c      	bne.n	8006edc <_svfiprintf_r+0x130>
 8006ec2:	7863      	ldrb	r3, [r4, #1]
 8006ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec6:	d135      	bne.n	8006f34 <_svfiprintf_r+0x188>
 8006ec8:	9b03      	ldr	r3, [sp, #12]
 8006eca:	1d1a      	adds	r2, r3, #4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	9203      	str	r2, [sp, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bfb8      	it	lt
 8006ed4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ed8:	3402      	adds	r4, #2
 8006eda:	9305      	str	r3, [sp, #20]
 8006edc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fa8 <_svfiprintf_r+0x1fc>
 8006ee0:	7821      	ldrb	r1, [r4, #0]
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	4650      	mov	r0, sl
 8006ee6:	f7f9 f983 	bl	80001f0 <memchr>
 8006eea:	b140      	cbz	r0, 8006efe <_svfiprintf_r+0x152>
 8006eec:	2340      	movs	r3, #64	; 0x40
 8006eee:	eba0 000a 	sub.w	r0, r0, sl
 8006ef2:	fa03 f000 	lsl.w	r0, r3, r0
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	4303      	orrs	r3, r0
 8006efa:	3401      	adds	r4, #1
 8006efc:	9304      	str	r3, [sp, #16]
 8006efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f02:	4826      	ldr	r0, [pc, #152]	; (8006f9c <_svfiprintf_r+0x1f0>)
 8006f04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f08:	2206      	movs	r2, #6
 8006f0a:	f7f9 f971 	bl	80001f0 <memchr>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d038      	beq.n	8006f84 <_svfiprintf_r+0x1d8>
 8006f12:	4b23      	ldr	r3, [pc, #140]	; (8006fa0 <_svfiprintf_r+0x1f4>)
 8006f14:	bb1b      	cbnz	r3, 8006f5e <_svfiprintf_r+0x1b2>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	3307      	adds	r3, #7
 8006f1a:	f023 0307 	bic.w	r3, r3, #7
 8006f1e:	3308      	adds	r3, #8
 8006f20:	9303      	str	r3, [sp, #12]
 8006f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f24:	4433      	add	r3, r6
 8006f26:	9309      	str	r3, [sp, #36]	; 0x24
 8006f28:	e767      	b.n	8006dfa <_svfiprintf_r+0x4e>
 8006f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f2e:	460c      	mov	r4, r1
 8006f30:	2001      	movs	r0, #1
 8006f32:	e7a5      	b.n	8006e80 <_svfiprintf_r+0xd4>
 8006f34:	2300      	movs	r3, #0
 8006f36:	3401      	adds	r4, #1
 8006f38:	9305      	str	r3, [sp, #20]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	f04f 0c0a 	mov.w	ip, #10
 8006f40:	4620      	mov	r0, r4
 8006f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f46:	3a30      	subs	r2, #48	; 0x30
 8006f48:	2a09      	cmp	r2, #9
 8006f4a:	d903      	bls.n	8006f54 <_svfiprintf_r+0x1a8>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0c5      	beq.n	8006edc <_svfiprintf_r+0x130>
 8006f50:	9105      	str	r1, [sp, #20]
 8006f52:	e7c3      	b.n	8006edc <_svfiprintf_r+0x130>
 8006f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f58:	4604      	mov	r4, r0
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e7f0      	b.n	8006f40 <_svfiprintf_r+0x194>
 8006f5e:	ab03      	add	r3, sp, #12
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	462a      	mov	r2, r5
 8006f64:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <_svfiprintf_r+0x1f8>)
 8006f66:	a904      	add	r1, sp, #16
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f3af 8000 	nop.w
 8006f6e:	1c42      	adds	r2, r0, #1
 8006f70:	4606      	mov	r6, r0
 8006f72:	d1d6      	bne.n	8006f22 <_svfiprintf_r+0x176>
 8006f74:	89ab      	ldrh	r3, [r5, #12]
 8006f76:	065b      	lsls	r3, r3, #25
 8006f78:	f53f af2c 	bmi.w	8006dd4 <_svfiprintf_r+0x28>
 8006f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f7e:	b01d      	add	sp, #116	; 0x74
 8006f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f84:	ab03      	add	r3, sp, #12
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	462a      	mov	r2, r5
 8006f8a:	4b06      	ldr	r3, [pc, #24]	; (8006fa4 <_svfiprintf_r+0x1f8>)
 8006f8c:	a904      	add	r1, sp, #16
 8006f8e:	4638      	mov	r0, r7
 8006f90:	f000 f87a 	bl	8007088 <_printf_i>
 8006f94:	e7eb      	b.n	8006f6e <_svfiprintf_r+0x1c2>
 8006f96:	bf00      	nop
 8006f98:	080077a4 	.word	0x080077a4
 8006f9c:	080077ae 	.word	0x080077ae
 8006fa0:	00000000 	.word	0x00000000
 8006fa4:	08006cf5 	.word	0x08006cf5
 8006fa8:	080077aa 	.word	0x080077aa

08006fac <_printf_common>:
 8006fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	4699      	mov	r9, r3
 8006fb4:	688a      	ldr	r2, [r1, #8]
 8006fb6:	690b      	ldr	r3, [r1, #16]
 8006fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	bfb8      	it	lt
 8006fc0:	4613      	movlt	r3, r2
 8006fc2:	6033      	str	r3, [r6, #0]
 8006fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fc8:	4607      	mov	r7, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b10a      	cbz	r2, 8006fd2 <_printf_common+0x26>
 8006fce:	3301      	adds	r3, #1
 8006fd0:	6033      	str	r3, [r6, #0]
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	0699      	lsls	r1, r3, #26
 8006fd6:	bf42      	ittt	mi
 8006fd8:	6833      	ldrmi	r3, [r6, #0]
 8006fda:	3302      	addmi	r3, #2
 8006fdc:	6033      	strmi	r3, [r6, #0]
 8006fde:	6825      	ldr	r5, [r4, #0]
 8006fe0:	f015 0506 	ands.w	r5, r5, #6
 8006fe4:	d106      	bne.n	8006ff4 <_printf_common+0x48>
 8006fe6:	f104 0a19 	add.w	sl, r4, #25
 8006fea:	68e3      	ldr	r3, [r4, #12]
 8006fec:	6832      	ldr	r2, [r6, #0]
 8006fee:	1a9b      	subs	r3, r3, r2
 8006ff0:	42ab      	cmp	r3, r5
 8006ff2:	dc26      	bgt.n	8007042 <_printf_common+0x96>
 8006ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ff8:	1e13      	subs	r3, r2, #0
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	bf18      	it	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	0692      	lsls	r2, r2, #26
 8007002:	d42b      	bmi.n	800705c <_printf_common+0xb0>
 8007004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007008:	4649      	mov	r1, r9
 800700a:	4638      	mov	r0, r7
 800700c:	47c0      	blx	r8
 800700e:	3001      	adds	r0, #1
 8007010:	d01e      	beq.n	8007050 <_printf_common+0xa4>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	68e5      	ldr	r5, [r4, #12]
 8007016:	6832      	ldr	r2, [r6, #0]
 8007018:	f003 0306 	and.w	r3, r3, #6
 800701c:	2b04      	cmp	r3, #4
 800701e:	bf08      	it	eq
 8007020:	1aad      	subeq	r5, r5, r2
 8007022:	68a3      	ldr	r3, [r4, #8]
 8007024:	6922      	ldr	r2, [r4, #16]
 8007026:	bf0c      	ite	eq
 8007028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800702c:	2500      	movne	r5, #0
 800702e:	4293      	cmp	r3, r2
 8007030:	bfc4      	itt	gt
 8007032:	1a9b      	subgt	r3, r3, r2
 8007034:	18ed      	addgt	r5, r5, r3
 8007036:	2600      	movs	r6, #0
 8007038:	341a      	adds	r4, #26
 800703a:	42b5      	cmp	r5, r6
 800703c:	d11a      	bne.n	8007074 <_printf_common+0xc8>
 800703e:	2000      	movs	r0, #0
 8007040:	e008      	b.n	8007054 <_printf_common+0xa8>
 8007042:	2301      	movs	r3, #1
 8007044:	4652      	mov	r2, sl
 8007046:	4649      	mov	r1, r9
 8007048:	4638      	mov	r0, r7
 800704a:	47c0      	blx	r8
 800704c:	3001      	adds	r0, #1
 800704e:	d103      	bne.n	8007058 <_printf_common+0xac>
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007058:	3501      	adds	r5, #1
 800705a:	e7c6      	b.n	8006fea <_printf_common+0x3e>
 800705c:	18e1      	adds	r1, r4, r3
 800705e:	1c5a      	adds	r2, r3, #1
 8007060:	2030      	movs	r0, #48	; 0x30
 8007062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007066:	4422      	add	r2, r4
 8007068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800706c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007070:	3302      	adds	r3, #2
 8007072:	e7c7      	b.n	8007004 <_printf_common+0x58>
 8007074:	2301      	movs	r3, #1
 8007076:	4622      	mov	r2, r4
 8007078:	4649      	mov	r1, r9
 800707a:	4638      	mov	r0, r7
 800707c:	47c0      	blx	r8
 800707e:	3001      	adds	r0, #1
 8007080:	d0e6      	beq.n	8007050 <_printf_common+0xa4>
 8007082:	3601      	adds	r6, #1
 8007084:	e7d9      	b.n	800703a <_printf_common+0x8e>
	...

08007088 <_printf_i>:
 8007088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800708c:	460c      	mov	r4, r1
 800708e:	4691      	mov	r9, r2
 8007090:	7e27      	ldrb	r7, [r4, #24]
 8007092:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007094:	2f78      	cmp	r7, #120	; 0x78
 8007096:	4680      	mov	r8, r0
 8007098:	469a      	mov	sl, r3
 800709a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800709e:	d807      	bhi.n	80070b0 <_printf_i+0x28>
 80070a0:	2f62      	cmp	r7, #98	; 0x62
 80070a2:	d80a      	bhi.n	80070ba <_printf_i+0x32>
 80070a4:	2f00      	cmp	r7, #0
 80070a6:	f000 80d8 	beq.w	800725a <_printf_i+0x1d2>
 80070aa:	2f58      	cmp	r7, #88	; 0x58
 80070ac:	f000 80a3 	beq.w	80071f6 <_printf_i+0x16e>
 80070b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070b8:	e03a      	b.n	8007130 <_printf_i+0xa8>
 80070ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070be:	2b15      	cmp	r3, #21
 80070c0:	d8f6      	bhi.n	80070b0 <_printf_i+0x28>
 80070c2:	a001      	add	r0, pc, #4	; (adr r0, 80070c8 <_printf_i+0x40>)
 80070c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80070c8:	08007121 	.word	0x08007121
 80070cc:	08007135 	.word	0x08007135
 80070d0:	080070b1 	.word	0x080070b1
 80070d4:	080070b1 	.word	0x080070b1
 80070d8:	080070b1 	.word	0x080070b1
 80070dc:	080070b1 	.word	0x080070b1
 80070e0:	08007135 	.word	0x08007135
 80070e4:	080070b1 	.word	0x080070b1
 80070e8:	080070b1 	.word	0x080070b1
 80070ec:	080070b1 	.word	0x080070b1
 80070f0:	080070b1 	.word	0x080070b1
 80070f4:	08007241 	.word	0x08007241
 80070f8:	08007165 	.word	0x08007165
 80070fc:	08007223 	.word	0x08007223
 8007100:	080070b1 	.word	0x080070b1
 8007104:	080070b1 	.word	0x080070b1
 8007108:	08007263 	.word	0x08007263
 800710c:	080070b1 	.word	0x080070b1
 8007110:	08007165 	.word	0x08007165
 8007114:	080070b1 	.word	0x080070b1
 8007118:	080070b1 	.word	0x080070b1
 800711c:	0800722b 	.word	0x0800722b
 8007120:	680b      	ldr	r3, [r1, #0]
 8007122:	1d1a      	adds	r2, r3, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	600a      	str	r2, [r1, #0]
 8007128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800712c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007130:	2301      	movs	r3, #1
 8007132:	e0a3      	b.n	800727c <_printf_i+0x1f4>
 8007134:	6825      	ldr	r5, [r4, #0]
 8007136:	6808      	ldr	r0, [r1, #0]
 8007138:	062e      	lsls	r6, r5, #24
 800713a:	f100 0304 	add.w	r3, r0, #4
 800713e:	d50a      	bpl.n	8007156 <_printf_i+0xce>
 8007140:	6805      	ldr	r5, [r0, #0]
 8007142:	600b      	str	r3, [r1, #0]
 8007144:	2d00      	cmp	r5, #0
 8007146:	da03      	bge.n	8007150 <_printf_i+0xc8>
 8007148:	232d      	movs	r3, #45	; 0x2d
 800714a:	426d      	negs	r5, r5
 800714c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007150:	485e      	ldr	r0, [pc, #376]	; (80072cc <_printf_i+0x244>)
 8007152:	230a      	movs	r3, #10
 8007154:	e019      	b.n	800718a <_printf_i+0x102>
 8007156:	f015 0f40 	tst.w	r5, #64	; 0x40
 800715a:	6805      	ldr	r5, [r0, #0]
 800715c:	600b      	str	r3, [r1, #0]
 800715e:	bf18      	it	ne
 8007160:	b22d      	sxthne	r5, r5
 8007162:	e7ef      	b.n	8007144 <_printf_i+0xbc>
 8007164:	680b      	ldr	r3, [r1, #0]
 8007166:	6825      	ldr	r5, [r4, #0]
 8007168:	1d18      	adds	r0, r3, #4
 800716a:	6008      	str	r0, [r1, #0]
 800716c:	0628      	lsls	r0, r5, #24
 800716e:	d501      	bpl.n	8007174 <_printf_i+0xec>
 8007170:	681d      	ldr	r5, [r3, #0]
 8007172:	e002      	b.n	800717a <_printf_i+0xf2>
 8007174:	0669      	lsls	r1, r5, #25
 8007176:	d5fb      	bpl.n	8007170 <_printf_i+0xe8>
 8007178:	881d      	ldrh	r5, [r3, #0]
 800717a:	4854      	ldr	r0, [pc, #336]	; (80072cc <_printf_i+0x244>)
 800717c:	2f6f      	cmp	r7, #111	; 0x6f
 800717e:	bf0c      	ite	eq
 8007180:	2308      	moveq	r3, #8
 8007182:	230a      	movne	r3, #10
 8007184:	2100      	movs	r1, #0
 8007186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800718a:	6866      	ldr	r6, [r4, #4]
 800718c:	60a6      	str	r6, [r4, #8]
 800718e:	2e00      	cmp	r6, #0
 8007190:	bfa2      	ittt	ge
 8007192:	6821      	ldrge	r1, [r4, #0]
 8007194:	f021 0104 	bicge.w	r1, r1, #4
 8007198:	6021      	strge	r1, [r4, #0]
 800719a:	b90d      	cbnz	r5, 80071a0 <_printf_i+0x118>
 800719c:	2e00      	cmp	r6, #0
 800719e:	d04d      	beq.n	800723c <_printf_i+0x1b4>
 80071a0:	4616      	mov	r6, r2
 80071a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80071a6:	fb03 5711 	mls	r7, r3, r1, r5
 80071aa:	5dc7      	ldrb	r7, [r0, r7]
 80071ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071b0:	462f      	mov	r7, r5
 80071b2:	42bb      	cmp	r3, r7
 80071b4:	460d      	mov	r5, r1
 80071b6:	d9f4      	bls.n	80071a2 <_printf_i+0x11a>
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d10b      	bne.n	80071d4 <_printf_i+0x14c>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	07df      	lsls	r7, r3, #31
 80071c0:	d508      	bpl.n	80071d4 <_printf_i+0x14c>
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	6861      	ldr	r1, [r4, #4]
 80071c6:	4299      	cmp	r1, r3
 80071c8:	bfde      	ittt	le
 80071ca:	2330      	movle	r3, #48	; 0x30
 80071cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071d4:	1b92      	subs	r2, r2, r6
 80071d6:	6122      	str	r2, [r4, #16]
 80071d8:	f8cd a000 	str.w	sl, [sp]
 80071dc:	464b      	mov	r3, r9
 80071de:	aa03      	add	r2, sp, #12
 80071e0:	4621      	mov	r1, r4
 80071e2:	4640      	mov	r0, r8
 80071e4:	f7ff fee2 	bl	8006fac <_printf_common>
 80071e8:	3001      	adds	r0, #1
 80071ea:	d14c      	bne.n	8007286 <_printf_i+0x1fe>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	b004      	add	sp, #16
 80071f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f6:	4835      	ldr	r0, [pc, #212]	; (80072cc <_printf_i+0x244>)
 80071f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	680e      	ldr	r6, [r1, #0]
 8007200:	061f      	lsls	r7, r3, #24
 8007202:	f856 5b04 	ldr.w	r5, [r6], #4
 8007206:	600e      	str	r6, [r1, #0]
 8007208:	d514      	bpl.n	8007234 <_printf_i+0x1ac>
 800720a:	07d9      	lsls	r1, r3, #31
 800720c:	bf44      	itt	mi
 800720e:	f043 0320 	orrmi.w	r3, r3, #32
 8007212:	6023      	strmi	r3, [r4, #0]
 8007214:	b91d      	cbnz	r5, 800721e <_printf_i+0x196>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	f023 0320 	bic.w	r3, r3, #32
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	2310      	movs	r3, #16
 8007220:	e7b0      	b.n	8007184 <_printf_i+0xfc>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f043 0320 	orr.w	r3, r3, #32
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	2378      	movs	r3, #120	; 0x78
 800722c:	4828      	ldr	r0, [pc, #160]	; (80072d0 <_printf_i+0x248>)
 800722e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007232:	e7e3      	b.n	80071fc <_printf_i+0x174>
 8007234:	065e      	lsls	r6, r3, #25
 8007236:	bf48      	it	mi
 8007238:	b2ad      	uxthmi	r5, r5
 800723a:	e7e6      	b.n	800720a <_printf_i+0x182>
 800723c:	4616      	mov	r6, r2
 800723e:	e7bb      	b.n	80071b8 <_printf_i+0x130>
 8007240:	680b      	ldr	r3, [r1, #0]
 8007242:	6826      	ldr	r6, [r4, #0]
 8007244:	6960      	ldr	r0, [r4, #20]
 8007246:	1d1d      	adds	r5, r3, #4
 8007248:	600d      	str	r5, [r1, #0]
 800724a:	0635      	lsls	r5, r6, #24
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	d501      	bpl.n	8007254 <_printf_i+0x1cc>
 8007250:	6018      	str	r0, [r3, #0]
 8007252:	e002      	b.n	800725a <_printf_i+0x1d2>
 8007254:	0671      	lsls	r1, r6, #25
 8007256:	d5fb      	bpl.n	8007250 <_printf_i+0x1c8>
 8007258:	8018      	strh	r0, [r3, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	4616      	mov	r6, r2
 8007260:	e7ba      	b.n	80071d8 <_printf_i+0x150>
 8007262:	680b      	ldr	r3, [r1, #0]
 8007264:	1d1a      	adds	r2, r3, #4
 8007266:	600a      	str	r2, [r1, #0]
 8007268:	681e      	ldr	r6, [r3, #0]
 800726a:	6862      	ldr	r2, [r4, #4]
 800726c:	2100      	movs	r1, #0
 800726e:	4630      	mov	r0, r6
 8007270:	f7f8 ffbe 	bl	80001f0 <memchr>
 8007274:	b108      	cbz	r0, 800727a <_printf_i+0x1f2>
 8007276:	1b80      	subs	r0, r0, r6
 8007278:	6060      	str	r0, [r4, #4]
 800727a:	6863      	ldr	r3, [r4, #4]
 800727c:	6123      	str	r3, [r4, #16]
 800727e:	2300      	movs	r3, #0
 8007280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007284:	e7a8      	b.n	80071d8 <_printf_i+0x150>
 8007286:	6923      	ldr	r3, [r4, #16]
 8007288:	4632      	mov	r2, r6
 800728a:	4649      	mov	r1, r9
 800728c:	4640      	mov	r0, r8
 800728e:	47d0      	blx	sl
 8007290:	3001      	adds	r0, #1
 8007292:	d0ab      	beq.n	80071ec <_printf_i+0x164>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	079b      	lsls	r3, r3, #30
 8007298:	d413      	bmi.n	80072c2 <_printf_i+0x23a>
 800729a:	68e0      	ldr	r0, [r4, #12]
 800729c:	9b03      	ldr	r3, [sp, #12]
 800729e:	4298      	cmp	r0, r3
 80072a0:	bfb8      	it	lt
 80072a2:	4618      	movlt	r0, r3
 80072a4:	e7a4      	b.n	80071f0 <_printf_i+0x168>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4632      	mov	r2, r6
 80072aa:	4649      	mov	r1, r9
 80072ac:	4640      	mov	r0, r8
 80072ae:	47d0      	blx	sl
 80072b0:	3001      	adds	r0, #1
 80072b2:	d09b      	beq.n	80071ec <_printf_i+0x164>
 80072b4:	3501      	adds	r5, #1
 80072b6:	68e3      	ldr	r3, [r4, #12]
 80072b8:	9903      	ldr	r1, [sp, #12]
 80072ba:	1a5b      	subs	r3, r3, r1
 80072bc:	42ab      	cmp	r3, r5
 80072be:	dcf2      	bgt.n	80072a6 <_printf_i+0x21e>
 80072c0:	e7eb      	b.n	800729a <_printf_i+0x212>
 80072c2:	2500      	movs	r5, #0
 80072c4:	f104 0619 	add.w	r6, r4, #25
 80072c8:	e7f5      	b.n	80072b6 <_printf_i+0x22e>
 80072ca:	bf00      	nop
 80072cc:	080077b5 	.word	0x080077b5
 80072d0:	080077c6 	.word	0x080077c6

080072d4 <memcpy>:
 80072d4:	440a      	add	r2, r1
 80072d6:	4291      	cmp	r1, r2
 80072d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072dc:	d100      	bne.n	80072e0 <memcpy+0xc>
 80072de:	4770      	bx	lr
 80072e0:	b510      	push	{r4, lr}
 80072e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ea:	4291      	cmp	r1, r2
 80072ec:	d1f9      	bne.n	80072e2 <memcpy+0xe>
 80072ee:	bd10      	pop	{r4, pc}

080072f0 <memmove>:
 80072f0:	4288      	cmp	r0, r1
 80072f2:	b510      	push	{r4, lr}
 80072f4:	eb01 0402 	add.w	r4, r1, r2
 80072f8:	d902      	bls.n	8007300 <memmove+0x10>
 80072fa:	4284      	cmp	r4, r0
 80072fc:	4623      	mov	r3, r4
 80072fe:	d807      	bhi.n	8007310 <memmove+0x20>
 8007300:	1e43      	subs	r3, r0, #1
 8007302:	42a1      	cmp	r1, r4
 8007304:	d008      	beq.n	8007318 <memmove+0x28>
 8007306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800730a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800730e:	e7f8      	b.n	8007302 <memmove+0x12>
 8007310:	4402      	add	r2, r0
 8007312:	4601      	mov	r1, r0
 8007314:	428a      	cmp	r2, r1
 8007316:	d100      	bne.n	800731a <memmove+0x2a>
 8007318:	bd10      	pop	{r4, pc}
 800731a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800731e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007322:	e7f7      	b.n	8007314 <memmove+0x24>

08007324 <_free_r>:
 8007324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007326:	2900      	cmp	r1, #0
 8007328:	d048      	beq.n	80073bc <_free_r+0x98>
 800732a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800732e:	9001      	str	r0, [sp, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f1a1 0404 	sub.w	r4, r1, #4
 8007336:	bfb8      	it	lt
 8007338:	18e4      	addlt	r4, r4, r3
 800733a:	f000 f8d3 	bl	80074e4 <__malloc_lock>
 800733e:	4a20      	ldr	r2, [pc, #128]	; (80073c0 <_free_r+0x9c>)
 8007340:	9801      	ldr	r0, [sp, #4]
 8007342:	6813      	ldr	r3, [r2, #0]
 8007344:	4615      	mov	r5, r2
 8007346:	b933      	cbnz	r3, 8007356 <_free_r+0x32>
 8007348:	6063      	str	r3, [r4, #4]
 800734a:	6014      	str	r4, [r2, #0]
 800734c:	b003      	add	sp, #12
 800734e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007352:	f000 b8cd 	b.w	80074f0 <__malloc_unlock>
 8007356:	42a3      	cmp	r3, r4
 8007358:	d90b      	bls.n	8007372 <_free_r+0x4e>
 800735a:	6821      	ldr	r1, [r4, #0]
 800735c:	1862      	adds	r2, r4, r1
 800735e:	4293      	cmp	r3, r2
 8007360:	bf04      	itt	eq
 8007362:	681a      	ldreq	r2, [r3, #0]
 8007364:	685b      	ldreq	r3, [r3, #4]
 8007366:	6063      	str	r3, [r4, #4]
 8007368:	bf04      	itt	eq
 800736a:	1852      	addeq	r2, r2, r1
 800736c:	6022      	streq	r2, [r4, #0]
 800736e:	602c      	str	r4, [r5, #0]
 8007370:	e7ec      	b.n	800734c <_free_r+0x28>
 8007372:	461a      	mov	r2, r3
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	b10b      	cbz	r3, 800737c <_free_r+0x58>
 8007378:	42a3      	cmp	r3, r4
 800737a:	d9fa      	bls.n	8007372 <_free_r+0x4e>
 800737c:	6811      	ldr	r1, [r2, #0]
 800737e:	1855      	adds	r5, r2, r1
 8007380:	42a5      	cmp	r5, r4
 8007382:	d10b      	bne.n	800739c <_free_r+0x78>
 8007384:	6824      	ldr	r4, [r4, #0]
 8007386:	4421      	add	r1, r4
 8007388:	1854      	adds	r4, r2, r1
 800738a:	42a3      	cmp	r3, r4
 800738c:	6011      	str	r1, [r2, #0]
 800738e:	d1dd      	bne.n	800734c <_free_r+0x28>
 8007390:	681c      	ldr	r4, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	6053      	str	r3, [r2, #4]
 8007396:	4421      	add	r1, r4
 8007398:	6011      	str	r1, [r2, #0]
 800739a:	e7d7      	b.n	800734c <_free_r+0x28>
 800739c:	d902      	bls.n	80073a4 <_free_r+0x80>
 800739e:	230c      	movs	r3, #12
 80073a0:	6003      	str	r3, [r0, #0]
 80073a2:	e7d3      	b.n	800734c <_free_r+0x28>
 80073a4:	6825      	ldr	r5, [r4, #0]
 80073a6:	1961      	adds	r1, r4, r5
 80073a8:	428b      	cmp	r3, r1
 80073aa:	bf04      	itt	eq
 80073ac:	6819      	ldreq	r1, [r3, #0]
 80073ae:	685b      	ldreq	r3, [r3, #4]
 80073b0:	6063      	str	r3, [r4, #4]
 80073b2:	bf04      	itt	eq
 80073b4:	1949      	addeq	r1, r1, r5
 80073b6:	6021      	streq	r1, [r4, #0]
 80073b8:	6054      	str	r4, [r2, #4]
 80073ba:	e7c7      	b.n	800734c <_free_r+0x28>
 80073bc:	b003      	add	sp, #12
 80073be:	bd30      	pop	{r4, r5, pc}
 80073c0:	20000188 	.word	0x20000188

080073c4 <_malloc_r>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	1ccd      	adds	r5, r1, #3
 80073c8:	f025 0503 	bic.w	r5, r5, #3
 80073cc:	3508      	adds	r5, #8
 80073ce:	2d0c      	cmp	r5, #12
 80073d0:	bf38      	it	cc
 80073d2:	250c      	movcc	r5, #12
 80073d4:	2d00      	cmp	r5, #0
 80073d6:	4606      	mov	r6, r0
 80073d8:	db01      	blt.n	80073de <_malloc_r+0x1a>
 80073da:	42a9      	cmp	r1, r5
 80073dc:	d903      	bls.n	80073e6 <_malloc_r+0x22>
 80073de:	230c      	movs	r3, #12
 80073e0:	6033      	str	r3, [r6, #0]
 80073e2:	2000      	movs	r0, #0
 80073e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073e6:	f000 f87d 	bl	80074e4 <__malloc_lock>
 80073ea:	4921      	ldr	r1, [pc, #132]	; (8007470 <_malloc_r+0xac>)
 80073ec:	680a      	ldr	r2, [r1, #0]
 80073ee:	4614      	mov	r4, r2
 80073f0:	b99c      	cbnz	r4, 800741a <_malloc_r+0x56>
 80073f2:	4f20      	ldr	r7, [pc, #128]	; (8007474 <_malloc_r+0xb0>)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	b923      	cbnz	r3, 8007402 <_malloc_r+0x3e>
 80073f8:	4621      	mov	r1, r4
 80073fa:	4630      	mov	r0, r6
 80073fc:	f000 f862 	bl	80074c4 <_sbrk_r>
 8007400:	6038      	str	r0, [r7, #0]
 8007402:	4629      	mov	r1, r5
 8007404:	4630      	mov	r0, r6
 8007406:	f000 f85d 	bl	80074c4 <_sbrk_r>
 800740a:	1c43      	adds	r3, r0, #1
 800740c:	d123      	bne.n	8007456 <_malloc_r+0x92>
 800740e:	230c      	movs	r3, #12
 8007410:	6033      	str	r3, [r6, #0]
 8007412:	4630      	mov	r0, r6
 8007414:	f000 f86c 	bl	80074f0 <__malloc_unlock>
 8007418:	e7e3      	b.n	80073e2 <_malloc_r+0x1e>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	1b5b      	subs	r3, r3, r5
 800741e:	d417      	bmi.n	8007450 <_malloc_r+0x8c>
 8007420:	2b0b      	cmp	r3, #11
 8007422:	d903      	bls.n	800742c <_malloc_r+0x68>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	441c      	add	r4, r3
 8007428:	6025      	str	r5, [r4, #0]
 800742a:	e004      	b.n	8007436 <_malloc_r+0x72>
 800742c:	6863      	ldr	r3, [r4, #4]
 800742e:	42a2      	cmp	r2, r4
 8007430:	bf0c      	ite	eq
 8007432:	600b      	streq	r3, [r1, #0]
 8007434:	6053      	strne	r3, [r2, #4]
 8007436:	4630      	mov	r0, r6
 8007438:	f000 f85a 	bl	80074f0 <__malloc_unlock>
 800743c:	f104 000b 	add.w	r0, r4, #11
 8007440:	1d23      	adds	r3, r4, #4
 8007442:	f020 0007 	bic.w	r0, r0, #7
 8007446:	1ac2      	subs	r2, r0, r3
 8007448:	d0cc      	beq.n	80073e4 <_malloc_r+0x20>
 800744a:	1a1b      	subs	r3, r3, r0
 800744c:	50a3      	str	r3, [r4, r2]
 800744e:	e7c9      	b.n	80073e4 <_malloc_r+0x20>
 8007450:	4622      	mov	r2, r4
 8007452:	6864      	ldr	r4, [r4, #4]
 8007454:	e7cc      	b.n	80073f0 <_malloc_r+0x2c>
 8007456:	1cc4      	adds	r4, r0, #3
 8007458:	f024 0403 	bic.w	r4, r4, #3
 800745c:	42a0      	cmp	r0, r4
 800745e:	d0e3      	beq.n	8007428 <_malloc_r+0x64>
 8007460:	1a21      	subs	r1, r4, r0
 8007462:	4630      	mov	r0, r6
 8007464:	f000 f82e 	bl	80074c4 <_sbrk_r>
 8007468:	3001      	adds	r0, #1
 800746a:	d1dd      	bne.n	8007428 <_malloc_r+0x64>
 800746c:	e7cf      	b.n	800740e <_malloc_r+0x4a>
 800746e:	bf00      	nop
 8007470:	20000188 	.word	0x20000188
 8007474:	2000018c 	.word	0x2000018c

08007478 <_realloc_r>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	4607      	mov	r7, r0
 800747c:	4614      	mov	r4, r2
 800747e:	460e      	mov	r6, r1
 8007480:	b921      	cbnz	r1, 800748c <_realloc_r+0x14>
 8007482:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007486:	4611      	mov	r1, r2
 8007488:	f7ff bf9c 	b.w	80073c4 <_malloc_r>
 800748c:	b922      	cbnz	r2, 8007498 <_realloc_r+0x20>
 800748e:	f7ff ff49 	bl	8007324 <_free_r>
 8007492:	4625      	mov	r5, r4
 8007494:	4628      	mov	r0, r5
 8007496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007498:	f000 f830 	bl	80074fc <_malloc_usable_size_r>
 800749c:	42a0      	cmp	r0, r4
 800749e:	d20f      	bcs.n	80074c0 <_realloc_r+0x48>
 80074a0:	4621      	mov	r1, r4
 80074a2:	4638      	mov	r0, r7
 80074a4:	f7ff ff8e 	bl	80073c4 <_malloc_r>
 80074a8:	4605      	mov	r5, r0
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d0f2      	beq.n	8007494 <_realloc_r+0x1c>
 80074ae:	4631      	mov	r1, r6
 80074b0:	4622      	mov	r2, r4
 80074b2:	f7ff ff0f 	bl	80072d4 <memcpy>
 80074b6:	4631      	mov	r1, r6
 80074b8:	4638      	mov	r0, r7
 80074ba:	f7ff ff33 	bl	8007324 <_free_r>
 80074be:	e7e9      	b.n	8007494 <_realloc_r+0x1c>
 80074c0:	4635      	mov	r5, r6
 80074c2:	e7e7      	b.n	8007494 <_realloc_r+0x1c>

080074c4 <_sbrk_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	4d06      	ldr	r5, [pc, #24]	; (80074e0 <_sbrk_r+0x1c>)
 80074c8:	2300      	movs	r3, #0
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	f7fb fa7c 	bl	80029cc <_sbrk>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_sbrk_r+0x1a>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_sbrk_r+0x1a>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20000424 	.word	0x20000424

080074e4 <__malloc_lock>:
 80074e4:	4801      	ldr	r0, [pc, #4]	; (80074ec <__malloc_lock+0x8>)
 80074e6:	f000 b811 	b.w	800750c <__retarget_lock_acquire_recursive>
 80074ea:	bf00      	nop
 80074ec:	2000042c 	.word	0x2000042c

080074f0 <__malloc_unlock>:
 80074f0:	4801      	ldr	r0, [pc, #4]	; (80074f8 <__malloc_unlock+0x8>)
 80074f2:	f000 b80c 	b.w	800750e <__retarget_lock_release_recursive>
 80074f6:	bf00      	nop
 80074f8:	2000042c 	.word	0x2000042c

080074fc <_malloc_usable_size_r>:
 80074fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007500:	1f18      	subs	r0, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	bfbc      	itt	lt
 8007506:	580b      	ldrlt	r3, [r1, r0]
 8007508:	18c0      	addlt	r0, r0, r3
 800750a:	4770      	bx	lr

0800750c <__retarget_lock_acquire_recursive>:
 800750c:	4770      	bx	lr

0800750e <__retarget_lock_release_recursive>:
 800750e:	4770      	bx	lr

08007510 <sqrt>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	ed2d 8b02 	vpush	{d8}
 8007516:	ec55 4b10 	vmov	r4, r5, d0
 800751a:	f000 f82d 	bl	8007578 <__ieee754_sqrt>
 800751e:	4b15      	ldr	r3, [pc, #84]	; (8007574 <sqrt+0x64>)
 8007520:	eeb0 8a40 	vmov.f32	s16, s0
 8007524:	eef0 8a60 	vmov.f32	s17, s1
 8007528:	f993 3000 	ldrsb.w	r3, [r3]
 800752c:	3301      	adds	r3, #1
 800752e:	d019      	beq.n	8007564 <sqrt+0x54>
 8007530:	4622      	mov	r2, r4
 8007532:	462b      	mov	r3, r5
 8007534:	4620      	mov	r0, r4
 8007536:	4629      	mov	r1, r5
 8007538:	f7f9 fb00 	bl	8000b3c <__aeabi_dcmpun>
 800753c:	b990      	cbnz	r0, 8007564 <sqrt+0x54>
 800753e:	2200      	movs	r2, #0
 8007540:	2300      	movs	r3, #0
 8007542:	4620      	mov	r0, r4
 8007544:	4629      	mov	r1, r5
 8007546:	f7f9 fad1 	bl	8000aec <__aeabi_dcmplt>
 800754a:	b158      	cbz	r0, 8007564 <sqrt+0x54>
 800754c:	f7ff fb80 	bl	8006c50 <__errno>
 8007550:	2321      	movs	r3, #33	; 0x21
 8007552:	6003      	str	r3, [r0, #0]
 8007554:	2200      	movs	r2, #0
 8007556:	2300      	movs	r3, #0
 8007558:	4610      	mov	r0, r2
 800755a:	4619      	mov	r1, r3
 800755c:	f7f9 f97e 	bl	800085c <__aeabi_ddiv>
 8007560:	ec41 0b18 	vmov	d8, r0, r1
 8007564:	eeb0 0a48 	vmov.f32	s0, s16
 8007568:	eef0 0a68 	vmov.f32	s1, s17
 800756c:	ecbd 8b02 	vpop	{d8}
 8007570:	bd38      	pop	{r3, r4, r5, pc}
 8007572:	bf00      	nop
 8007574:	20000074 	.word	0x20000074

08007578 <__ieee754_sqrt>:
 8007578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800757c:	ec55 4b10 	vmov	r4, r5, d0
 8007580:	4e56      	ldr	r6, [pc, #344]	; (80076dc <__ieee754_sqrt+0x164>)
 8007582:	43ae      	bics	r6, r5
 8007584:	ee10 0a10 	vmov	r0, s0
 8007588:	ee10 3a10 	vmov	r3, s0
 800758c:	4629      	mov	r1, r5
 800758e:	462a      	mov	r2, r5
 8007590:	d110      	bne.n	80075b4 <__ieee754_sqrt+0x3c>
 8007592:	ee10 2a10 	vmov	r2, s0
 8007596:	462b      	mov	r3, r5
 8007598:	f7f9 f836 	bl	8000608 <__aeabi_dmul>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4620      	mov	r0, r4
 80075a2:	4629      	mov	r1, r5
 80075a4:	f7f8 fe7a 	bl	800029c <__adddf3>
 80075a8:	4604      	mov	r4, r0
 80075aa:	460d      	mov	r5, r1
 80075ac:	ec45 4b10 	vmov	d0, r4, r5
 80075b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b4:	2d00      	cmp	r5, #0
 80075b6:	dc10      	bgt.n	80075da <__ieee754_sqrt+0x62>
 80075b8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80075bc:	4330      	orrs	r0, r6
 80075be:	d0f5      	beq.n	80075ac <__ieee754_sqrt+0x34>
 80075c0:	b15d      	cbz	r5, 80075da <__ieee754_sqrt+0x62>
 80075c2:	ee10 2a10 	vmov	r2, s0
 80075c6:	462b      	mov	r3, r5
 80075c8:	ee10 0a10 	vmov	r0, s0
 80075cc:	f7f8 fe64 	bl	8000298 <__aeabi_dsub>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	f7f9 f942 	bl	800085c <__aeabi_ddiv>
 80075d8:	e7e6      	b.n	80075a8 <__ieee754_sqrt+0x30>
 80075da:	1509      	asrs	r1, r1, #20
 80075dc:	d076      	beq.n	80076cc <__ieee754_sqrt+0x154>
 80075de:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80075e2:	07ce      	lsls	r6, r1, #31
 80075e4:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80075e8:	bf5e      	ittt	pl
 80075ea:	0fda      	lsrpl	r2, r3, #31
 80075ec:	005b      	lslpl	r3, r3, #1
 80075ee:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80075f2:	0fda      	lsrs	r2, r3, #31
 80075f4:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80075f8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80075fc:	2000      	movs	r0, #0
 80075fe:	106d      	asrs	r5, r5, #1
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	f04f 0e16 	mov.w	lr, #22
 8007606:	4684      	mov	ip, r0
 8007608:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800760c:	eb0c 0401 	add.w	r4, ip, r1
 8007610:	4294      	cmp	r4, r2
 8007612:	bfde      	ittt	le
 8007614:	1b12      	suble	r2, r2, r4
 8007616:	eb04 0c01 	addle.w	ip, r4, r1
 800761a:	1840      	addle	r0, r0, r1
 800761c:	0052      	lsls	r2, r2, #1
 800761e:	f1be 0e01 	subs.w	lr, lr, #1
 8007622:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007626:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800762a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800762e:	d1ed      	bne.n	800760c <__ieee754_sqrt+0x94>
 8007630:	4671      	mov	r1, lr
 8007632:	2720      	movs	r7, #32
 8007634:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007638:	4562      	cmp	r2, ip
 800763a:	eb04 060e 	add.w	r6, r4, lr
 800763e:	dc02      	bgt.n	8007646 <__ieee754_sqrt+0xce>
 8007640:	d113      	bne.n	800766a <__ieee754_sqrt+0xf2>
 8007642:	429e      	cmp	r6, r3
 8007644:	d811      	bhi.n	800766a <__ieee754_sqrt+0xf2>
 8007646:	2e00      	cmp	r6, #0
 8007648:	eb06 0e04 	add.w	lr, r6, r4
 800764c:	da43      	bge.n	80076d6 <__ieee754_sqrt+0x15e>
 800764e:	f1be 0f00 	cmp.w	lr, #0
 8007652:	db40      	blt.n	80076d6 <__ieee754_sqrt+0x15e>
 8007654:	f10c 0801 	add.w	r8, ip, #1
 8007658:	eba2 020c 	sub.w	r2, r2, ip
 800765c:	429e      	cmp	r6, r3
 800765e:	bf88      	it	hi
 8007660:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007664:	1b9b      	subs	r3, r3, r6
 8007666:	4421      	add	r1, r4
 8007668:	46c4      	mov	ip, r8
 800766a:	0052      	lsls	r2, r2, #1
 800766c:	3f01      	subs	r7, #1
 800766e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007672:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007676:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800767a:	d1dd      	bne.n	8007638 <__ieee754_sqrt+0xc0>
 800767c:	4313      	orrs	r3, r2
 800767e:	d006      	beq.n	800768e <__ieee754_sqrt+0x116>
 8007680:	1c4c      	adds	r4, r1, #1
 8007682:	bf13      	iteet	ne
 8007684:	3101      	addne	r1, #1
 8007686:	3001      	addeq	r0, #1
 8007688:	4639      	moveq	r1, r7
 800768a:	f021 0101 	bicne.w	r1, r1, #1
 800768e:	1043      	asrs	r3, r0, #1
 8007690:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007694:	0849      	lsrs	r1, r1, #1
 8007696:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800769a:	07c2      	lsls	r2, r0, #31
 800769c:	bf48      	it	mi
 800769e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80076a2:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80076a6:	460c      	mov	r4, r1
 80076a8:	463d      	mov	r5, r7
 80076aa:	e77f      	b.n	80075ac <__ieee754_sqrt+0x34>
 80076ac:	0ada      	lsrs	r2, r3, #11
 80076ae:	3815      	subs	r0, #21
 80076b0:	055b      	lsls	r3, r3, #21
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	d0fa      	beq.n	80076ac <__ieee754_sqrt+0x134>
 80076b6:	02d7      	lsls	r7, r2, #11
 80076b8:	d50a      	bpl.n	80076d0 <__ieee754_sqrt+0x158>
 80076ba:	f1c1 0420 	rsb	r4, r1, #32
 80076be:	fa23 f404 	lsr.w	r4, r3, r4
 80076c2:	1e4d      	subs	r5, r1, #1
 80076c4:	408b      	lsls	r3, r1
 80076c6:	4322      	orrs	r2, r4
 80076c8:	1b41      	subs	r1, r0, r5
 80076ca:	e788      	b.n	80075de <__ieee754_sqrt+0x66>
 80076cc:	4608      	mov	r0, r1
 80076ce:	e7f0      	b.n	80076b2 <__ieee754_sqrt+0x13a>
 80076d0:	0052      	lsls	r2, r2, #1
 80076d2:	3101      	adds	r1, #1
 80076d4:	e7ef      	b.n	80076b6 <__ieee754_sqrt+0x13e>
 80076d6:	46e0      	mov	r8, ip
 80076d8:	e7be      	b.n	8007658 <__ieee754_sqrt+0xe0>
 80076da:	bf00      	nop
 80076dc:	7ff00000 	.word	0x7ff00000

080076e0 <_init>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	bf00      	nop
 80076e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e6:	bc08      	pop	{r3}
 80076e8:	469e      	mov	lr, r3
 80076ea:	4770      	bx	lr

080076ec <_fini>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	bf00      	nop
 80076f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f2:	bc08      	pop	{r3}
 80076f4:	469e      	mov	lr, r3
 80076f6:	4770      	bx	lr
